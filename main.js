!function (e) { "use strict"; "function" == typeof define && define.amd ? define(["jquery"], e) : e("undefined" != typeof jQuery ? jQuery : window.Zepto) }(function (e) { "use strict"; function t(t) { var r = t.data; t.isDefaultPrevented() || (t.preventDefault(), e(t.target).ajaxSubmit(r)) } function r(t) { var r = t.target, a = e(r); if (!a.is("[type=submit],[type=image]")) { var n = a.closest("[type=submit]"); if (0 === n.length) return; r = n[0] } var i = this; if (i.clk = r, "image" == r.type) if (void 0 !== t.offsetX) i.clk_x = t.offsetX, i.clk_y = t.offsetY; else if ("function" == typeof e.fn.offset) { var o = a.offset(); i.clk_x = t.pageX - o.left, i.clk_y = t.pageY - o.top } else i.clk_x = t.pageX - r.offsetLeft, i.clk_y = t.pageY - r.offsetTop; setTimeout(function () { i.clk = i.clk_x = i.clk_y = null }, 100) } function a() { if (e.fn.ajaxSubmit.debug) { var t = "[jquery.form] " + Array.prototype.join.call(arguments, ""); window.console && window.console.log ? window.console.log(t) : window.opera && window.opera.postError && window.opera.postError(t) } } var n = {}; n.fileapi = void 0 !== e("<input type='file'/>").get(0).files, n.formdata = void 0 !== window.FormData; var i = !!e.fn.prop; e.fn.attr2 = function () { if (!i) return this.attr.apply(this, arguments); var e = this.prop.apply(this, arguments); return e && e.jquery || "string" == typeof e ? e : this.attr.apply(this, arguments) }, e.fn.ajaxSubmit = function (t) { function r(r) { var a, n, i = e.param(r, t.traditional).split("&"), o = i.length, s = []; for (a = 0; o > a; a++)i[a] = i[a].replace(/\+/g, " "), n = i[a].split("="), s.push([decodeURIComponent(n[0]), decodeURIComponent(n[1])]); return s } function o(a) { for (var n = new FormData, i = 0; i < a.length; i++)n.append(a[i].name, a[i].value); if (t.extraData) { var o = r(t.extraData); for (i = 0; i < o.length; i++)o[i] && n.append(o[i][0], o[i][1]) } t.data = null; var s = e.extend(!0, {}, e.ajaxSettings, t, { contentType: !1, processData: !1, cache: !1, type: u || "POST" }); t.uploadProgress && (s.xhr = function () { var r = e.ajaxSettings.xhr(); return r.upload && r.upload.addEventListener("progress", function (e) { var r = 0, a = e.loaded || e.position, n = e.total; e.lengthComputable && (r = Math.ceil(a / n * 100)), t.uploadProgress(e, a, n, r) }, !1), r }), s.data = null; var c = s.beforeSend; return s.beforeSend = function (e, r) { r.data = t.formData ? t.formData : n, c && c.call(this, e, r) }, e.ajax(s) } function s(r) { function n(e) { var t = null; try { e.contentWindow && (t = e.contentWindow.document) } catch (r) { a("cannot get iframe.contentWindow document: " + r) } if (t) return t; try { t = e.contentDocument ? e.contentDocument : e.document } catch (r) { a("cannot get iframe.contentDocument: " + r), t = e.document } return t } function o() { function t() { try { var e = n(g).readyState; a("state = " + e), e && "uninitialized" == e.toLowerCase() && setTimeout(t, 50) } catch (r) { a("Server abort: ", r, " (", r.name, ")"), s(k), j && clearTimeout(j), j = void 0 } } var r = f.attr2("target"), i = f.attr2("action"), o = "multipart/form-data", c = f.attr("enctype") || f.attr("encoding") || o; w.setAttribute("target", p), (!u || /post/i.test(u)) && w.setAttribute("method", "POST"), i != m.url && w.setAttribute("action", m.url), m.skipEncodingOverride || u && !/post/i.test(u) || f.attr({ encoding: "multipart/form-data", enctype: "multipart/form-data" }), m.timeout && (j = setTimeout(function () { T = !0, s(D) }, m.timeout)); var l = []; try { if (m.extraData) for (var d in m.extraData) m.extraData.hasOwnProperty(d) && l.push(e.isPlainObject(m.extraData[d]) && m.extraData[d].hasOwnProperty("name") && m.extraData[d].hasOwnProperty("value") ? e('<input type="hidden" name="' + m.extraData[d].name + '">').val(m.extraData[d].value).appendTo(w)[0] : e('<input type="hidden" name="' + d + '">').val(m.extraData[d]).appendTo(w)[0]); m.iframeTarget || v.appendTo("body"), g.attachEvent ? g.attachEvent("onload", s) : g.addEventListener("load", s, !1), setTimeout(t, 15); try { w.submit() } catch (h) { var x = document.createElement("form").submit; x.apply(w) } } finally { w.setAttribute("action", i), w.setAttribute("enctype", c), r ? w.setAttribute("target", r) : f.removeAttr("target"), e(l).remove() } } function s(t) { if (!x.aborted && !F) { if (M = n(g), M || (a("cannot access response document"), t = k), t === D && x) return x.abort("timeout"), void S.reject(x, "timeout"); if (t == k && x) return x.abort("server abort"), void S.reject(x, "error", "server abort"); if (M && M.location.href != m.iframeSrc || T) { g.detachEvent ? g.detachEvent("onload", s) : g.removeEventListener("load", s, !1); var r, i = "success"; try { if (T) throw "timeout"; var o = "xml" == m.dataType || M.XMLDocument || e.isXMLDoc(M); if (a("isXml=" + o), !o && window.opera && (null === M.body || !M.body.innerHTML) && --O) return a("requeing onLoad callback, DOM not available"), void setTimeout(s, 250); var u = M.body ? M.body : M.documentElement; x.responseText = u ? u.innerHTML : null, x.responseXML = M.XMLDocument ? M.XMLDocument : M, o && (m.dataType = "xml"), x.getResponseHeader = function (e) { var t = { "content-type": m.dataType }; return t[e.toLowerCase()] }, u && (x.status = Number(u.getAttribute("status")) || x.status, x.statusText = u.getAttribute("statusText") || x.statusText); var c = (m.dataType || "").toLowerCase(), l = /(json|script|text)/.test(c); if (l || m.textarea) { var f = M.getElementsByTagName("textarea")[0]; if (f) x.responseText = f.value, x.status = Number(f.getAttribute("status")) || x.status, x.statusText = f.getAttribute("statusText") || x.statusText; else if (l) { var p = M.getElementsByTagName("pre")[0], h = M.getElementsByTagName("body")[0]; p ? x.responseText = p.textContent ? p.textContent : p.innerText : h && (x.responseText = h.textContent ? h.textContent : h.innerText) } } else "xml" == c && !x.responseXML && x.responseText && (x.responseXML = X(x.responseText)); try { E = _(x, c, m) } catch (y) { i = "parsererror", x.error = r = y || i } } catch (y) { a("error caught: ", y), i = "error", x.error = r = y || i } x.aborted && (a("upload aborted"), i = null), x.status && (i = x.status >= 200 && x.status < 300 || 304 === x.status ? "success" : "error"), "success" === i ? (m.success && m.success.call(m.context, E, "success", x), S.resolve(x.responseText, "success", x), d && e.event.trigger("ajaxSuccess", [x, m])) : i && (void 0 === r && (r = x.statusText), m.error && m.error.call(m.context, x, i, r), S.reject(x, "error", r), d && e.event.trigger("ajaxError", [x, m, r])), d && e.event.trigger("ajaxComplete", [x, m]), d && !--e.active && e.event.trigger("ajaxStop"), m.complete && m.complete.call(m.context, x, i), F = !0, m.timeout && clearTimeout(j), setTimeout(function () { m.iframeTarget ? v.attr("src", m.iframeSrc) : v.remove(), x.responseXML = null }, 100) } } } var c, l, m, d, p, v, g, x, y, b, T, j, w = f[0], S = e.Deferred(); if (S.abort = function (e) { x.abort(e) }, r) for (l = 0; l < h.length; l++)c = e(h[l]), i ? c.prop("disabled", !1) : c.removeAttr("disabled"); if (m = e.extend(!0, {}, e.ajaxSettings, t), m.context = m.context || m, p = "jqFormIO" + (new Date).getTime(), m.iframeTarget ? (v = e(m.iframeTarget), b = v.attr2("name"), b ? p = b : v.attr2("name", p)) : (v = e('<iframe name="' + p + '" src="' + m.iframeSrc + '" />'), v.css({ position: "absolute", top: "-1000px", left: "-1000px" })), g = v[0], x = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: "n/a", getAllResponseHeaders: function () { }, getResponseHeader: function () { }, setRequestHeader: function () { }, abort: function (t) { var r = "timeout" === t ? "timeout" : "aborted"; a("aborting upload... " + r), this.aborted = 1; try { g.contentWindow.document.execCommand && g.contentWindow.document.execCommand("Stop") } catch (n) { } v.attr("src", m.iframeSrc), x.error = r, m.error && m.error.call(m.context, x, r, t), d && e.event.trigger("ajaxError", [x, m, r]), m.complete && m.complete.call(m.context, x, r) } }, d = m.global, d && 0 === e.active++ && e.event.trigger("ajaxStart"), d && e.event.trigger("ajaxSend", [x, m]), m.beforeSend && m.beforeSend.call(m.context, x, m) === !1) return m.global && e.active--, S.reject(), S; if (x.aborted) return S.reject(), S; y = w.clk, y && (b = y.name, b && !y.disabled && (m.extraData = m.extraData || {}, m.extraData[b] = y.value, "image" == y.type && (m.extraData[b + ".x"] = w.clk_x, m.extraData[b + ".y"] = w.clk_y))); var D = 1, k = 2, A = e("meta[name=csrf-token]").attr("content"), L = e("meta[name=csrf-param]").attr("content"); L && A && (m.extraData = m.extraData || {}, m.extraData[L] = A), m.forceSync ? o() : setTimeout(o, 10); var E, M, F, O = 50, X = e.parseXML || function (e, t) { return window.ActiveXObject ? (t = new ActiveXObject("Microsoft.XMLDOM"), t.async = "false", t.loadXML(e)) : t = (new DOMParser).parseFromString(e, "text/xml"), t && t.documentElement && "parsererror" != t.documentElement.nodeName ? t : null }, C = e.parseJSON || function (e) { return window.eval("(" + e + ")") }, _ = function (t, r, a) { var n = t.getResponseHeader("content-type") || "", i = "xml" === r || !r && n.indexOf("xml") >= 0, o = i ? t.responseXML : t.responseText; return i && "parsererror" === o.documentElement.nodeName && e.error && e.error("parsererror"), a && a.dataFilter && (o = a.dataFilter(o, r)), "string" == typeof o && ("json" === r || !r && n.indexOf("json") >= 0 ? o = C(o) : ("script" === r || !r && n.indexOf("javascript") >= 0) && e.globalEval(o)), o }; return S } if (!this.length) return a("ajaxSubmit: skipping submit process - no element selected"), this; var u, c, l, f = this; "function" == typeof t ? t = { success: t } : void 0 === t && (t = {}), u = t.type || this.attr2("method"), c = t.url || this.attr2("action"), l = "string" == typeof c ? e.trim(c) : "", l = l || window.location.href || "", l && (l = (l.match(/^([^#]+)/) || [])[1]), t = e.extend(!0, { url: l, success: e.ajaxSettings.success, type: u || e.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank" }, t); var m = {}; if (this.trigger("form-pre-serialize", [this, t, m]), m.veto) return a("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), this; if (t.beforeSerialize && t.beforeSerialize(this, t) === !1) return a("ajaxSubmit: submit aborted via beforeSerialize callback"), this; var d = t.traditional; void 0 === d && (d = e.ajaxSettings.traditional); var p, h = [], v = this.formToArray(t.semantic, h); if (t.data && (t.extraData = t.data, p = e.param(t.data, d)), t.beforeSubmit && t.beforeSubmit(v, this, t) === !1) return a("ajaxSubmit: submit aborted via beforeSubmit callback"), this; if (this.trigger("form-submit-validate", [v, this, t, m]), m.veto) return a("ajaxSubmit: submit vetoed via form-submit-validate trigger"), this; var g = e.param(v, d); p && (g = g ? g + "&" + p : p), "GET" == t.type.toUpperCase() ? (t.url += (t.url.indexOf("?") >= 0 ? "&" : "?") + g, t.data = null) : t.data = g; var x = []; if (t.resetForm && x.push(function () { f.resetForm() }), t.clearForm && x.push(function () { f.clearForm(t.includeHidden) }), !t.dataType && t.target) { var y = t.success || function () { }; x.push(function (r) { var a = t.replaceTarget ? "replaceWith" : "html"; e(t.target)[a](r).each(y, arguments) }) } else t.success && x.push(t.success); if (t.success = function (e, r, a) { for (var n = t.context || this, i = 0, o = x.length; o > i; i++)x[i].apply(n, [e, r, a || f, f]) }, t.error) { var b = t.error; t.error = function (e, r, a) { var n = t.context || this; b.apply(n, [e, r, a, f]) } } if (t.complete) { var T = t.complete; t.complete = function (e, r) { var a = t.context || this; T.apply(a, [e, r, f]) } } var j = e("input[type=file]:enabled", this).filter(function () { return "" !== e(this).val() }), w = j.length > 0, S = "multipart/form-data", D = f.attr("enctype") == S || f.attr("encoding") == S, k = n.fileapi && n.formdata; a("fileAPI :" + k); var A, L = (w || D) && !k; t.iframe !== !1 && (t.iframe || L) ? t.closeKeepAlive ? e.get(t.closeKeepAlive, function () { A = s(v) }) : A = s(v) : A = (w || D) && k ? o(v) : e.ajax(t), f.removeData("jqxhr").data("jqxhr", A); for (var E = 0; E < h.length; E++)h[E] = null; return this.trigger("form-submit-notify", [this, t]), this }, e.fn.ajaxForm = function (n) { if (n = n || {}, n.delegation = n.delegation && e.isFunction(e.fn.on), !n.delegation && 0 === this.length) { var i = { s: this.selector, c: this.context }; return !e.isReady && i.s ? (a("DOM not ready, queuing ajaxForm"), e(function () { e(i.s, i.c).ajaxForm(n) }), this) : (a("terminating; zero elements found by selector" + (e.isReady ? "" : " (DOM not ready)")), this) } return n.delegation ? (e(document).off("submit.form-plugin", this.selector, t).off("click.form-plugin", this.selector, r).on("submit.form-plugin", this.selector, n, t).on("click.form-plugin", this.selector, n, r), this) : this.ajaxFormUnbind().bind("submit.form-plugin", n, t).bind("click.form-plugin", n, r) }, e.fn.ajaxFormUnbind = function () { return this.unbind("submit.form-plugin click.form-plugin") }, e.fn.formToArray = function (t, r) { var a = []; if (0 === this.length) return a; var i, o = this[0], s = this.attr("id"), u = t ? o.getElementsByTagName("*") : o.elements; if (u && !/MSIE [678]/.test(navigator.userAgent) && (u = e(u).get()), s && (i = e(':input[form="' + s + '"]').get(), i.length && (u = (u || []).concat(i))), !u || !u.length) return a; var c, l, f, m, d, p, h; for (c = 0, p = u.length; p > c; c++)if (d = u[c], f = d.name, f && !d.disabled) if (t && o.clk && "image" == d.type) o.clk == d && (a.push({ name: f, value: e(d).val(), type: d.type }), a.push({ name: f + ".x", value: o.clk_x }, { name: f + ".y", value: o.clk_y })); else if (m = e.fieldValue(d, !0), m && m.constructor == Array) for (r && r.push(d), l = 0, h = m.length; h > l; l++)a.push({ name: f, value: m[l] }); else if (n.fileapi && "file" == d.type) { r && r.push(d); var v = d.files; if (v.length) for (l = 0; l < v.length; l++)a.push({ name: f, value: v[l], type: d.type }); else a.push({ name: f, value: "", type: d.type }) } else null !== m && "undefined" != typeof m && (r && r.push(d), a.push({ name: f, value: m, type: d.type, required: d.required })); if (!t && o.clk) { var g = e(o.clk), x = g[0]; f = x.name, f && !x.disabled && "image" == x.type && (a.push({ name: f, value: g.val() }), a.push({ name: f + ".x", value: o.clk_x }, { name: f + ".y", value: o.clk_y })) } return a }, e.fn.formSerialize = function (t) { return e.param(this.formToArray(t)) }, e.fn.fieldSerialize = function (t) { var r = []; return this.each(function () { var a = this.name; if (a) { var n = e.fieldValue(this, t); if (n && n.constructor == Array) for (var i = 0, o = n.length; o > i; i++)r.push({ name: a, value: n[i] }); else null !== n && "undefined" != typeof n && r.push({ name: this.name, value: n }) } }), e.param(r) }, e.fn.fieldValue = function (t) { for (var r = [], a = 0, n = this.length; n > a; a++) { var i = this[a], o = e.fieldValue(i, t); null === o || "undefined" == typeof o || o.constructor == Array && !o.length || (o.constructor == Array ? e.merge(r, o) : r.push(o)) } return r }, e.fieldValue = function (t, r) { var a = t.name, n = t.type, i = t.tagName.toLowerCase(); if (void 0 === r && (r = !0), r && (!a || t.disabled || "reset" == n || "button" == n || ("checkbox" == n || "radio" == n) && !t.checked || ("submit" == n || "image" == n) && t.form && t.form.clk != t || "select" == i && -1 == t.selectedIndex)) return null; if ("select" == i) { var o = t.selectedIndex; if (0 > o) return null; for (var s = [], u = t.options, c = "select-one" == n, l = c ? o + 1 : u.length, f = c ? o : 0; l > f; f++) { var m = u[f]; if (m.selected) { var d = m.value; if (d || (d = m.attributes && m.attributes.value && !m.attributes.value.specified ? m.text : m.value), c) return d; s.push(d) } } return s } return e(t).val() }, e.fn.clearForm = function (t) { return this.each(function () { e("input,select,textarea", this).clearFields(t) }) }, e.fn.clearFields = e.fn.clearInputs = function (t) { var r = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function () { var a = this.type, n = this.tagName.toLowerCase(); r.test(a) || "textarea" == n ? this.value = "" : "checkbox" == a || "radio" == a ? this.checked = !1 : "select" == n ? this.selectedIndex = -1 : "file" == a ? /MSIE/.test(navigator.userAgent) ? e(this).replaceWith(e(this).clone(!0)) : e(this).val("") : t && (t === !0 && /hidden/.test(a) || "string" == typeof t && e(this).is(t)) && (this.value = "") }) }, e.fn.resetForm = function () { return this.each(function () { ("function" == typeof this.reset || "object" == typeof this.reset && !this.reset.nodeType) && this.reset() }) }, e.fn.enable = function (e) { return void 0 === e && (e = !0), this.each(function () { this.disabled = !e }) }, e.fn.selected = function (t) { return void 0 === t && (t = !0), this.each(function () { var r = this.type; if ("checkbox" == r || "radio" == r) this.checked = t; else if ("option" == this.tagName.toLowerCase()) { var a = e(this).parent("select"); t && a[0] && "select-one" == a[0].type && a.find("option").selected(!1), this.selected = t } }) }, e.fn.ajaxSubmit.debug = !1 }); !function (a) { "use strict"; var t = function (t, e) { this.options = e, this.$tabs = a(t), this._accordionVisible = !1, this._initAccordion(), this._checkStateOnResize(); var i = this; setTimeout(function () { i.checkState() }, 0) }; t.DEFAULTS = { accordionClass: "visible-xs bg-blue-on-mobile", tabsClass: "hidden-xs", accordionTemplate: function (a, t, e, i) { return '<div class="panel panel-default">   <div class="panel-heading">      <h4 class="panel-title">      </h4>   </div>   <div id="' + t + '" class="panel-collapse collapse ' + (i ? "in" : "") + '">       <div class="panel-body js-tabcollapse-panel-body">       </div>   </div></div>' } }, t.prototype.checkState = function () { this.$tabs.is(":visible") && this._accordionVisible ? (this.showTabs(), this._accordionVisible = !1) : this.$accordion.is(":visible") && !this._accordionVisible && (this.showAccordion(), this._accordionVisible = !0) }, t.prototype.showTabs = function () { var t = this; this.$tabs.trigger(a.Event("show-tabs.bs.tabcollapse")); var e = this.$accordion.find(".js-tabcollapse-panel-heading").detach(); e.each(function () { var e = a(this), i = e.data("bs.tabcollapse.parentLi"), s = t._panelHeadingToTabHeading(e); i.removeClass("active"), i.parent().hasClass("dropdown-menu") && !i.siblings("li").hasClass("active") && i.parent().parent().removeClass("active"), s.hasClass("collapsed") ? s.removeClass("collapsed") : (i.addClass("active"), i.parent().hasClass("dropdown-menu") && i.parent().parent().addClass("active")), i.append(e) }), a("li").hasClass("active") || a("li").first().addClass("active"); var i = this.$accordion.find(".js-tabcollapse-panel-body"); if (i.each(function () { var t = a(this), e = t.data("bs.tabcollapse.tabpane"); e.append(t.contents().detach()) }), this.$accordion.html(""), this.options.updateLinks) { var s = this.getTabContentElement(); s.find('[data-toggle-was="tab"], [data-toggle-was="pill"]').each(function () { var t = a(this), e = t.attr("href").replace(/-collapse$/g, ""); t.attr({ "data-toggle": t.attr("data-toggle-was"), "data-toggle-was": "", "data-parent": "", href: e }) }) } this.$tabs.trigger(a.Event("shown-tabs.bs.tabcollapse")) }, t.prototype.getTabContentElement = function () { var t = a(this.options.tabContentSelector); return 0 === t.length && (t = this.$tabs.siblings(".tab-content")), t }, t.prototype.showAccordion = function () { this.$tabs.trigger(a.Event("show-accordion.bs.tabcollapse")); var t = this.$tabs.find('li:not(.dropdown) [data-toggle="tab"], li:not(.dropdown) [data-toggle="pill"]'), e = this; if (t.each(function () { var t = a(this), i = t.parent(); t.data("bs.tabcollapse.parentLi", i), e.$accordion.append(e._createAccordionGroup(e.$accordion.attr("id"), t.detach())) }), this.options.updateLinks) { var i = this.$accordion.attr("id"), s = this.$accordion.find(".js-tabcollapse-panel-body"); s.find('[data-toggle="tab"], [data-toggle="pill"]').each(function () { var t = a(this), e = t.attr("href") + "-collapse"; t.attr({ "data-toggle-was": t.attr("data-toggle"), "data-toggle": "collapse", "data-parent": "#" + i, href: e }) }) } this.$tabs.trigger(a.Event("shown-accordion.bs.tabcollapse")) }, t.prototype._panelHeadingToTabHeading = function (a) { var t = a.attr("href").replace(/-collapse$/g, ""); return a.attr({ "data-toggle": "tab", href: t, "data-parent": "" }), a }, t.prototype._tabHeadingToPanelHeading = function (a, t, e, i) { return a.addClass("js-tabcollapse-panel-heading " + (i ? "" : "collapsed")), a.attr({ "data-toggle": "collapse", "data-parent": "#" + e, href: "#" + t }), a.append('<i class="hidden-lg hidden-md glyphicon glyphicon-icon pull-right"></i>'), a }, t.prototype._checkStateOnResize = function () { var t = this; a(window).resize(function () { clearTimeout(t._resizeTimeout), t._resizeTimeout = setTimeout(function () { t.checkState() }, 100) }) }, t.prototype._initAccordion = function () { var t = function () { for (var a = "", t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = 0; 5 > e; e++)a += t.charAt(Math.floor(Math.random() * t.length)); return a }, e = this.$tabs.attr("id"), i = (e ? e : t()) + "-accordion"; this.$accordion = a('<div class="panel-group ' + this.options.accordionClass + '" id="' + i + '"></div>'), this.$tabs.after(this.$accordion), this.$tabs.addClass(this.options.tabsClass), this.getTabContentElement().addClass(this.options.tabsClass) }, t.prototype._createAccordionGroup = function (t, e) { var i = e.attr("data-target"), s = e.data("bs.tabcollapse.parentLi").is(".active"); i || (i = e.attr("href"), i = i && i.replace(/.*(?=#[^\s]*$)/, "")); var o = a(i), n = o.attr("id") + "-collapse", l = a(this.options.accordionTemplate(e, n, t, s)); return l.find(".panel-heading > .panel-title").append(this._tabHeadingToPanelHeading(e, n, t, s)), l.find(".panel-body").append(o.contents().detach()).data("bs.tabcollapse.tabpane", o), l }, a.fn.tabCollapse = function (e) { return this.each(function () { var i = a(this), s = i.data("bs.tabcollapse"), o = a.extend({}, t.DEFAULTS, i.data(), "object" == typeof e && e); s || i.data("bs.tabcollapse", new t(this, o)) }) }, a.fn.tabCollapse.Constructor = t }(window.jQuery); (function (c) { c.extend(c.fn, { validate: function (a) { if (this.length) { var b = c.data(this[0], "validator"); if (b) return b; b = new c.validator(a, this[0]); c.data(this[0], "validator", b); if (b.settings.onsubmit) { this.find("input, button").filter(".cancel").click(function () { b.cancelSubmit = true }); b.settings.submitHandler && this.find("input, button").filter(":submit").click(function () { b.submitButton = this }); this.submit(function (d) { function e() { if (b.settings.submitHandler) { if (b.submitButton) var f = c("<input type='hidden'/>").attr("name", b.submitButton.name).val(b.submitButton.value).appendTo(b.currentForm); b.settings.submitHandler.call(b, b.currentForm); b.submitButton && f.remove(); return false } return true } b.settings.debug && d.preventDefault(); if (b.cancelSubmit) { b.cancelSubmit = false; return e() } if (b.form()) { if (b.pendingRequest) { b.formSubmitted = true; return false } return e() } else { b.focusInvalid(); return false } }) } return b } else a && a.debug && window.console && console.warn("nothing selected, can't validate, returning nothing") }, valid: function () { if (c(this[0]).is("form")) return this.validate().form(); else { var a = true, b = c(this[0].form).validate(); this.each(function () { a &= b.element(this) }); return a } }, removeAttrs: function (a) { var b = {}, d = this; c.each(a.split(/\s/), function (e, f) { b[f] = d.attr(f); d.removeAttr(f) }); return b }, rules: function (a, b) { var d = this[0]; if (a) { var e = c.data(d.form, "validator").settings, f = e.rules, g = c.validator.staticRules(d); switch (a) { case "add": c.extend(g, c.validator.normalizeRule(b)); f[d.name] = g; if (b.messages) e.messages[d.name] = c.extend(e.messages[d.name], b.messages); break; case "remove": if (!b) { delete f[d.name]; return g } var h = {}; c.each(b.split(/\s/), function (j, i) { h[i] = g[i]; delete g[i] }); return h } } d = c.validator.normalizeRules(c.extend({}, c.validator.metadataRules(d), c.validator.classRules(d), c.validator.attributeRules(d), c.validator.staticRules(d)), d); if (d.required) { e = d.required; delete d.required; d = c.extend({ required: e }, d) } return d } }); c.extend(c.expr[":"], { blank: function (a) { return !c.trim("" + a.value) }, filled: function (a) { return !!c.trim("" + a.value) }, unchecked: function (a) { return !a.checked } }); c.validator = function (a, b) { this.settings = c.extend(true, {}, c.validator.defaults, a); this.currentForm = b; this.init() }; c.validator.format = function (a, b) { if (arguments.length == 1) return function () { var d = c.makeArray(arguments); d.unshift(a); return c.validator.format.apply(this, d) }; if (arguments.length > 2 && b.constructor != Array) b = c.makeArray(arguments).slice(1); if (b.constructor != Array) b = [b]; c.each(b, function (d, e) { a = a.replace(RegExp("\\{" + d + "\\}", "g"), e) }); return a }; c.extend(c.validator, { defaults: { messages: {}, groups: {}, rules: {}, errorClass: "error", validClass: "valid", errorElement: "label", focusInvalid: true, errorContainer: c([]), errorLabelContainer: c([]), onsubmit: true, ignore: [], ignoreTitle: false, onfocusin: function (a) { this.lastActive = a; if (this.settings.focusCleanup && !this.blockFocusCleanup) { this.settings.unhighlight && this.settings.unhighlight.call(this, a, this.settings.errorClass, this.settings.validClass); this.addWrapper(this.errorsFor(a)).hide() } }, onfocusout: function (a) { if (!this.checkable(a) && (a.name in this.submitted || !this.optional(a))) this.element(a) }, onkeyup: function (a) { if (a.name in this.submitted || a == this.lastElement) this.element(a) }, onclick: function (a) { if (a.name in this.submitted) this.element(a); else a.parentNode.name in this.submitted && this.element(a.parentNode) }, highlight: function (a, b, d) { a.type === "radio" ? this.findByName(a.name).addClass(b).removeClass(d) : c(a).addClass(b).removeClass(d) }, unhighlight: function (a, b, d) { a.type === "radio" ? this.findByName(a.name).removeClass(b).addClass(d) : c(a).removeClass(b).addClass(d) } }, setDefaults: function (a) { c.extend(c.validator.defaults, a) }, messages: { required: "This field is required.", remote: "Please fix this field.", email: "Please enter a valid email address.", url: "Please enter a valid URL.", date: "Please enter a valid date.", dateISO: "Please enter a valid date (ISO).", number: "Please enter a valid number.", digits: "Please enter only digits.", creditcard: "Please enter a valid credit card number.", equalTo: "Please enter the same value again.", accept: "Please enter a value with a valid extension.", maxlength: c.validator.format("Please enter no more than {0} characters."), minlength: c.validator.format("Please enter at least {0} characters."), rangelength: c.validator.format("Please enter a value between {0} and {1} characters long."), range: c.validator.format("Please enter a value between {0} and {1}."), max: c.validator.format("Please enter a value less than or equal to {0}."), min: c.validator.format("Please enter a value greater than or equal to {0}.") }, autoCreateRanges: false, prototype: { init: function () { function a(e) { var f = c.data(this[0].form, "validator"); e = "on" + e.type.replace(/^validate/, ""); f.settings[e] && f.settings[e].call(f, this[0]) } this.labelContainer = c(this.settings.errorLabelContainer); this.errorContext = this.labelContainer.length && this.labelContainer || c(this.currentForm); this.containers = c(this.settings.errorContainer).add(this.settings.errorLabelContainer); this.submitted = {}; this.valueCache = {}; this.pendingRequest = 0; this.pending = {}; this.invalid = {}; this.reset(); var b = this.groups = {}; c.each(this.settings.groups, function (e, f) { c.each(f.split(/\s/), function (g, h) { b[h] = e }) }); var d = this.settings.rules; c.each(d, function (e, f) { d[e] = c.validator.normalizeRule(f) }); c(this.currentForm).validateDelegate(":text, :password, :file, select, textarea", "focusin focusout keyup", a).validateDelegate(":radio, :checkbox, select, option", "click", a); this.settings.invalidHandler && c(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler) }, form: function () { this.checkForm(); c.extend(this.submitted, this.errorMap); this.invalid = c.extend({}, this.errorMap); this.valid() || c(this.currentForm).triggerHandler("invalid-form", [this]); this.showErrors(); return this.valid() }, checkForm: function () { this.prepareForm(); for (var a = 0, b = this.currentElements = this.elements(); b[a]; a++)this.check(b[a]); return this.valid() }, element: function (a) { this.lastElement = a = this.clean(a); this.prepareElement(a); this.currentElements = c(a); var b = this.check(a); if (b) delete this.invalid[a.name]; else this.invalid[a.name] = true; if (!this.numberOfInvalids()) this.toHide = this.toHide.add(this.containers); this.showErrors(); return b }, showErrors: function (a) { if (a) { c.extend(this.errorMap, a); this.errorList = []; for (var b in a) this.errorList.push({ message: a[b], element: this.findByName(b)[0] }); this.successList = c.grep(this.successList, function (d) { return !(d.name in a) }) } this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors() }, resetForm: function () { c.fn.resetForm && c(this.currentForm).resetForm(); this.submitted = {}; this.prepareForm(); this.hideErrors(); this.elements().removeClass(this.settings.errorClass) }, numberOfInvalids: function () { return this.objectLength(this.invalid) }, objectLength: function (a) { var b = 0, d; for (d in a) b++; return b }, hideErrors: function () { this.addWrapper(this.toHide).hide() }, valid: function () { return this.size() == 0 }, size: function () { return this.errorList.length }, focusInvalid: function () { if (this.settings.focusInvalid) try { c(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin") } catch (a) { } }, findLastActive: function () { var a = this.lastActive; return a && c.grep(this.errorList, function (b) { return b.element.name == a.name }).length == 1 && a }, elements: function () { var a = this, b = {}; return c(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function () { !this.name && a.settings.debug && window.console && console.error("%o has no name assigned", this); if (this.name in b || !a.objectLength(c(this).rules())) return false; return b[this.name] = true }) }, clean: function (a) { return c(a)[0] }, errors: function () { return c(this.settings.errorElement + "." + this.settings.errorClass, this.errorContext) }, reset: function () { this.successList = []; this.errorList = []; this.errorMap = {}; this.toShow = c([]); this.toHide = c([]); this.currentElements = c([]) }, prepareForm: function () { this.reset(); this.toHide = this.errors().add(this.containers) }, prepareElement: function (a) { this.reset(); this.toHide = this.errorsFor(a) }, check: function (a) { a = this.clean(a); if (this.checkable(a)) a = this.findByName(a.name).not(this.settings.ignore)[0]; var b = c(a).rules(), d = false, e; for (e in b) { var f = { method: e, parameters: b[e] }; try { var g = c.validator.methods[e].call(this, a.value.replace(/\r/g, ""), a, f.parameters); if (g == "dependency-mismatch") d = true; else { d = false; if (g == "pending") { this.toHide = this.toHide.not(this.errorsFor(a)); return } if (!g) { this.formatAndAdd(a, f); return false } } } catch (h) { this.settings.debug && window.console && console.log("exception occured when checking element " + a.id + ", check the '" + f.method + "' method", h); throw h; } } if (!d) { this.objectLength(b) && this.successList.push(a); return true } }, customMetaMessage: function (a, b) { if (c.metadata) { var d = this.settings.meta ? c(a).metadata()[this.settings.meta] : c(a).metadata(); return d && d.messages && d.messages[b] } }, customMessage: function (a, b) { var d = this.settings.messages[a]; return d && (d.constructor == String ? d : d[b]) }, findDefined: function () { for (var a = 0; a < arguments.length; a++)if (arguments[a] !== undefined) return arguments[a] }, defaultMessage: function (a, b) { return this.findDefined(this.customMessage(a.name, b), this.customMetaMessage(a, b), !this.settings.ignoreTitle && a.title || undefined, c.validator.messages[b], "<strong>Warning: No message defined for " + a.name + "</strong>") }, formatAndAdd: function (a, b) { var d = this.defaultMessage(a, b.method), e = /\$?\{(\d+)\}/g; if (typeof d == "function") d = d.call(this, b.parameters, a); else if (e.test(d)) d = jQuery.format(d.replace(e, "{$1}"), b.parameters); this.errorList.push({ message: d, element: a }); this.errorMap[a.name] = d; this.submitted[a.name] = d }, addWrapper: function (a) { if (this.settings.wrapper) a = a.add(a.parent(this.settings.wrapper)); return a }, defaultShowErrors: function () { for (var a = 0; this.errorList[a]; a++) { var b = this.errorList[a]; this.settings.highlight && this.settings.highlight.call(this, b.element, this.settings.errorClass, this.settings.validClass); this.showLabel(b.element, b.message) } if (this.errorList.length) this.toShow = this.toShow.add(this.containers); if (this.settings.success) for (a = 0; this.successList[a]; a++)this.showLabel(this.successList[a]); if (this.settings.unhighlight) { a = 0; for (b = this.validElements(); b[a]; a++)this.settings.unhighlight.call(this, b[a], this.settings.errorClass, this.settings.validClass) } this.toHide = this.toHide.not(this.toShow); this.hideErrors(); this.addWrapper(this.toShow).show() }, validElements: function () { return this.currentElements.not(this.invalidElements()) }, invalidElements: function () { return c(this.errorList).map(function () { return this.element }) }, showLabel: function (a, b) { var d = this.errorsFor(a); if (d.length) { d.removeClass().addClass(this.settings.errorClass); d.attr("generated") && d.html(b) } else { d = c("<" + this.settings.errorElement + "/>").attr({ "for": this.idOrName(a), generated: true }).addClass(this.settings.errorClass).html(b || ""); if (this.settings.wrapper) d = d.hide().show().wrap("<" + this.settings.wrapper + "/>").parent(); this.labelContainer.append(d).length || (this.settings.errorPlacement ? this.settings.errorPlacement(d, c(a)) : d.insertAfter(a)) } if (!b && this.settings.success) { d.text(""); typeof this.settings.success == "string" ? d.addClass(this.settings.success) : this.settings.success(d) } this.toShow = this.toShow.add(d) }, errorsFor: function (a) { var b = this.idOrName(a); return this.errors().filter(function () { return c(this).attr("for") == b }) }, idOrName: function (a) { return this.groups[a.name] || (this.checkable(a) ? a.name : a.id || a.name) }, checkable: function (a) { return /radio|checkbox/i.test(a.type) }, findByName: function (a) { var b = this.currentForm; return c(document.getElementsByName(a)).map(function (d, e) { return e.form == b && e.name == a && e || null }) }, getLength: function (a, b) { switch (b.nodeName.toLowerCase()) { case "select": return c("option:selected", b).length; case "input": if (this.checkable(b)) return this.findByName(b.name).filter(":checked").length }return a.length }, depend: function (a, b) { return this.dependTypes[typeof a] ? this.dependTypes[typeof a](a, b) : true }, dependTypes: { "boolean": function (a) { return a }, string: function (a, b) { return !!c(a, b.form).length }, "function": function (a, b) { return a(b) } }, optional: function (a) { return !c.validator.methods.required.call(this, c.trim(a.value), a) && "dependency-mismatch" }, startRequest: function (a) { if (!this.pending[a.name]) { this.pendingRequest++; this.pending[a.name] = true } }, stopRequest: function (a, b) { this.pendingRequest--; if (this.pendingRequest < 0) this.pendingRequest = 0; delete this.pending[a.name]; if (b && this.pendingRequest == 0 && this.formSubmitted && this.form()) { c(this.currentForm).submit(); this.formSubmitted = false } else if (!b && this.pendingRequest == 0 && this.formSubmitted) { c(this.currentForm).triggerHandler("invalid-form", [this]); this.formSubmitted = false } }, previousValue: function (a) { return c.data(a, "previousValue") || c.data(a, "previousValue", { old: null, valid: true, message: this.defaultMessage(a, "remote") }) } }, classRuleSettings: { required: { required: true }, email: { email: true }, url: { url: true }, date: { date: true }, dateISO: { dateISO: true }, dateDE: { dateDE: true }, number: { number: true }, numberDE: { numberDE: true }, digits: { digits: true }, creditcard: { creditcard: true } }, addClassRules: function (a, b) { a.constructor == String ? this.classRuleSettings[a] = b : c.extend(this.classRuleSettings, a) }, classRules: function (a) { var b = {}; (a = c(a).attr("class")) && c.each(a.split(" "), function () { this in c.validator.classRuleSettings && c.extend(b, c.validator.classRuleSettings[this]) }); return b }, attributeRules: function (a) { var b = {}; a = c(a); for (var d in c.validator.methods) { var e = a.attr(d); if (e) b[d] = e } b.maxlength && /-1|2147483647|524288/.test(b.maxlength) && delete b.maxlength; return b }, metadataRules: function (a) { if (!c.metadata) return {}; var b = c.data(a.form, "validator").settings.meta; return b ? c(a).metadata()[b] : c(a).metadata() }, staticRules: function (a) { var b = {}, d = c.data(a.form, "validator"); if (d.settings.rules) b = c.validator.normalizeRule(d.settings.rules[a.name]) || {}; return b }, normalizeRules: function (a, b) { c.each(a, function (d, e) { if (e === false) delete a[d]; else if (e.param || e.depends) { var f = true; switch (typeof e.depends) { case "string": f = !!c(e.depends, b.form).length; break; case "function": f = e.depends.call(b, b) }if (f) a[d] = e.param !== undefined ? e.param : true; else delete a[d] } }); c.each(a, function (d, e) { a[d] = c.isFunction(e) ? e(b) : e }); c.each(["minlength", "maxlength", "min", "max"], function () { if (a[this]) a[this] = Number(a[this]) }); c.each(["rangelength", "range"], function () { if (a[this]) a[this] = [Number(a[this][0]), Number(a[this][1])] }); if (c.validator.autoCreateRanges) { if (a.min && a.max) { a.range = [a.min, a.max]; delete a.min; delete a.max } if (a.minlength && a.maxlength) { a.rangelength = [a.minlength, a.maxlength]; delete a.minlength; delete a.maxlength } } a.messages && delete a.messages; return a }, normalizeRule: function (a) { if (typeof a == "string") { var b = {}; c.each(a.split(/\s/), function () { b[this] = true }); a = b } return a }, addMethod: function (a, b, d) { c.validator.methods[a] = b; c.validator.messages[a] = d != undefined ? d : c.validator.messages[a]; b.length < 3 && c.validator.addClassRules(a, c.validator.normalizeRule(a)) }, methods: { required: function (a, b, d) { if (!this.depend(d, b)) return "dependency-mismatch"; switch (b.nodeName.toLowerCase()) { case "select": return (a = c(b).val()) && a.length > 0; case "input": if (this.checkable(b)) return this.getLength(a, b) > 0; default: return c.trim(a).length > 0 } }, remote: function (a, b, d) { if (this.optional(b)) return "dependency-mismatch"; var e = this.previousValue(b); this.settings.messages[b.name] || (this.settings.messages[b.name] = {}); e.originalMessage = this.settings.messages[b.name].remote; this.settings.messages[b.name].remote = e.message; d = typeof d == "string" && { url: d } || d; if (this.pending[b.name]) return "pending"; if (e.old === a) return e.valid; e.old = a; var f = this; this.startRequest(b); var g = {}; g[b.name] = a; c.ajax(c.extend(true, { url: d, mode: "abort", port: "validate" + b.name, dataType: "json", data: g, success: function (h) { f.settings.messages[b.name].remote = e.originalMessage; var j = h === true; if (j) { var i = f.formSubmitted; f.prepareElement(b); f.formSubmitted = i; f.successList.push(b); f.showErrors() } else { i = {}; h = h || f.defaultMessage(b, "remote"); i[b.name] = e.message = c.isFunction(h) ? h(a) : h; f.showErrors(i) } e.valid = j; f.stopRequest(b, j) } }, d)); return "pending" }, minlength: function (a, b, d) { return this.optional(b) || this.getLength(c.trim(a), b) >= d }, maxlength: function (a, b, d) { return this.optional(b) || this.getLength(c.trim(a), b) <= d }, rangelength: function (a, b, d) { a = this.getLength(c.trim(a), b); return this.optional(b) || a >= d[0] && a <= d[1] }, min: function (a, b, d) { return this.optional(b) || a >= d }, max: function (a, b, d) { return this.optional(b) || a <= d }, range: function (a, b, d) { return this.optional(b) || a >= d[0] && a <= d[1] }, email: function (a, b) { return this.optional(b) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(a) }, url: function (a, b) { return this.optional(b) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a) }, date: function (a, b) { return this.optional(b) || !/Invalid|NaN/.test(new Date(a)) }, dateISO: function (a, b) { return this.optional(b) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(a) }, number: function (a, b) { return this.optional(b) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(a) }, digits: function (a, b) { return this.optional(b) || /^\d+$/.test(a) }, creditcard: function (a, b) { if (this.optional(b)) return "dependency-mismatch"; if (/[^0-9-]+/.test(a)) return false; var d = 0, e = 0, f = false; a = a.replace(/\D/g, ""); for (var g = a.length - 1; g >= 0; g--) { e = a.charAt(g); e = parseInt(e, 10); if (f) if ((e *= 2) > 9) e -= 9; d += e; f = !f } return d % 10 == 0 }, accept: function (a, b, d) { d = typeof d == "string" ? d.replace(/,/g, "|") : "png|jpe?g|gif"; return this.optional(b) || a.match(RegExp(".(" + d + ")$", "i")) }, equalTo: function (a, b, d) { d = c(d).unbind(".validate-equalTo").bind("blur.validate-equalTo", function () { c(b).valid() }); return a == d.val() } } }); c.format = c.validator.format })(jQuery); (function (c) { var a = {}; if (c.ajaxPrefilter) c.ajaxPrefilter(function (d, e, f) { e = d.port; if (d.mode == "abort") { a[e] && a[e].abort(); a[e] = f } }); else { var b = c.ajax; c.ajax = function (d) { var e = ("port" in d ? d : c.ajaxSettings).port; if (("mode" in d ? d : c.ajaxSettings).mode == "abort") { a[e] && a[e].abort(); return a[e] = b.apply(this, arguments) } return b.apply(this, arguments) } } })(jQuery); (function (c) { !jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener && c.each({ focus: "focusin", blur: "focusout" }, function (a, b) { function d(e) { e = c.event.fix(e); e.type = b; return c.event.handle.call(this, e) } c.event.special[b] = { setup: function () { this.addEventListener(a, d, true) }, teardown: function () { this.removeEventListener(a, d, true) }, handler: function (e) { arguments[0] = c.event.fix(e); arguments[0].type = b; return c.event.handle.apply(this, arguments) } } }); c.extend(c.fn, { validateDelegate: function (a, b, d) { return this.bind(b, function (e) { var f = c(e.target); if (f.is(a)) return d.apply(f, arguments) }) } }) })(jQuery); (function ($, document, window) {
    var
        defaults = {
            html: false, photo: false, iframe: false, inline: false, transition: "elastic", speed: 300, fadeOut: 300, width: false, initialWidth: "600", innerWidth: false, maxWidth: false, height: false, initialHeight: "450", innerHeight: false, maxHeight: false, scalePhotos: true, scrolling: true, opacity: 0.9, preloading: true, className: false, overlayClose: true, escKey: true, arrowKey: true, top: false, bottom: false, left: false, right: false, fixed: false, data: undefined, closeButton: true, fastIframe: true, open: false, reposition: true, loop: true, slideshow: false, slideshowAuto: true, slideshowSpeed: 2500, slideshowStart: "start slideshow", slideshowStop: "stop slideshow", photoRegex: /\.(gif|png|jp(e|g|eg)|bmp|ico|webp|jxr|svg)((#|\?).*)?$/i, retinaImage: false, retinaUrl: false, retinaSuffix: '@2x.$1', current: "image {current} of {total}", previous: "previous", next: "next", close: "close", xhrError: "This content failed to load.", imgError: "This image failed to load.", returnFocus: true, trapFocus: true, onOpen: false, onLoad: false, onComplete: false, onCleanup: false, onClosed: false, rel: function () { return this.rel; }, href: function () { return $(this).attr('href'); }, title: function () { return this.title; }, createImg: function () {
                var img = new Image(); var attrs = $(this).data('cbox-img-attrs'); if (typeof attrs === 'object') { $.each(attrs, function (key, val) { img[key] = val; }); }
                return img;
            }, createIframe: function () {
                var iframe = document.createElement('iframe'); var attrs = $(this).data('cbox-iframe-attrs'); if (typeof attrs === 'object') { $.each(attrs, function (key, val) { iframe[key] = val; }); }
                if ('frameBorder' in iframe) { iframe.frameBorder = 0; }
                if ('allowTransparency' in iframe) { iframe.allowTransparency = "true"; }
                iframe.name = (new Date()).getTime(); iframe.allowFullscreen = true; return iframe;
            }
        }, colorbox = 'colorbox', prefix = 'cbox', boxElement = prefix + 'Element', event_open = prefix + '_open', event_load = prefix + '_load', event_complete = prefix + '_complete', event_cleanup = prefix + '_cleanup', event_closed = prefix + '_closed', event_purge = prefix + '_purge', $overlay, $box, $wrap, $content, $topBorder, $leftBorder, $rightBorder, $bottomBorder, $related, $window, $loaded, $loadingBay, $loadingOverlay, $title, $current, $slideshow, $next, $prev, $close, $groupControls, $events = $('<a/>'), settings, interfaceHeight, interfaceWidth, loadedHeight, loadedWidth, index, photo, open, active, closing, loadingTimer, publicMethod, div = "div", requests = 0, previousCSS = {}, init; function $tag(tag, id, css) {
            var element = document.createElement(tag); if (id) { element.id = prefix + id; }
            if (css) { element.style.cssText = css; }
            return $(element);
        }
    function winheight() { return window.innerHeight ? window.innerHeight : $(window).height(); }
    function Settings(element, options) {
        if (options !== Object(options)) { options = {}; }
        this.cache = {}; this.el = element; this.value = function (key) {
            var dataAttr; if (this.cache[key] === undefined) { dataAttr = $(this.el).attr('data-cbox-' + key); if (dataAttr !== undefined) { this.cache[key] = dataAttr; } else if (options[key] !== undefined) { this.cache[key] = options[key]; } else if (defaults[key] !== undefined) { this.cache[key] = defaults[key]; } }
            return this.cache[key];
        }; this.get = function (key) { var value = this.value(key); return $.isFunction(value) ? value.call(this.el, this) : value; };
    }
    function getIndex(increment) {
        var
            max = $related.length, newIndex = (index + increment) % max; return (newIndex < 0) ? max + newIndex : newIndex;
    }
    function setSize(size, dimension) { return Math.round((/%/.test(size) ? ((dimension === 'x' ? $window.width() : winheight()) / 100) : 1) * parseInt(size, 10)); }
    function isImage(settings, url) { return settings.get('photo') || settings.get('photoRegex').test(url); }
    function retinaUrl(settings, url) { return settings.get('retinaUrl') && window.devicePixelRatio > 1 ? url.replace(settings.get('photoRegex'), settings.get('retinaSuffix')) : url; }
    function trapFocus(e) { if ('contains' in $box[0] && !$box[0].contains(e.target) && e.target !== $overlay[0]) { e.stopPropagation(); $box.focus(); } }
    function setClass(str) { if (setClass.str !== str) { $box.add($overlay).removeClass(setClass.str).addClass(str); setClass.str = str; } }
    function getRelated(rel) { index = 0; if (rel && rel !== false && rel !== 'nofollow') { $related = $('.' + boxElement).filter(function () { var options = $.data(this, colorbox); var settings = new Settings(this, options); return (settings.get('rel') === rel); }); index = $related.index(settings.el); if (index === -1) { $related = $related.add(settings.el); index = $related.length - 1; } } else { $related = $(settings.el); } }
    function trigger(event) { $(document).trigger(event); $events.triggerHandler(event); }
    var slideshow = (function () {
        var active, className = prefix + "Slideshow_", click = "click." + prefix, timeOut; function clear() { clearTimeout(timeOut); }
        function set() { if (settings.get('loop') || $related[index + 1]) { clear(); timeOut = setTimeout(publicMethod.next, settings.get('slideshowSpeed')); } }
        function start() { $slideshow.html(settings.get('slideshowStop')).unbind(click).one(click, stop); $events.bind(event_complete, set).bind(event_load, clear); $box.removeClass(className + "off").addClass(className + "on"); }
        function stop() { clear(); $events.unbind(event_complete, set).unbind(event_load, clear); $slideshow.html(settings.get('slideshowStart')).unbind(click).one(click, function () { publicMethod.next(); start(); }); $box.removeClass(className + "on").addClass(className + "off"); }
        function reset() { active = false; $slideshow.hide(); clear(); $events.unbind(event_complete, set).unbind(event_load, clear); $box.removeClass(className + "off " + className + "on"); }
        return function () {
            if (active) { if (!settings.get('slideshow')) { $events.unbind(event_cleanup, reset); reset(); } } else {
                if (settings.get('slideshow') && $related[1]) {
                    active = true; $events.one(event_cleanup, reset); if (settings.get('slideshowAuto')) { start(); } else { stop(); }
                    $slideshow.show();
                }
            }
        };
    }()); function launch(element) {
        var options; if (!closing) {
            options = $(element).data(colorbox); settings = new Settings(element, options); getRelated(settings.get('rel')); if (!open) {
                open = active = true; setClass(settings.get('className')); $box.css({ visibility: 'hidden', display: 'block', opacity: '' }); $loaded = $tag(div, 'LoadedContent', 'width:0; height:0; overflow:hidden; visibility:hidden'); $content.css({ width: '', height: '' }).append($loaded); interfaceHeight = $topBorder.height() + $bottomBorder.height() + $content.outerHeight(true) - $content.height(); interfaceWidth = $leftBorder.width() + $rightBorder.width() + $content.outerWidth(true) - $content.width(); loadedHeight = $loaded.outerHeight(true); loadedWidth = $loaded.outerWidth(true); var initialWidth = setSize(settings.get('initialWidth'), 'x'); var initialHeight = setSize(settings.get('initialHeight'), 'y'); var maxWidth = settings.get('maxWidth'); var maxHeight = settings.get('maxHeight'); settings.w = Math.max((maxWidth !== false ? Math.min(initialWidth, setSize(maxWidth, 'x')) : initialWidth) - loadedWidth - interfaceWidth, 0); settings.h = Math.max((maxHeight !== false ? Math.min(initialHeight, setSize(maxHeight, 'y')) : initialHeight) - loadedHeight - interfaceHeight, 0); $loaded.css({ width: '', height: settings.h }); publicMethod.position(); trigger(event_open); settings.get('onOpen'); $groupControls.add($title).hide(); $box.focus(); if (settings.get('trapFocus')) { if (document.addEventListener) { document.addEventListener('focus', trapFocus, true); $events.one(event_closed, function () { document.removeEventListener('focus', trapFocus, true); }); } }
                if (settings.get('returnFocus')) { $events.one(event_closed, function () { $(settings.el).focus(); }); }
            }
            var opacity = parseFloat(settings.get('opacity')); $overlay.css({ opacity: opacity === opacity ? opacity : '', cursor: settings.get('overlayClose') ? 'pointer' : '', visibility: 'visible' }).show(); if (settings.get('closeButton')) { $close.html(settings.get('close')).appendTo($content); } else { $close.appendTo('<div/>'); }
            load();
        }
    }
    function appendHTML() {
        if (!$box) { init = false; $window = $(window); $box = $tag(div).attr({ id: colorbox, 'class': $.support.opacity === false ? prefix + 'IE' : '', role: 'dialog', tabindex: '-1' }).hide(); $overlay = $tag(div, "Overlay").hide(); $loadingOverlay = $([$tag(div, "LoadingOverlay")[0], $tag(div, "LoadingGraphic")[0]]); $wrap = $tag(div, "Wrapper"); $content = $tag(div, "Content").append($title = $tag(div, "Title"), $current = $tag(div, "Current"), $prev = $('<button type="button"/>').attr({ id: prefix + 'Previous' }), $next = $('<button type="button"/>').attr({ id: prefix + 'Next' }), $slideshow = $('<button type="button"/>').attr({ id: prefix + 'Slideshow' }), $loadingOverlay); $close = $('<button type="button"/>').attr({ id: prefix + 'Close' }); $wrap.append($tag(div).append($tag(div, "TopLeft"), $topBorder = $tag(div, "TopCenter"), $tag(div, "TopRight")), $tag(div, false, 'clear:left').append($leftBorder = $tag(div, "MiddleLeft"), $content, $rightBorder = $tag(div, "MiddleRight")), $tag(div, false, 'clear:left').append($tag(div, "BottomLeft"), $bottomBorder = $tag(div, "BottomCenter"), $tag(div, "BottomRight"))).find('div div').css({ 'float': 'left' }); $loadingBay = $tag(div, false, 'position:absolute; width:9999px; visibility:hidden; display:none; max-width:none;'); $groupControls = $next.add($prev).add($current).add($slideshow); }
        if (document.body && !$box.parent().length) { $(document.body).append($overlay, $box.append($wrap, $loadingBay)); }
    }
    function addBindings() {
        function clickHandler(e) { if (!(e.which > 1 || e.shiftKey || e.altKey || e.metaKey || e.ctrlKey)) { e.preventDefault(); launch(this); } }
        if ($box) {
            if (!init) {
                init = true; $next.click(function () { publicMethod.next(); }); $prev.click(function () { publicMethod.prev(); }); $close.click(function () { publicMethod.close(); }); $overlay.click(function () { if (settings.get('overlayClose')) { publicMethod.close(); } }); $(document).bind('keydown.' + prefix, function (e) {
                    var key = e.keyCode; if (open && settings.get('escKey') && key === 27) { e.preventDefault(); publicMethod.close(); }
                    if (open && settings.get('arrowKey') && $related[1] && !e.altKey) { if (key === 37) { e.preventDefault(); $prev.click(); } else if (key === 39) { e.preventDefault(); $next.click(); } }
                }); if ($.isFunction($.fn.on)) { $(document).on('click.' + prefix, '.' + boxElement, clickHandler); } else { $('.' + boxElement).live('click.' + prefix, clickHandler); }
            }
            return true;
        }
        return false;
    }
    if ($[colorbox]) { return; }
    $(appendHTML); publicMethod = $.fn[colorbox] = $[colorbox] = function (options, callback) {
        var settings; var $obj = this; options = options || {}; if ($.isFunction($obj)) { $obj = $('<a/>'); options.open = true; }
        if (!$obj[0]) { return $obj; }
        appendHTML(); if (addBindings()) {
            if (callback) { options.onComplete = callback; }
            $obj.each(function () { var old = $.data(this, colorbox) || {}; $.data(this, colorbox, $.extend(old, options)); }).addClass(boxElement); settings = new Settings($obj[0], options); if (settings.get('open')) { launch($obj[0]); }
        }
        return $obj;
    }; publicMethod.position = function (speed, loadedCallback) {
        var
            css, top = 0, left = 0, offset = $box.offset(), scrollTop, scrollLeft; $window.unbind('resize.' + prefix); $box.css({ top: -9e4, left: -9e4 }); scrollTop = $window.scrollTop(); scrollLeft = $window.scrollLeft(); if (settings.get('fixed')) { offset.top -= scrollTop; offset.left -= scrollLeft; $box.css({ position: 'fixed' }); } else { top = scrollTop; left = scrollLeft; $box.css({ position: 'absolute' }); }
        if (settings.get('right') !== false) { left += Math.max($window.width() - settings.w - loadedWidth - interfaceWidth - setSize(settings.get('right'), 'x'), 0); } else if (settings.get('left') !== false) { left += setSize(settings.get('left'), 'x'); } else { left += Math.round(Math.max($window.width() - settings.w - loadedWidth - interfaceWidth, 0) / 2); }
        if (settings.get('bottom') !== false) { top += Math.max(winheight() - settings.h - loadedHeight - interfaceHeight - setSize(settings.get('bottom'), 'y'), 0); } else if (settings.get('top') !== false) { top += setSize(settings.get('top'), 'y'); } else { top += Math.round(Math.max(winheight() - settings.h - loadedHeight - interfaceHeight, 0) / 2); }
        $box.css({ top: offset.top, left: offset.left, visibility: 'visible' }); $wrap[0].style.width = $wrap[0].style.height = "9999px"; function modalDimensions() { $topBorder[0].style.width = $bottomBorder[0].style.width = $content[0].style.width = (parseInt($box[0].style.width, 10) - interfaceWidth) + 'px'; $content[0].style.height = $leftBorder[0].style.height = $rightBorder[0].style.height = (parseInt($box[0].style.height, 10) - interfaceHeight) + 'px'; }
        css = { width: settings.w + loadedWidth + interfaceWidth, height: settings.h + loadedHeight + interfaceHeight, top: top, left: left }; if (speed) { var tempSpeed = 0; $.each(css, function (i) { if (css[i] !== previousCSS[i]) { tempSpeed = speed; return; } }); speed = tempSpeed; }
        previousCSS = css; if (!speed) { $box.css(css); }
        $box.dequeue().animate(css, {
            duration: speed || 0, complete: function () {
                modalDimensions(); active = false; $wrap[0].style.width = (settings.w + loadedWidth + interfaceWidth) + "px"; $wrap[0].style.height = (settings.h + loadedHeight + interfaceHeight) + "px"; if (settings.get('reposition')) { setTimeout(function () { $window.bind('resize.' + prefix, publicMethod.position); }, 1); }
                if ($.isFunction(loadedCallback)) { loadedCallback(); }
            }, step: modalDimensions
        });
    }; publicMethod.resize = function (options) {
        var scrolltop; if (open) {
            options = options || {}; if (options.width) { settings.w = setSize(options.width, 'x') - loadedWidth - interfaceWidth; }
            if (options.innerWidth) { settings.w = setSize(options.innerWidth, 'x'); }
            $loaded.css({ width: settings.w }); if (options.height) { settings.h = setSize(options.height, 'y') - loadedHeight - interfaceHeight; }
            if (options.innerHeight) { settings.h = setSize(options.innerHeight, 'y'); }
            if (!options.innerHeight && !options.height) { scrolltop = $loaded.scrollTop(); $loaded.css({ height: "auto" }); settings.h = $loaded.height(); }
            $loaded.css({ height: settings.h }); if (scrolltop) { $loaded.scrollTop(scrolltop); }
            publicMethod.position(settings.get('transition') === "none" ? 0 : settings.get('speed'));
        }
    }; publicMethod.prep = function (object) {
        if (!open) { return; }
        var callback, speed = settings.get('transition') === "none" ? 0 : settings.get('speed'); $loaded.remove(); $loaded = $tag(div, 'LoadedContent').append(object); function getWidth() { settings.w = settings.w || $loaded.width(); settings.w = settings.mw && settings.mw < settings.w ? settings.mw : settings.w; return settings.w; }
        function getHeight() { settings.h = settings.h || $loaded.height(); settings.h = settings.mh && settings.mh < settings.h ? settings.mh : settings.h; return settings.h; }
        $loaded.hide().appendTo($loadingBay.show()).css({ width: getWidth(), overflow: settings.get('scrolling') ? 'auto' : 'hidden' }).css({ height: getHeight() }).prependTo($content); $loadingBay.hide(); $(photo).css({ 'float': 'none' }); setClass(settings.get('className')); callback = function () {
            var total = $related.length, iframe, complete; if (!open) { return; }
            function removeFilter() { if ($.support.opacity === false) { $box[0].style.removeAttribute('filter'); } }
            complete = function () { clearTimeout(loadingTimer); $loadingOverlay.hide(); trigger(event_complete); settings.get('onComplete'); }; $title.html(settings.get('title')).show(); $loaded.show(); if (total > 1) {
                if (typeof settings.get('current') === "string") { $current.html(settings.get('current').replace('{current}', index + 1).replace('{total}', total)).show(); }
                $next[(settings.get('loop') || index < total - 1) ? "show" : "hide"]().html(settings.get('next')); $prev[(settings.get('loop') || index) ? "show" : "hide"]().html(settings.get('previous')); slideshow(); if (settings.get('preloading')) { $.each([getIndex(-1), getIndex(1)], function () { var img, i = $related[this], settings = new Settings(i, $.data(i, colorbox)), src = settings.get('href'); if (src && isImage(settings, src)) { src = retinaUrl(settings, src); img = document.createElement('img'); img.src = src; } }); }
            } else { $groupControls.hide(); }
            if (settings.get('iframe')) {
                iframe = settings.get('createIframe'); if (!settings.get('scrolling')) { iframe.scrolling = "no"; }
                $(iframe).attr({ src: settings.get('href'), 'class': prefix + 'Iframe' }).one('load', complete).appendTo($loaded); $events.one(event_purge, function () { iframe.src = "//about:blank"; }); if (settings.get('fastIframe')) { $(iframe).trigger('load'); }
            } else { complete(); }
            if (settings.get('transition') === 'fade') { $box.fadeTo(speed, 1, removeFilter); } else { removeFilter(); }
        }; if (settings.get('transition') === 'fade') { $box.fadeTo(speed, 0, function () { publicMethod.position(0, callback); }); } else { publicMethod.position(speed, callback); }
    }; function load() {
        var href, setResize, prep = publicMethod.prep, $inline, request = ++requests; active = true; photo = false; trigger(event_purge); trigger(event_load); settings.get('onLoad'); settings.h = settings.get('height') ? setSize(settings.get('height'), 'y') - loadedHeight - interfaceHeight : settings.get('innerHeight') && setSize(settings.get('innerHeight'), 'y'); settings.w = settings.get('width') ? setSize(settings.get('width'), 'x') - loadedWidth - interfaceWidth : settings.get('innerWidth') && setSize(settings.get('innerWidth'), 'x'); settings.mw = settings.w; settings.mh = settings.h; if (settings.get('maxWidth')) { settings.mw = setSize(settings.get('maxWidth'), 'x') - loadedWidth - interfaceWidth; settings.mw = settings.w && settings.w < settings.mw ? settings.w : settings.mw; }
        if (settings.get('maxHeight')) { settings.mh = setSize(settings.get('maxHeight'), 'y') - loadedHeight - interfaceHeight; settings.mh = settings.h && settings.h < settings.mh ? settings.h : settings.mh; }
        href = settings.get('href'); loadingTimer = setTimeout(function () { $loadingOverlay.show(); }, 100); if (settings.get('inline')) { var $target = $(href).eq(0); $inline = $('<div>').hide().insertBefore($target); $events.one(event_purge, function () { $inline.replaceWith($target); }); prep($target); } else if (settings.get('iframe')) { prep(" "); } else if (settings.get('html')) { prep(settings.get('html')); } else if (isImage(settings, href)) {
            href = retinaUrl(settings, href); photo = settings.get('createImg'); $(photo).addClass(prefix + 'Photo').bind('error.' + prefix, function () { prep($tag(div, 'Error').html(settings.get('imgError'))); }).one('load', function () {
                if (request !== requests) { return; }
                setTimeout(function () {
                    var percent; if (settings.get('retinaImage') && window.devicePixelRatio > 1) { photo.height = photo.height / window.devicePixelRatio; photo.width = photo.width / window.devicePixelRatio; }
                    if (settings.get('scalePhotos')) {
                        setResize = function () { photo.height -= photo.height * percent; photo.width -= photo.width * percent; }; if (settings.mw && photo.width > settings.mw) { percent = (photo.width - settings.mw) / photo.width; setResize(); }
                        if (settings.mh && photo.height > settings.mh) { percent = (photo.height - settings.mh) / photo.height; setResize(); }
                    }
                    if (settings.h) { photo.style.marginTop = Math.max(settings.mh - photo.height, 0) / 2 + 'px'; }
                    if ($related[1] && (settings.get('loop') || $related[index + 1])) { photo.style.cursor = 'pointer'; $(photo).bind('click.' + prefix, function () { publicMethod.next(); }); }
                    photo.style.width = photo.width + 'px'; photo.style.height = photo.height + 'px'; prep(photo);
                }, 1);
            }); photo.src = href;
        } else if (href) { $loadingBay.load(href, settings.get('data'), function (data, status) { if (request === requests) { prep(status === 'error' ? $tag(div, 'Error').html(settings.get('xhrError')) : $(this).contents()); } }); }
    }
    publicMethod.next = function () { if (!active && $related[1] && (settings.get('loop') || $related[index + 1])) { index = getIndex(1); launch($related[index]); } }; publicMethod.prev = function () { if (!active && $related[1] && (settings.get('loop') || index)) { index = getIndex(-1); launch($related[index]); } }; publicMethod.close = function () { if (open && !closing) { closing = true; open = false; trigger(event_cleanup); settings.get('onCleanup'); $window.unbind('.' + prefix); $overlay.fadeTo(settings.get('fadeOut') || 0, 0); $box.stop().fadeTo(settings.get('fadeOut') || 0, 0, function () { $box.hide(); $overlay.hide(); trigger(event_purge); $loaded.remove(); setTimeout(function () { closing = false; trigger(event_closed); settings.get('onClosed'); }, 1); }); } }; publicMethod.remove = function () {
        if (!$box) { return; }
        $box.stop(); $[colorbox].close(); $box.stop(false, true).remove(); $overlay.remove(); closing = false; $box = null; $('.' + boxElement).removeData(colorbox).removeClass(boxElement); $(document).unbind('click.' + prefix).unbind('keydown.' + prefix);
    }; publicMethod.element = function () { return $(settings.el); }; publicMethod.settings = defaults;
}(jQuery, document, window)); jQuery.fn.extend({
    allowOnlyNumbers: function () {
        var previousCvnVal = ""; $(this).on('keypress', function (event) {
            previousCvnVal = $(this).val(); var currentInputLength = previousCvnVal.length; var isNotNumber = event.charCode < 48 || event.charCode > 57; var maxLength = $(this).attr('maxLength'); if (event.charCode != 0 && (isNotNumber || currentInputLength == maxLength) && !event.ctrlKey && !event.metaKey) { event.preventDefault(); }
        }); $(this).on('keyup', function (event) { if (this.validity.badInput) { $(this).val(previousCvnVal); } });
    }
}); jQuery.fn.extend({
    moveFocusInFourFields: function () {
        var parent = this; var cardNumber = { "cardNumberPart1": "", "cardNumberPart2": "", "cardNumberPart3": "", "cardNumberPart4": "" }; var cardPartChanged = ""; var ua = navigator.userAgent.toLowerCase(); var check = function (r) { return r.test(ua); }; var isOpera = check(/opera/); var isIE = !isOpera && check(/msie/); var isEdge = !isIE && !!window.StyleMedia; var is_iPad = navigator.userAgent.match(/iPad/i) != null; var is_iPhone = navigator.userAgent.match(/iPhone/i) != null; var is_iPad_iPhone_ie_edge = is_iPad || is_iPhone || isIE || isEdge; parent.find(".cardNumberPart").on('keypress', function (event) {
            var isNotNumber = event.charCode < 48 || event.charCode > 57; var currentInputLength = $(this).val().length; var currentTabIndex = parseInt($(this).attr('tabIndex'), 0); var nextInput = parent.find(".cardNumberPart" + (currentTabIndex + 1)); var maxLength = $(this).attr('maxLength'); var nextInputLength = maxLength; if (nextInput.length > 0) { nextInputLength = nextInput.val().length; }
            if (event.charCode != 0 && (isNotNumber || (nextInputLength > 0 && currentInputLength == maxLength)) && !event.ctrlKey && !event.metaKey) { event.preventDefault(); return; }
            if (currentInputLength == maxLength - 1 && event.charCode != 0 && !is_iPad_iPhone_ie_edge) { parent.find(".cardNumberPart" + (currentTabIndex + 1)).focus(); }
        }); parent.find(".cardNumberPart").on('keyup', function (event) {
            var isNumber = event.keyCode >= 48 && event.keyCode <= 57; var currentElement = parent.find("." + cardPartChanged); var currentInputLength = 0; if (currentElement.val()) { currentInputLength = currentElement.val().length; }
            var currentTabIndex = parseInt(currentElement.attr('tabIndex'), 0); var maxLength = $(this).attr('maxLength'); if (currentElement[0].validity.badInput || currentInputLength > maxLength) { parent.find("." + cardPartChanged).val(cardNumber["'" + cardPartChanged + "'"]); parent.find("." + cardPartChanged).focus(); }
            if (currentInputLength == maxLength && currentTabIndex < 4) { parent.find(".cardNumberPart" + (currentTabIndex + 1)).focus(); }
            else if (currentInputLength == maxLength && currentTabIndex == 4 && typeof window.orientation !== 'undefined') { parent.find(".cardNumberPart" + currentTabIndex).blur(); }
        }); parent.find(".cardNumberPart").on('keydown', function (event) {
            var isNumber = event.keyCode >= 48 && event.keyCode <= 57; var prevValue = $(this).val(); cardPartChanged = $(this).attr("data-id"); cardNumber["'" + cardPartChanged + "'"] = prevValue; var currentInputLength = prevValue.length; var currentTabIndex = parseInt($(this).attr('tabIndex'), 0); var nextInput = parent.find(".cardNumberPart" + (currentTabIndex + 1)); var maxLength = $(this).attr('maxLength'); var version = $(this).attr('data-version'); if ($(this).data('browser') == 'Safari' && compareVersion(version, 13.0) >= 0 && !is_iPhone) { if ($(this).data("id") !== 'cardNumberPart4') { $(this).attr('maxLength', 5); } }
            else if ($(this).data('browser') == 'Safari' && compareVersion(version, 13.0) >= 0) { if ($(this).data("id") !== 'cardNumberPart4') { $(this).attr('maxLength', 4); } }
            var nextInputLength = maxLength; if (nextInput.length > 0) { nextInputLength = nextInput.val().length; }
            if (currentInputLength == maxLength && nextInputLength == 0 && isNumber) { parent.find(".cardNumberPart" + (currentTabIndex + 1)).focus(); }
            if (currentInputLength == 0 && event.keyCode == 8) { parent.find(".cardNumberPart" + (currentTabIndex - 1)).focus(); }
        }); function compareVersion(Ver1, Ver2) {
            v1 = "" + Ver1; v2 = "" + Ver2; v1 = v1.split('.'); v2 = v2.split('.'); const k = Math.min(v1.length, v2.length); var i = 0; for (; i < k; ++i) { v1[i] = parseInt(v1[i], 10); v2[i] = parseInt(v2[i], 10); if (v1[i] > v2[i]) return 1; if (v1[i] < v2[i]) return -1; }
            return v1.length == v2.length ? 0 : (v1.length < v2.length ? -1 : 1);
        }
    }
}); ACC.colorbox = { _autoload: ["initColorBox"], cboxOptions: { width: "100%", height: "100%", maxWidth: "600px", maxHeight: "1024px", scrolling: false, transition: "none" }, config: { transition: "none", opacity: 0.7, close: "<span class=\"glyphicon glyphicon-remove\"></span>", title: "<div class=\"headline\"><span class=\"headline-text\">{title}</span></div>", onComplete: function () { "use strict"; ACC.common.refreshScreenReaderBuffer(); }, onClosed: function () { "use strict"; ACC.common.refreshScreenReaderBuffer(); } }, initColorBox: function () { "use strict"; $(".cbox-link").colorbox(this.cboxOptions); $(window).on("orientationchange", function (event) { $.colorbox.close(); }); var that = this; $(window).resize(function () { if (!$("#colorbox").hasClass("variantSelectMobile")) { $.colorbox.resize({ width: window.innerWidth > parseInt(that.cboxOptions.maxWidth, 10) ? that.cboxOptions.maxWidth : that.cboxOptions.width, height: window.innerHeight > parseInt(that.cboxOptions.maxHeight, 10) ? that.cboxOptions.maxHeight : that.cboxOptions.height }); } }); }, open: function (title, config) { "use strict"; config = $.extend({}, ACC.colorbox.config, config); config.title = config.title.replace(/{title}/g, title); return $.colorbox(config); }, resize: function () { "use strict"; $.colorbox.resize(); }, close: function () { "use strict"; $.colorbox.close(); } }; ACC.product = {
    _autoload: ["bindToAddToCartForm", "enableStorePickupButton", "enableVariantSelectors", "bindFacets", "bindMoreInfoOnCCButton", "toggleBreadcrumb", "clickDeliveryChannelRadio", "bindSEOTextSection", "initXBoxPopin"], bindSEOTextSection: function () { "use strict"; var section = document.querySelector(".bottom-seo-text-section"); if (section) { section.addEventListener("click", function (e) { if (e.target.className && e.target.className.indexOf("-seo-section") > -1) { if (section.classList.contains("open")) { section.classList.remove("open"); } else { section.classList.add("open"); } } }); } }, bindFacets: function () { "use strict"; $(document).on("click", ".js-show-facets", function (e) { e.preventDefault(); var selectRefinementsTitle = $(this).data("selectRefinementsTitle"); var closeIcon = $(this).data("closeIcon"); ACC.colorbox.open(selectRefinementsTitle, { href: "#js-facetSection", inline: true, width: "100%", height: "100%", fixed: true, top: "0px", className: "variantSelectMobile custom-filter-popup", closeButton: true, close: closeIcon, onComplete: function () { $(document).on("click", ".js-product-facet .js-facet-name", function (e) { e.preventDefault(); $(".js-product-facet  .js-facet").removeClass("active"); $(this).parents(".js-facet").addClass("active"); }); }, onOpen: function () { $("body").css({ overflow: "hidden" }); }, onClosed: function () { $(document).off("click", ".js-product-facet .js-facet-name"); $("body").css({ overflow: "" }); } }); }); enquire.register("screen and (min-width:" + screenSmMax + ")", function () { $("#cboxClose").click(); }); }, enableAddToCartButton: function () { "use strict"; $(".js-enable-btn").each(function () { if (!($(this).hasClass("outOfStock") || $(this).hasClass("out-of-stock"))) { $(this).removeAttr("disabled"); } }); }, enableVariantSelectors: function () { "use strict"; $(".variant-select").removeAttr("disabled"); }, bindToAddToCartForm: function () { "use strict"; var addToCartForm = $(".add_to_cart_form"); addToCartForm.ajaxForm({ success: ACC.product.displayAddToCartPopup, error: ACC.product.displayErrorHandle }); }, displayErrorHandle: function (cartResult, statusText, xhr, formElement) { var url = window.location.href; var urlParams = new URLSearchParams(window.location.search); if (urlParams.has("csrfError")) { window.location.reload(); } else { window.location = url + "?csrfError=true"; } }, bindToAddToCartStorePickUpForm: function () { "use strict"; return; }, enableStorePickupButton: function () { "use strict"; $(".js-pickup-in-store-button").removeAttr("disabled"); }, clickDeliveryChannelRadio: function () {
        "use strict"; if ($("input[id=\"js-homeDeliveryRadio\"]").is(":checked")) { var stockStatus = stockStatus = $("#js-homeDeliveryRadio").parents(".js-changeDeliveryChannel").find("span[name=js-stockStatusCode]").html(); var isNiLocation = $("#js-homeDeliveryRadio").parents(".js-changeDeliveryChannel").find("span[name=js-isNiLocation]").html(); var isOutOfStock = stockStatus === OUT_OF_STOCK; var isPreOrder = stockStatus === PRE_ORDER; deliveryMessages(isOutOfStock, isPreOrder, "homeDelivery", isNiLocation); }
        if ($("input[id=\"ccradiobutton\"]").is(":checked")) { $('#xaa-popin-info-add-to-cart').find('#addToCartButton').hide(); var stockStatus = stockStatus = $("#ccradiobutton").parents(".js-changeDeliveryChannel").find("span[name=js-stockStatusCode]").html(); var isNiLocation = $("#ccradiobutton").parents(".js-changeDeliveryChannel").find("span[name=js-isNiLocation]").html(); var isOutOfStock = stockStatus === OUT_OF_STOCK; var isPreOrder = stockStatus === PRE_ORDER; deliveryMessages(isOutOfStock, isPreOrder, "clickAndCollect", isNiLocation); }
    }, displayAddToCartPopup: function (cartResult, statusText, xhr, formElement) {
        "use strict"; console.log("Return Url from pop up: " + cartResult.returnUrl); if (cartResult.returnUrl != null && cartResult.returnUrl != "") { window.location.href = cartResult.returnUrl; return; }
        $("#addToCartLayer").remove(); if (typeof ACC.minicart.updateMiniCartDisplay == "function") { ACC.minicart.updateMiniCartDisplay(); }
        var titleHeader = $(cartResult.addToCartLayer).find(".cart_popup_error_msg").html(); var className = $(cartResult.addToCartLayer).find(".cart_popup_error_msg .fa").data("bgcolor"); var maxHeight = "500PX"; var top = "30px"; if ($(window).width() < 639) { maxHeight = "100%"; top = "0px"; }
        ACC.colorbox.open(titleHeader, { html: cartResult.addToCartLayer, scrolling: false, width: "100%", height: "100%", maxWidth: "500PX", maxHeight: maxHeight, fixed: true, top: top, className: "variantSelectMobile addToCart-popup " + className, onOpen: function () { $("body").css({ overflow: "hidden" }); }, onComplete: function () { if ($(window).width() > 639) { $(this).colorbox.resize(); } }, onClosed: function () { $("body").css({ overflow: "" }); } }); var showEvent = { detail: { url: 'showCart' } }; document.getElementById('showCartPopup').addEventListener('click', function () {
            if (!(self == top)) { window.parent.postMessage(showEvent, "*"); }
            console.log("message from show cart button");
        }); var continueEvent = { detail: { url: 'continueShop' } }; document.getElementById('cartPopupContinue').addEventListener('click', function () {
            if (!(self == top)) { window.parent.postMessage(continueEvent, "*"); }
            console.log("message from continue cart button");
        }); var productCode = $("[name=productCodePost]", formElement).val(); var quantityField = $("[name=qty]", formElement).val(); var brand = $("[name=brand]", formElement).val(); var category = $("[name=category]", formElement).val(); var currency = $("[name=currency]", formElement).val(); var quantity = 1; if (quantityField != undefined) { quantity = quantityField; }
        var cartAnalyticsData = cartResult.cartAnalyticsData; var cartData = { "cartCode": cartAnalyticsData.cartCode, "productCode": productCode, "quantity": quantity, "productPrice": cartAnalyticsData.productPostPrice, "productName": cartAnalyticsData.productName, "productBrand": brand, "productCategory": category, "productCurrency": currency }; ACC.track.trackAddToCart(productCode, quantity, cartData);
    }, hideAddToCartSelectThisStoreButton: function () { "use strict"; $("#addToCartButton").hide(); ACC.product.hideSelectThisStoreButton(); }, hideSelectThisStoreButton: function () { "use strict"; $("#selectThisStore").hide(); }, bindMoreInfoOnCCButton: function () {
        "use strict"; $(document).on("click", "#ccInfoModal", function () {
            var data = $("#ccInfoModalContent").html(); var maxHeight = "450PX"; var top = "30px"; if ($(window).width() < 639) { maxHeight = "100%"; top = "0"; minHeight = "100%"; }
            $.colorbox({ title: "How does Click & Collect work?", html: data, close: "x", scrolling: true, opacity: 0.7, width: "100%", height: "100%", maxWidth: "900PX", maxHeight: maxHeight, top: top, fixed: true, open: true, transition: "none", onComplete: function () { } });
        });
    }, toggleBreadcrumb: function () { "use strict"; $(document).on("click", ".js-toggle-breadcrumb", function () { var pageType = $(this).attr("data-isProductPage"); $(".breadcrumb > li").each(function (i) { if (i < $(".breadcrumb > li").length - 2) { if (pageType == "true") { if (i > 0) { $(this).toggle("linear"); } } else { $(this).toggle("linear"); } } }); if ($("#breadcrumbbutton i").hasClass("glyphicon-plus")) { $("#breadcrumbbutton i").removeClass("glyphicon-plus").addClass("glyphicon-minus"); } else { $("#breadcrumbbutton i").removeClass("glyphicon-minus").addClass("glyphicon-plus"); } }); }, initXBoxPopin: function () { $(document).on("click", '#xaa-close-popin-button,#xaa-close-popin', function () { ACC.product.closeXboxPopin(); }); }, openXboxPopin1: function () {
        var popIn = $('<aside id="xaa-popin"></aside>'); var popInInfo = $('<div id="xaa-popin-info"></div>')
        var popInContainer = $('<section id="xaa-popin-info-container">'); var popInClose = $('<div id="xaa-close-popin"></div>'); var popInCloseButton = $('<div id="xaa-close-popin-button"></div>'); popInInfo.append(popInContainer); popIn.append(popInInfo, popInClose, popInCloseButton); var header = $('<header><h1>Xbox All Access</h1><p><a href="#">Learn more</a></p><p><a href="#">FAQ\'s</a></p>'); header.appendTo(popInContainer); var selectedProduct = $('<div class="selected-product"></div>'); var selectedProductPicture = $('<picture><img src="https://image.smythstoys.com/original/desktop/174248.jpg" alt="XBox One S 1TB Fornite Bundle"/></picture>'); var selectedProductInfo = $('<div class="selected-product-info"><h3>XBox One S 1TB Fornite Bundle</h3><span class="price">£17.99/month</span><span class="price-per-month">£476.76 over 24 months*</span></div>'); selectedProduct.append(selectedProductPicture, selectedProductInfo); selectedProduct.appendTo(popInContainer); var howItWorks = $('<section class="xaa-how-it-works"><h2>How it works</h2><ol class="xaa-list"><li class="choose-console"><span class="highlight">Choose your console - </span><span>Select an Xbox One console bundle.</span></li><li class="enroll"><span class="highlight">Enroll with ease - </span><span>Qualify and enjoy low monthly payments with nothing due today.</span></li><li class="start-right-away"><span class="highlight">Start right away - </span><span>Your Xbox Game Pass subsription will be waiting for you on your new console.</span></li></ol><p class="more-info"><a href="#">Need more info?</a></p></section>'); var whatsIncluded = $('<section class="xaa-whats-included"><h2>What\'s included</h2><ul class="xaa-list"><li>Xbox One console bundle</li><li>24 months of Xbox Games Pass Ultimate, with access to over 100 high-quality games and online multiplayer with Xbox Live Gold.</li><li>Option to upgrade to the next Xbox console after 18 months^.</li></ul></section>'); var terms = $('<section class="terms"><h2>Terms & Conditions</h2><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin varius varius pharetra. Maecenas a nisi odio. Vivamus vel accumsan tellus. Aenean tempus ut turpis sit amet iaculis. Ut imperdiet hendrerit sem at consequat. Sed placerat urna id tortor tempor congue. Etiam tincidunt augue non lacinia porta. Sed sed euismod arcu.</p><p>Donec vehicula lectus sit amet dolor euismod imperdiet eget tempus ligula. Fusce dapibus libero lorem, mollis mollis purus vestibulum in. Donec congue pretium eros, ac viverra purus finibus sit amet. Ut laoreet arcu eget vehicula vehicula. Vestibulum in est pellentesque, elementum dolor fermentum, interdum leo. In ut turpis nunc. Aliquam erat volutpat. Vivamus sed elit id mauris molestie imperdiet. Mauris sit amet tempor erat. Pellentesque finibus libero tortor, feugiat laoreet dolor condimentum id.</p></section>'); popInContainer.append(howItWorks, whatsIncluded, terms); var footer = $('<section id="xaa-popin-info-add-to-cart">Add to cart component</section>'); footer.appendTo(popInInfo); $(document.body).append(popIn);
    }, closeXboxPopin: function () { $("#xaa-popin").addClass('xaa-popin-hidden'); },
}; ACC.product.bindToAddToCartForm(); ACC.product.enableAddToCartButton(); function onYouTubePlayerAPIReady() { "use strict"; $(".js-youtube-video").each(function () { var video = this; var player = new YT.Player(video, { events: { "onReady": onPlayerReady } }); }); }
function onPlayerReady(event) { var target = event.target; var playButton = $(target.a).siblings(".js-play-button"); playButton.click(function () { if (playButton.hasClass("playvideo")) { target.playVideo(); playButton.removeClass("playvideo").addClass("pausevideo"); } else { target.pauseVideo(); playButton.removeClass("pausevideo").addClass("playvideo"); } }); }
window.readCookie = function (name) {
    var nameEQ = name + "="; var ca = document.cookie.split(';'); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == ' ') c = c.substring(1, c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length); }
    return null;
}; var siteId = window.readCookie("uid"); var isCookieConsentEnabled = document.getElementsByClassName("roleUser")[0].getAttribute("data-cookie-enable"); var youtubeEnabled = localStorage.getItem(siteId + "-youtubeEnabled"); if (youtubeEnabled == "true" || (!isCookieConsentEnabled || isCookieConsentEnabled == "false")) { var tag = document.createElement("script"); tag.src = "//www.youtube.com/player_api"; var firstScriptTag = document.getElementsByTagName("script")[0]; firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); }
function playVid(src) { var videoComp = $(src).siblings(".video-element")[0]; if ($(src).hasClass("playvideosource")) { videoComp.play(); $(src).removeClass("playvideosource").addClass("pausevideosource"); } else { videoComp.pause(); $(src).removeClass("pausevideosource").addClass("playvideosource"); } }
function deliveryMessages(isOutOfStock, isPreOrder, divId, isNiLocation) {
    "use strict"; if (isOutOfStock) { $("span[data-stock='INSTOCK']").hide(); $("span[data-stock='PREORDER']").hide(); if (divId === "clickAndCollect") { $("span[data-stock='INSTOCK'][data-channel='HOME_DELIVERY']").show(); if (isNiLocation) { $("span[data-stock='OUTOFSTOCK'][data-location='NI'][data-channel='CLICK_AND_COLLECT']").show(); $("span[data-stock='OUTOFSTOCK'][data-location=''][data-channel='CLICK_AND_COLLECT']").hide(); $("span[data-stock='OUTOFSTOCK'][data-location=''][data-channel='HOME_DELIVERY']").hide(); } else { $("span[data-stock='OUTOFSTOCK'][data-location=''][data-channel='CLICK_AND_COLLECT']").show(); $("span[data-stock='OUTOFSTOCK'][data-location='NI'][data-channel='CLICK_AND_COLLECT']").hide(); $("span[data-stock='OUTOFSTOCK'][data-location=''][data-channel='HOME_DELIVERY']").hide(); } } else { $("span[data-stock='INSTOCK'][data-channel='CLICK_AND_COLLECT']").show(); $("span[data-stock='OUTOFSTOCK'][data-location=''][data-channel='HOME_DELIVERY']").show(); $("span[data-stock='OUTOFSTOCK'][data-location='NI'][data-channel='HOME_DELIVERY']").hide(); $("span[data-stock='OUTOFSTOCK'][data-location=''][data-channel='CLICK_AND_COLLECT']").hide(); $("span[data-stock='OUTOFSTOCK'][data-location='NI'][data-channel='CLICK_AND_COLLECT']").hide(); } } else { $("span[data-stock='INSTOCK']").show(); $("span[data-stock='OUTOFSTOCK']").hide(); $("span[data-stock='PREORDER']").hide(); }
    if (isPreOrder) { $("span[data-stock='OUTOFSTOCK']").hide(); $("span[data-stock='INSTOCK']").hide(); if (divId === "clickAndCollect") { if (isNiLocation) { $("span[data-stock='PREORDER'][data-location='NI'][data-channel='CLICK_AND_COLLECT']").show(); $("span[data-stock='PREORDER'][data-location=''][data-channel='CLICK_AND_COLLECT']").hide(); $("span[data-stock='PREORDER'][data-location=''][data-channel='HOME_DELIVERY']").hide(); } else { $("span[data-stock='PREORDER'][data-location='NI'][data-channel='CLICK_AND_COLLECT']").hide(); $("span[data-stock='PREORDER'][data-location=''][data-channel='CLICK_AND_COLLECT']").show(); $("span[data-stock='PREORDER'][data-location=''][data-channel='HOME_DELIVERY']").hide(); } } else { $("span[data-stock='PREORDER'][data-location=''][data-channel='CLICK_AND_COLLECT']").hide(); $("span[data-stock='PREORDER'][data-location=''][data-channel='HOME_DELIVERY']").show(); $("span[data-stock='PREORDER'][data-location='NI'][data-channel='HOME_DELIVERY']").hide(); } }
}; ACC.address = { _autoload: ["bindToChangeAddressButton", "bindCreateUpdateAddressForm", "bindSuggestedDeliveryAddresses", "bindCountrySpecificAddressForms", "showAddressFormButtonPanel", "bindViewAddressBook", "bindToColorboxClose", "showRemoveAddressFromBookConfirmation", "backToListAddresses", "bindCloseAccountPopup", "bindCloseAccountReqPopUp", "bindImmediateCloseAccountPopUp", "bindCloseAccountInfoPopUp", "bindCancelClosurePopUp"], spinner: $("<img src='" + ACC.config.commonResourcePath + "/images/spinner.gif' />"), addressID: "", isScheduled: false, handleChangeAddressButtonClick: function () { "use strict"; ACC.address.addressID = ($(this).data("address")) ? $(this).data("address") : ""; $("#summaryDeliveryAddressFormContainer").show(); $("#summaryOverlayViewAddressBook").show(); $("#summaryDeliveryAddressBook").hide(); $.getJSON(getDeliveryAddressesUrl, ACC.address.handleAddressDataLoad); return false; }, handleAddressDataLoad: function (data) { "use strict"; ACC.address.setupDeliveryAddressPopupForm(data); ACC.colorbox.open("", { inline: true, href: "#summaryDeliveryAddressOverlay", overlayClose: false, onOpen: function () { ACC.address.emptyAddressForm(); $(document).on("change", "#saveAddress", function () { var saveAddressChecked = $(this).prop("checked"); $("#defaultAddress").prop("disabled", !saveAddressChecked); if (!saveAddressChecked) { $("#defaultAddress").prop("checked", false); } }); } }); }, setupDeliveryAddressPopupForm: function (data) { "use strict"; $("#summaryDeliveryAddressBook").html($("#deliveryAddressesTemplate").tmpl({ addresses: data })); $("#summaryDeliveryAddressBook button.use_address").click(ACC.address.handleSelectExistingAddressClick); $("#summaryDeliveryAddressBook button.edit").click(ACC.address.handleEditAddressClick); $("#summaryDeliveryAddressBook button.default").click(ACC.address.handleDefaultAddressClick); }, emptyAddressForm: function () { "use strict"; var options = { url: getDeliveryAddressFormUrl, data: { addressId: ACC.address.addressID, createUpdateStatus: "" }, type: "GET", success: function (data) { $("#summaryDeliveryAddressFormContainer").html(data); ACC.address.bindCreateUpdateAddressForm(); } }; $.ajax(options); }, handleSelectExistingAddressClick: function () { "use strict"; var addressId = $(this).attr("data-address"); $.postJSON(setDeliveryAddressUrl, { addressId: addressId }, ACC.address.handleSelectExitingAddressSuccess); return false; }, handleEditAddressClick: function () { "use strict"; $("#summaryDeliveryAddressFormContainer").show(); $("#summaryOverlayViewAddressBook").show(); $("#summaryDeliveryAddressBook").hide(); var addressId = $(this).attr("data-address"); var options = { url: getDeliveryAddressFormUrl, data: { addressId: addressId, createUpdateStatus: "" }, target: "#summaryDeliveryAddressFormContainer", type: "GET", success: function (data) { ACC.address.bindCreateUpdateAddressForm(); ACC.colorbox.resize(); } }; $(this).ajaxSubmit(options); return false; }, handleDefaultAddressClick: function () { "use strict"; var addressId = $(this).attr("data-address"); var options = { url: setDefaultAddressUrl, data: { addressId: addressId }, type: "GET", success: function (data) { ACC.address.setupDeliveryAddressPopupForm(data); } }; $(this).ajaxSubmit(options); return false; }, handleSelectExitingAddressSuccess: function (data) { "use strict"; if (data != null) { ACC.refresh.refreshPage(data); ACC.colorbox.close(); } }, bindCreateUpdateAddressForm: function () { "use strict"; $(".create_update_address_form").each(function () { var options = { type: "POST", beforeSubmit: function () { $("#checkout_delivery_address").block({ message: ACC.address.spinner }); }, success: function (data) { $("#summaryDeliveryAddressFormContainer").html(data); var status = $(".create_update_address_id").attr("status"); if (status != null && status.toLowerCase() === "success") { ACC.refresh.getCheckoutCartDataAndRefreshPage(); ACC.colorbox.close(); } else { ACC.address.bindCreateUpdateAddressForm(); ACC.colorbox.resize(); } }, complete: function () { $("#checkout_delivery_address").unblock(); } }; $(this).ajaxForm(options); }); }, refreshDeliveryAddressSection: function (data) { "use strict"; $(".summaryDeliveryAddress").replaceWith($("#deliveryAddressSummaryTemplate").tmpl(data)); }, bindSuggestedDeliveryAddresses: function () { "use strict"; var status = $(".add_edit_delivery_address_id").attr("status"); if (status != null && status == "hasSuggestedAddresses") { ACC.address.showSuggestedAddressesPopup(); } }, showSuggestedAddressesPopup: function () { "use strict"; ACC.colorbox.open("", { href: "#popup_suggested_delivery_addresses", inline: true, overlayClose: false, width: 525 }); }, bindCountrySpecificAddressForms: function () { "use strict"; $(document).on("change", "#countrySelector select", function () { var options = { "addressCode": "", "countryIsoCode": $(this).val() }; ACC.address.displayCountrySpecificAddressForm(options, ACC.address.showAddressFormButtonPanel); }); }, showAddressFormButtonPanel: function () { "use strict"; if ($("#countrySelector :input").val() !== "") { $("#addressform_button_panel").show(); } }, bindToColorboxClose: function () { "use strict"; $(document).on("click", ".closeColorBox", function () { ACC.colorbox.close(); }); }, displayCountrySpecificAddressForm: function (options, callback) { "use strict"; $.ajax({ url: ACC.config.encodedContextPath + "/my-account/addressform", async: true, data: options, dataType: "html", beforeSend: function () { $("#i18nAddressForm").html(ACC.address.spinner); } }).done(function (data) { $("#i18nAddressForm").html($(data).html()); if (typeof callback == "function") { callback.call(); } }); }, bindToChangeAddressButton: function () { "use strict"; $(document).on("click", ".summaryDeliveryAddress .editButton", ACC.address.handleChangeAddressButtonClick); }, bindViewAddressBook: function () { "use strict"; $(document).on("click", ".js-address-book", function (e) { e.preventDefault(); ACC.colorbox.open("Saved Addresses", { href: "#addressbook", inline: true, width: "380px" }); }); $(document).on("click", "#summaryOverlayViewAddressBook", function () { $("#summaryDeliveryAddressFormContainer").hide(); $("#summaryOverlayViewAddressBook").hide(); $("#summaryDeliveryAddressBook").show(); ACC.colorbox.resize(); }); }, showRemoveAddressFromBookConfirmation: function () { "use strict"; $(document).on("click", ".removeAddressFromBookButton", function () { var addressId = $(this).data("addressId"); var popupTitle = $(this).data("popupTitle"); ACC.colorbox.open(popupTitle, { inline: true, height: false, href: "#popup_confirm_address_removal_" + addressId, onComplete: function () { $(this).colorbox.resize(); } }); }); }, backToListAddresses: function () { "use strict"; $(".addressBackBtn").on("click", function () { var sUrl = $(this).data("backToAddresses"); window.location = sUrl; }); }, bindCloseAccountPopup: function () { "use strict"; $(document).on("click", ".closeAccountModal", function (e) { e.preventDefault(); $.post(ACC.config.encodedContextPath + "/my-account/delete-account").done(function (response) { $("#closeAccountModal").modal("hide"); $(".confirmCloseAccount .modal-content-confirm").replaceWith(response); $("#confirmCloseAccount").modal({ backdrop: "static", keyboard: false }); }).fail(function (jqXHR, textStatus, response) { $("#closeAccountModal").modal("hide"); $(".failCloseAccount .modal-content-fail").replaceWith(response); $("#failCloseAccount").modal(); }); }); }, bindCloseAccountReqPopUp: function () { "use strict"; $(document).on("click", ".reqDeleteAccount", function (e) { e.preventDefault(); $.post(ACC.config.encodedContextPath + "/my-account/request-close-account").done(function (response) { ACC.address.isScheduled = true; $("#confirmCloseAccount").modal("hide"); $(".reqCloseAccountConfirmed .modal-content-req-confirmed").replaceWith(response); $("#confirmCloseAccountRequest").modal(); }).fail(function (jqXHR, textStatus, response) { $("#confirmCloseAccount").modal("hide"); $(".reqCloseAccountFailed .modal-content-req-failed").replaceWith(response); $("#closeAccountRequestFailed").modal(); }); }); }, bindImmediateCloseAccountPopUp: function () { "use strict"; $(document).on("click", ".immediateAccountClose", function (e) { e.preventDefault(); $.post(ACC.config.encodedContextPath + "/my-account/immediate-close-account").done(function (response) { $("#confirmCloseAccount").modal("hide"); $(".immediateCloseAccountRequest .modal-content-req-immediate").replaceWith(response); $("#immediateCloseAccountRequest").modal({ backdrop: "static", keyboard: false }); }).fail(function (jqXHR, textStatus, response) { $("#confirmCloseAccount").modal("hide"); $(".immediateCloseAccountRequest .modal-content-req-immediate").replaceWith(response); $("#immediateCloseAccountRequest").modal({ backdrop: "static", keyboard: false }); }); }); }, bindCancelClosurePopUp: function () { "use strict"; $(document).on("click", ".linkForCancelClosure", function (e) { e.preventDefault(); $.post(ACC.config.encodedContextPath + "/my-account/cancel-schedule-closure").done(function (response) { $(".cancelCloseAccountRequest .modal-content-req-cancel-closure").replaceWith(response); $("#cancelCloseAccountRequest").modal(); }).fail(function (jqXHR, textStatus, response) { $(".cancelCloseAccountRequest .modal-content-req-cancel-closure").replaceWith(response); $("#cancelCloseAccountRequest").modal(); }); }); }, bindCloseAccountInfoPopUp: function () { "use strict"; $(document).on("click", ".linkForCloseAccountInfo", function (e) { e.preventDefault(); $.post(ACC.config.encodedContextPath + "/my-account/immediate-close-account").done(function (response) { $(".immediateCloseAccountRequest .modal-content-req-immediate").replaceWith(response); $("#immediateCloseAccountRequest").modal({ backdrop: "static", keyboard: false }); }).fail(function (jqXHR, textStatus, response) { $(".immediateCloseAccountRequest .modal-content-req-immediate").replaceWith(response); $("#immediateCloseAccountRequest").modal({ backdrop: "static", keyboard: false }); }); }); } }; ACC.checkout = {
    _autoload: ["bindCheckO", "bindForms", "bindSavedPayments", "bindEmailAutoSuggest", "bindErrorDisplay", "bindDownloadInvoice", "bindProfileURLRedirect"], bindProfileURLRedirect: function () { "use strict"; $('.update-profile-redirect').click(function () { var url = ACC.config.encodedContextPath + '/my-account/update-profile'; window.location.replace(url); }); }, bindDownloadInvoice: function () {
        "use strict"; $('.txt_undr_invoice').click(function (e) {
            e.preventDefault(); var orderReference = $(this).attr('href'); var orderCode = $(this).attr('data-orderId')
            $.ajax({ url: ACC.config.encodedContextPath + '/invoice/download/' + orderCode, type: 'GET', contentType: 'application/pdf', success: function (responseData) { var link = document.createElement('a'); link.innerHTML = 'Download PDF file'; link.download = orderReference + ".pdf"; link.href = 'data:application/octet-stream;base64,' + responseData; document.body.appendChild(link); link.click(); document.body.removeChild(link); }, error: function (responseData) { alert("Error"); } });
        });
    }, bindForms: function () {
        "use strict"; var url = window.location.href; var urlParams = new URLSearchParams(window.location.search); $(".error-text").text($("#sessionErrorMessage").val()); if (urlParams.has("csrfError")) { $(".age-error-msg").css("display", "block"); } else { $(".age-error-msg").hide(); }
        $('#ageRestriction').modal({ backdrop: 'static', keyboard: false, show: false }); $('#ageRestriction .has-error').hide(); $(document).on("click", "#addressSubmit", function (e) { e.preventDefault(); $("#addAddressForm").submit(); }); $(document).on("click", "#deliveryMethodSubmit", function (e) { e.preventDefault(); $("#selectDeliveryMethodForm").submit(); }); $(document).on("click", "#deliveryMethodSubmitDesktop", function (e) { e.preventDefault(); $("#selectDeliveryMethodFormDesktop").submit(); }); $(document).on("click", "#orderReviewSubmit", function (e) { e.preventDefault(); $("#orderReviewForm").submit(); });
    }, bindSavedPayments: function () { "use strict"; $(document).on("click", ".js-saved-payments", function (e) { e.preventDefault(); var title = $("#savedpaymentstitle").html(); $.colorbox({ href: "#savedpaymentsbody", inline: true, maxWidth: "100%", opacity: 0.7, title: title, close: "<span class=\"glyphicon glyphicon-remove\"></span>", onComplete: function () { } }); }); }, bindCheckO: function () {
        "use strict"; var cartEntriesError = false; $(".doFlowSelectedChange").change(function () { if ($("#selectAltCheckoutFlow").attr("value") == "multistep-pci") { $("#selectPciOption").css("display", ""); } else { $("#selectPciOption").css("display", "none"); } }); $(".js-continue-shopping-button").click(function () { var checkoutUrl = $(this).data("continueShoppingUrl"); window.location = checkoutUrl; }); $(".expressCheckoutButton").click(function () { document.getElementById("expressCheckoutCheckbox").checked = true; }); $(".guestCheckoutBtn").click(function () {
            var siteKey = $("#confirmEmailGuestForm").data("siteKey"); var that = this; if (siteKey != "") {
                grecaptcha.enterprise.ready(function () {
                    grecaptcha.enterprise.execute(siteKey, { action: 'guestcheckout' }).then(function (token) {
                        $("#guestRecaptchaChallange").val(token); var url = window.location.href; var requrl; if (url.endsWith("guest")) { requrl = "checkuser"; } else { requrl = "checkout/checkuser"; }
                        $.ajax({ url: requrl, type: "post", data: $("form#confirmEmailGuestForm").serialize(), success: function (response) { if (response == "true") { $("#email-msg").modal({}); } else { $("form#confirmEmailGuestForm").submit(); } } });
                    });
                });
            }
            else {
                var url = window.location.href; var requrl; if (url.endsWith("guest")) { requrl = "checkuser"; } else { requrl = "checkout/checkuser"; }
                $.ajax({ url: requrl, type: "post", data: $("form#confirmEmailGuestForm").serialize(), success: function (response) { if (response == "true") { $("#email-msg").modal({}); } else { $("form#confirmEmailGuestForm").submit(); } } });
            }
            return false;
        }); $(".guestCheckoutLogin").click(function () { var orginalEmail = $(".guestEmail").val(); document.getElementById("j_username").value = orginalEmail; document.getElementById("guest.email").value = ""; document.getElementById("guest.confirmEmail").value = ""; document.getElementById("j_password").focus(); }); $(".guestContinueasGuest").click(function () { $("form#confirmEmailGuestForm").submit(); }); var ageValue = $('#ageInput').val(); $('#ageInput').keypress(function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which); if (keycode == '13') {
                if (ageValue.toString().length == 10) { $('#saveAge').click(); return false; }
                return false;
            }
            event.stopPropagation();
        }); var valueCheck = false; $('#ageInput').keyup(function (event) {
            var tempData = $('#ageInput').val(); var currentSub = tempData.substr(tempData.length - 1, 1); var keycode = (event.keyCode ? event.keyCode : event.which); if (keycode !== '13') {
                if (!isNaN(currentSub) || currentSub == "/") {
                    if ($('#ageInput').val() != ageValue) {
                        ageValue = $('#ageInput').val(); var dateCheck = ""; var tempInputOne = ""; var tempInputTwo = ""; if (ageValue.length == 2) {
                            var tempInput = parseInt(ageValue.substr(0, 2)); if (tempInput.toString().length == 2) { dateCheck = ageValue + "/"; tempInputOne = parseInt(tempInput); if (tempInputOne != "0NaN") { var fullDate = tempInputOne + "/"; $('#ageInput').val(fullDate); } }
                            else { dateCheck = "0" + ageValue + "/"; tempInputOne = "0" + parseInt(tempInput); if (tempInputOne != "0NaN") { var fullDate = tempInputOne + "/"; $('#ageInput').val(fullDate); } }
                        }
                        else if ($('#ageInput').val().length == 5) {
                            var tempInputMonth = parseInt($('#ageInput').val().substr(3, 2)); if (tempInputMonth.toString().length == 2) { tempInputTwo = tempInputMonth; if (tempInputTwo != "0NaN") { var fullDate = ageValue.substr(0, 2) + "/" + tempInputTwo + "/"; $('#ageInput').val(fullDate); } }
                            else { tempInputTwo = "0" + tempInputMonth; if (tempInputTwo != "0NaN") { var fullDate = ageValue.substr(0, 2) + "/" + tempInputTwo + "/"; $('#ageInput').val(fullDate); } }
                        }
                        var fullDate = ageValue.substr(0, 2) + "/" + ageValue.substr(3, 2) + "/" + ageValue.substr(6, 4); if (fullDate.length == 10) { parseAgeDOB(fullDate); }
                        else { $("#saveAge").css("background", "#CCCCCC"); $("#saveAge").prop("disabled", true); }
                    }
                }
                else {
                    if (event.keyCode === 8 || event.keyCode === 46) { event.preventDefault(); }
                    else { var dateReplace = $('#ageInput').val(); var replacedDate = dateReplace.substr(0, dateReplace.toString().length - 1); var validDate = dateReplace.replace(dateReplace, replacedDate); $('#ageInput').val(validDate); return false; }
                }
            }
        }); function parseAgeDOB(value) {
            var currentDate = new Date(); var currentYear = currentDate.getFullYear(); var date = value.split("/"); var inputDay = parseInt(date[0], 10), inputMonth = parseInt(date[1], 10), inputYear = parseInt(date[2], 10); var checkDate = inputYear + "/" + inputMonth + "/" + inputDay; var decadeYear = (currentDate.getFullYear() - 100) + "/" + (currentDate.getMonth() + 1) + "/" + currentDate.getDate(); decadeYear = new Date(decadeYear); checkDate = new Date(checkDate); if (inputDay <= 31) {
                if (inputMonth <= 12) {
                    if ((checkDate < currentDate) && (checkDate >= decadeYear)) { $("#ageInput").removeClass("input-error"); $("#ageRestriction .has-error").hide(); $("#saveAge").prop("disabled", false); $("#saveAge").css("background", "#02BF5D"); return new Date(inputYear, inputMonth - 1, inputDay); }
                    else { $("#saveAge").css("background", "#CCCCCC"); $("#saveAge").prop("disabled", true); $("#ageInput").addClass("input-error"); $("#ageRestriction .has-error").show(); }
                }
                else { $("#ageInput").addClass("input-error"); $("#ageRestriction .has-error").show(); $("#saveAge").css("background", "#CCCCCC"); $("#saveAge").prop("disabled", true); }
            }
            else { $("#ageInput").addClass("input-error"); $("#ageRestriction .has-error").show(); $("#saveAge").css("background", "#CCCCCC"); $("#saveAge").prop("disabled", true); }
        }
        function captchaValidate() {
            var siteKey = $(".js-continue-checkout-button").data("siteKey"); var that = this; if (siteKey != "" && typeof siteKey != "undefined") {
                grecaptcha.enterprise.ready(function () {
                    grecaptcha.enterprise.execute(siteKey, { action: 'cart' }).then(function (token) {
                        $.ajax({
                            url: ACC.config.encodedContextPath + '/cart/verify/captcha', type: "post", data: { 'captchaCode': token }, success: function (response) {
                                console.log("RESPONSE === ", response); if (response == "true") {
                                    var ccValue = $(".option-selected").find("#ccradiobutton").val(); var store = $("#storeName").val(); if (ccValue == "clickAndCollect" && (store == undefined || store == "")) { $("#selectStoreErrorMessage").modal({ show: true }); return true; } else {
                                        var checkoutUrl = $(".js-continue-checkout-button").data("checkoutUrl"); cartEntriesError = ACC.pickupinstore.validatePickupinStoreCartEntires(); if (!cartEntriesError) {
                                            var expressCheckoutObject = $(".express-checkout-checkbox"); if (expressCheckoutObject.is(":checked")) { window.location = expressCheckoutObject.data("expressCheckoutUrl"); } else {
                                                var flow = $("#selectAltCheckoutFlow").attr("value"); if (flow == undefined || flow == "") { window.location = checkoutUrl; } else {
                                                    if (flow == "multistep-pci") { flow = "multistep"; }
                                                    var pci = $("#selectPciOption").attr("value"); var redirectUrl = checkoutUrl + "/select-flow?flow=" + flow + "&pci=" + pci; window.location = redirectUrl;
                                                }
                                            }
                                        }
                                        return false;
                                    }
                                } else { window.location.reload(); }
                            }, error: function () { document.getElementById("sessionExpirationMsg").style.visibility = "visible"; setTimeout(function () { window.location.reload(); }, 3000); }
                        });
                    });
                });
            }
            else {
                var ccValue = $(".option-selected").find("#ccradiobutton").val(); var store = $("#storeName").val(); if (ccValue == "clickAndCollect" && (store == undefined || store == "")) { $("#selectStoreErrorMessage").modal({ show: true }); return true; } else {
                    var checkoutUrl = $(".js-continue-checkout-button").data("checkoutUrl"); cartEntriesError = ACC.pickupinstore.validatePickupinStoreCartEntires(); if (!cartEntriesError) {
                        var expressCheckoutObject = $(".express-checkout-checkbox"); if (expressCheckoutObject.is(":checked")) { window.location = expressCheckoutObject.data("expressCheckoutUrl"); } else {
                            var flow = $("#selectAltCheckoutFlow").attr("value"); if (flow == undefined || flow == "") { window.location = checkoutUrl; } else {
                                if (flow == "multistep-pci") { flow = "multistep"; }
                                var pci = $("#selectPciOption").attr("value"); var redirectUrl = checkoutUrl + "/select-flow?flow=" + flow + "&pci=" + pci; window.location = redirectUrl;
                            }
                        }
                    }
                    return false;
                }
            }
        }
        window.readCookie = function (name) {
            var nameEQ = name + "="; var ca = document.cookie.split(';'); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == ' ') c = c.substring(1, c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length); }
            return null;
        }; $(".js-continue-checkout-button").click(function (e) {
            var uid = window.readCookie("uid"); var cookieStoreName = window.readCookie(uid + "StoreNameCookieVariable"); var ieCookieStoreName = window.readCookie("ieStoreNameCookieVariable"); var storeStatus = $(".js-storeStatus").text(); var deliveryType = $("#deliveryType").val(); var storeNameFrom = $("#storeNameFrom").val(); $("#ageInput").removeClass("input-error"); $(".has-error-date").hide(); $('#ageInput').val(""); $("#saveAge").css("background", "#CCCCCC"); $("#saveAge").prop("disabled", true); var setAgeRestriction = $("#setAgeRestriction").val(); if ((storeNameFrom == "DefaultStore" || storeNameFrom == "" || storeNameFrom == undefined || storeNameFrom == null) && deliveryType == "clickAndCollect") {
                e.preventDefault(); $(".js-pickup-in-store-button").popover('show'); $('.popover .arrow').css('top', '55.8095%'); if ($(window).width() < 767) { $('.popover').css('max-width', '144px'); $('.popover').css('top', '40px'); $('.popover').css('left', '-141px'); }
                else if ($(window).width() == 768) { $('.popover').css('top', '48px'); $('.popover').css('left', '-190px'); $('.popover .arrow').css('top', '55.8095%'); $('.popover').css('right', '352px'); }
                else if ($(window).width() == 1024) { $('.popover').css('top', '52px'); $('.popover').css('left', '-180px'); $('.popover .arrow').css('top', '55.8095%'); $('.popover').css('right', '188px'); }
                else { $('.popover').css('top', '56px'); $('.popover').css('left', '-180px'); $('.popover .arrow').css('top', '55.8095%'); $('.popover').css('right', '198px'); }
            }
            else {
                var ageRestrictionCartPopup = $("#ageRestrictionCartPopup").val(); if (ageRestrictionCartPopup) { $('body').addClass('no-overflow'); $('#ageRestriction').modal({ backdrop: 'static', keyboard: false, show: true }); return false; }
                captchaValidate();
            }
        }); $('#saveAge').click(function () { var ageValue = $('#ageInput').val(); $.ajax({ url: ACC.config.encodedContextPath + '/cart/ageRestriction?dob=' + ageValue, type: "GET", success: function (response) { if (typeof response.success != "undefined") { captchaValidate(); } else { window.location = ACC.config.encodedContextPath + "/cart?errorMessage=ageRestrictionErrorMsg"; } } }); }); $('.age-close').click(function () { $(".age-error-msg").hide(); $("#saveAge").css("background", "#CCCCCC"); $("#saveAge").prop("disabled", true); }); $('.age-header-close').click(function () { $(".age-error-msg").hide(); $("#saveAge").css("background", "#CCCCCC"); $("#saveAge").prop("disabled", true); $(".has-error-date").show(); $("#ageInput").removeClass("input-error"); $('body').removeClass('no-overflow'); });
    }, bindEmailAutoSuggest: function () {
        "use strict"; var autocompOpts = { minChars: 0, matchSubset: false, matchContains: true, source: [], classes: { "ui-autocomplete": "auto-suggestions" } }; var domains = ["@gmail.com", "@outlook.com"]; var domanListStr = $(".guestCheckoutBtn").data("domains"); if (domanListStr != undefined) { var array = domanListStr.split(","); if (array.length > 0) { for (var i = 0; i < array.length; ++i) { var value = array[i]; if (domains.indexOf(value) === -1 && value != "") { domains.push(value); } } } }
        var input = $(".guestEmail"); input.autocomplete(autocompOpts); input.bind("keyup", function (event) {
            var userName = $(this).val(); if ((event.shiftKey == 1 && event.keyCode == 50) || userName.search("@") > 1) {
                if (userName.search("@") > 1) { userName = userName.substring(0, userName.search("@")); } else { userName = userName.substring(0, userName.length - 1); }
                var emailIDs = []; $.each(domains, function (index, domain) { emailIDs.push(userName + domain); }); autocompOpts.source = emailIDs; $(this).autocomplete(autocompOpts);
            }
        });
    }, bindErrorDisplay: function () { "use strict"; $(".guestEmail").focus(function () { $(".help-block").hide(); }); }
}; ACC.checkoutaddress = { _autoload: ["showAddressBook", "showRemoveAddressConfirmation"], spinner: $("<img src='" + ACC.config.commonResourcePath + "/images/spinner.gif' />"), addressID: "", showAddressBook: function () { "use strict"; $(document).on("click", "#viewAddressBook", function () { var data = $("#savedAddressListHolder").html(); $.colorbox({ height: false, html: data, onComplete: function () { $(this).colorbox.resize(); } }); }); }, showRemoveAddressConfirmation: function () { "use strict"; $(document).on("click", ".removeAddressButton", function () { var addressId = $(this).data("addressId"); $.colorbox({ inline: true, height: false, href: "#popup_confirm_address_removal_" + addressId, onComplete: function () { $(this).colorbox.resize(); } }); }); } }; ACC.checkoutsteps = { _autoload: ["permeateLinks"], permeateLinks: function () { "use strict"; $(document).on("click", ".js-checkout-step", function (e) { e.preventDefault(); window.location = $(this).closest("a").attr("href"); }); } }; ACC.forgottenpassword = {
    _autoload: ["bindLink"], bindLink: function () {
        "use strict"; $(document).on("click", ".js-password-forgotten", function (e) {
            e.preventDefault(); var maxHeight = "360PX"; var top = "30px"; if ($(window).width() < 639) { maxHeight = "100%"; top = "0px"; }
            ACC.colorbox.open($(this).data("cboxTitle"), { href: $(this).attr("href"), scrolling: false, width: "100%", height: "100%", maxWidth: "600PX", maxHeight: maxHeight, fixed: true, top: top, className: "variantSelectMobile", onOpen: function () { $("body").css({ overflow: "hidden" }); }, onClosed: function () { $("body").css({ overflow: "" }); }, onComplete: function () { $("form#forgottenPwdForm").ajaxForm({ success: function (data) { if ($(data).closest("#validEmail").length) { if ($("#validEmail").length === 0) { $(".forgotten-password").replaceWith(data); } } else { $("#forgottenPwdForm .control-group").replaceWith($(data).find(".control-group")); } } }); if ($(window).width() > 639) { $(this).colorbox.resize(); } } });
        });
    }
}; ACC.order = { _autoload: ["backToOrderHistory", "bindMultidProduct"], backToOrderHistory: function () { "use strict"; $(".orderBackBtn > button").on("click", function () { var sUrl = $(this).data("backToOrders"); window.location = sUrl; }); }, bindMultidProduct: function () { "use strict"; $(document).on("click", ".js-show-multiD-grid-in-order", function (event) { ACC.multidgrid.populateAndShowGrid(this, event, true); return false; }); $(document).on("click", ".showMultiDGridInOrderOverlay", function (event) { ACC.multidgrid.populateAndShowGridOverlay(this, event); }); } }; ACC.payment = { _autoload: ["activateSavedPaymentButton", "bindPaymentCardTypeSelect"], activateSavedPaymentButton: function () { "use strict"; $(document).on("click", ".js-saved-payments", function (e) { e.preventDefault(); var title = $("#savedpaymentstitle").html(); $.colorbox({ href: "#savedpaymentsbody", inline: true, maxWidth: "100%", opacity: 0.7, width: "320px", title: title, close: "<span class=\"glyphicon glyphicon-remove\"></span>", onComplete: function () { } }); }); }, bindPaymentCardTypeSelect: function () { "use strict"; this.filterCardInformationDisplayed(); $("#card_cardType").change(function () { var cardType = $(this).val(); if (cardType == "024") { $("#startDate, #issueNum").show(); } else { $("#startDate, #issueNum").hide(); } }); }, filterCardInformationDisplayed: function () { "use strict"; var cardType = $("#card_cardType").val(); if (cardType == "024") { $("#startDate, #issueNum").show(); } else { $("#startDate, #issueNum").hide(); } } }; ACC.paymentDetails = { _autoload: ["showRemovePaymentDetailsConfirmation"], showRemovePaymentDetailsConfirmation: function () { "use strict"; $(document).on("click", ".removePaymentDetailsButton", function () { var paymentId = $(this).data("paymentId"); var popupTitle = $(this).data("popupTitle"); ACC.colorbox.open(popupTitle, { inline: true, fixed: true, top: "30px", className: "variantSelectMobile", scrolling: false, maxWidth: "640px", width: "100%", href: "#popup_confirm_payment_removal_" + paymentId, onComplete: function () { $(this).colorbox.resize(); $("body").addClass("modal-open"); } }); }); } }; ACC.pickupinstore = {
    _autoload: ["bindClickPickupInStoreButton", "bindPickupButton", "bindPickupInStoreSearch", "isInStoreOnly", "isInStoreHDAvailable", "isStoreCheck"], storeId: "", siteId: "", storeOnlyPreOrder: false, isStoreCheck: function () {
        "use strict"; window.readCookie = function (name) {
            var nameEQ = name + "="; var ca = document.cookie.split(';'); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == ' ') c = c.substring(1, c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length); }
            return null;
        }; var uid = window.readCookie("uid"); var cookieStoreName = window.readCookie(uid + "StoreNameCookieVariable"); var ieCookieStoreName = window.readCookie("ieStoreNameCookieVariable"); var storeStatus = $(".js-storeStatus").text(); var storeNameFrom = $("#storeNameFrom").val(); $('[data-toggle="tooltip"]').tooltip(); var cartPageCheck = window.location.href; var cartPageSplit = cartPageCheck.split("/"); if (storeNameFrom == "DefaultStore" || storeNameFrom == "" || storeNameFrom == undefined || storeNameFrom == null) {
            $(".js-pickup-in-store-button").text("Select store"); $(".js-pickup-in-store-button").css("display", "block"); if (storeStatus == "outOfStock") {
                $(".selectedClickAndCollectStore").css("display", "block"); if (cartPageSplit[cartPageSplit.length - 1] != "cart") { $(".hide-break").css("display", "block"); }
                else { $(".hide-break").css("display", "none"); }
            }
            else { $(".selectedClickAndCollectStore").css("display", "none"); $(".hide-break").css("display", "none"); }
        }
        else {
            $(".js-pickup-in-store-button").text("Change store"); $(".js-pickup-in-store-button").css("display", "block"); $(".selectedClickAndCollectStore").css("display", "block"); if (cartPageSplit[cartPageSplit.length - 1] != "cart") { $(".hide-break").css("display", "block"); }
            else { $(".hide-break").css("display", "none"); }
        }
    }, bindPickupInStoreQuantity: function () { "use strict"; $(".pdpPickupQtyPlus").click(function (e) { e.preventDefault(); var inputQty = $(".js-add-pickup-cart #pdpPickupAddtoCartInput"); var currentVal = parseInt(inputQty.val(), 10); var maxVal = inputQty.data("max"); if (!isNaN(currentVal) && currentVal < maxVal) { inputQty.val(currentVal + 1); inputQty.change(); } }); $(".pdpPickupQtyMinus").click(function (e) { e.preventDefault(); var inputQty = $(".js-add-pickup-cart #pdpPickupAddtoCartInput"); var currentVal = parseInt(inputQty.val(), 10); var minVal = inputQty.data("min"); if (!isNaN(currentVal) && currentVal > minVal) { inputQty.val(currentVal - 1); inputQty.change(); } }); $("body").on("keyup", ".js-add-pickup-cart #pdpPickupAddtoCartInput", function (event) { var input = $(event.target); input.val(this.value.match(/[0-9]*/)); }); }, bindPickupInStoreSearch: function () {
        "use strict"; $(document).on("click", "#pickupstore_location_search_button", function (e) { ACC.pickupinstore.locationSearchSubmit($("#locationForSearch").val(), $("#atCartPage").val(), $("#entryNumber").val(), $("#pickupstore_location_search_button").parents("form").attr("action"), null, null, false, false, false); return false; }); $(document).on("keypress", "#locationForSearch", function (e) { if (e.keyCode === 13) { e.preventDefault(); ACC.pickupinstore.locationSearchSubmit($("#locationForSearch").val(), $("#atCartPage").val(), $("input.entryNumber").val(), $(this).parents("form").attr("action"), null, null, false, false, false); return false; } else { return true; } }); $(document).on("keyup", "#locationForSearch", function (e) {
            var storeLookupTimer; var storeLookupTimeoutValue = 500; var $this = $(this); var value = $this.val(); if ((value.length) >= 4 && (e.which != 13) && ((e.which > 40) || (e.which < 37))) {
                if (storeLookupTimer) { clearTimeout(storeLookupTimer); }
                storeLookupTimer = setTimeout(function () { ACC.pickupinstore.findStore(value); }, storeLookupTimeoutValue);
            }
        });
    }, bindPickupHereInStoreButtonClick: function () { "use strict"; $(document).on("click", ".pickup_add_to_bag_instore_button", function (e) { $(this).prev(".hiddenPickupQty").val($("#pickupQty").val()); }); $(document).on("click", ".pickup_here_instore_button", function (e) { $(this).prev(".hiddenPickupQty").val($("#pickupQty").val()); ACC.colorbox.close(); }); }, locationSearchSubmit: function (location, cartPage, entryNumber, productCode, latitude, longitude, alphabeticalOrder, searchThroughGeoPointFirst, xaaLandingStores) {
        "use strict"; if (alphabeticalOrder) { location = null; }
        $("#colorbox .js-add-to-cart-for-pickup-popup, #colorbox .js-qty-selector-minus, #colorbox .js-qty-selector-input, #colorbox .js-qty-selector-plus").attr("disabled", "disabled"); var xaaLandingStores = $("#xaaLandingStores").val(); if (location == undefined || location == "") { location = $("#landingStoreName").val(); }
        if (xaaLandingStores == undefined || xaaLandingStores == "") { xaaLandingStores = false; }
        $.ajax({ url: productCode, data: { locationQuery: location, cartPage: cartPage, entryNumber: entryNumber, latitude: latitude, longitude: longitude, searchThroughGeoPointFirst: searchThroughGeoPointFirst, xaaLandingStores: xaaLandingStores }, type: "post", success: function (response) { ACC.pickupinstore.refreshPickupInStoreColumn(response); } });
    }, createListItemHtml: function (data, id) { "use strict"; var item = ""; item += "<li class=\"pickup-store-list-entry\">"; item += "<input type=\"radio\" name=\"storeNamePost\" value=\"" + data.displayName + "\" id=\"pickup-entry-" + id + "\" class=\"js-pickup-store-input\" data-id=\"" + id + "\">"; item += "<label for=\"pickup-entry-" + id + "\" class=\"js-select-store-label\">"; item += "<span class=\"pickup-store-info\">"; item += "<hidden name=\"pickup-store-list-entry-id\" value=\"" + data.id + "\"/>"; item += "<span class=\"pickup-store-list-entry-name\">" + data.displayName + "</span>"; item += "</span>"; item += "<span class=\"store-availability\">"; item += "<span class=\"available\">" + data.stockPickup + "" + data.formattedDistance + "</span>"; item += "</span>"; item += "</label>"; item += "</li>"; return item; }, refreshPickupInStoreColumn: function (data) {
        "use strict"; data = $.parseJSON(data); this.siteId = data.siteId; var listitems = ""; $("#colorbox .js-pickup-component").data("data", data); for (var i = 0; i < data["data"].length; i++) { listitems += ACC.pickupinstore.createListItemHtml(data["data"][i], i); }
        if (data["data"].length > 0) { $("#colorbox .display-details").show(); $(".pick-up-store-head").show(); $("#colorbox .js-pickup-store-list").html(listitems); var firstInput = $("#colorbox .js-pickup-store-input")[0]; $(firstInput).click(); } else { $("#colorbox .js-pickup-store-list").text("No data found ! search for another store"); $(".store-navigation-pager").hide(); $(".pick-up-store-head").hide(); $("#colorbox .display-details").hide(); }
    }, bindClickPickupInStoreButton: function () {
        "use strict"; $(document).on("click", ".js-pickup-in-store-button", function (e) {
            e.preventDefault(); $(".js-pickup-in-store-button").popover('hide'); var ele = $(this); var productId = "pickupModal_" + $(this).attr("id"); var productIdNUM = $(this).attr("id"); productIdNUM = productIdNUM.split("_"); productIdNUM = productIdNUM[1]; var boxContent = ""; if ($(this).closest('#xaa-popin-info-add-to-cart').length <= 0) { $('#popup_store_pickup_form').addClass("popup_store_pickup_form0"); boxContent = $(".popup_store_pickup_form0 > #pickupModal").clone(); }
            else { $('#xaa-popin-info-add-to-cart').find('#popup_store_pickup_form').addClass("popup_store_pickup_form1"); $('#xaa-popin').css({ 'z-index': '9999' }); boxContent = $(".popup_store_pickup_form1 > #pickupModal").clone(); }
            var titleHeader = $("#pickupTitle > .pickup-header").html(); var maxHeight = "630PX"; var top = "30px"; if ($(window).width() < 639) { maxHeight = "100%"; top = "0"; }
            ACC.colorbox.open(titleHeader, {
                html: boxContent, scrolling: true, width: "100%", height: "100%", maxWidth: "900PX", maxHeight: maxHeight, top: top, fixed: true, open: true, transition: "none", className: "variantSelectMobile custom-store-finder", onOpen: function () { $("body").css({ overflow: "hidden" }); ACC.pickupinstore.popUpTabIndexSet(""); }, onClosed: function () { $("body").css({ overflow: "" }); ACC.pickupinstore.popUpTabIndexSet("-1"); }, onComplete: function () {
                    if ($(window).width() > 639) { $(this).colorbox.resize(); }
                    $(".store-navigation").focus(); $("#colorbox .js-add-to-cart-for-pickup-popup, #colorbox .js-qty-selector-minus, #colorbox .js-qty-selector-input, #colorbox .js-qty-selector-plus").attr("disabled", "disabled"); boxContent.show(); ACC.pickupinstore.pickupStorePager(); $("#colorbox #pickupModal *").each(function () { if ($(this).attr("data-id") != undefined) { $(this).attr("id", $(this).attr("data-id")); $(this).removeAttr("data-id"); } }); $("#colorbox #pickupModal").attr("id", productId); $("#colorbox #" + productId + " .thumb").html(ele.data("img")); $("#colorbox #" + productId + " .js-pickup-product-price").html(ele.data("productcart")); var variants = ele.data("productcartVariants"); var variantsOut = ""; $.each(variants, function (key, value) { variantsOut += "<span>" + value + "</span>"; }); $("#colorbox #" + productId + " .js-pickup-product-variants").html(variantsOut); $("#colorbox  #" + productId + " .js-pickup-product-info").html(ele.data("productname")); $("#colorbox #" + productId + " form.searchPOSForm").attr("action", ele.data("actionurl")); $("#colorbox #" + productId + " form.searchPOSForm").attr("id", "pickup_in_store_search_form_product_" + productIdNUM); $("#colorbox #" + productId + " #pdpPickupAddtoCartInput").attr("value", ($("#pdpPickupAddtoCartInput").val() !== undefined ? $("#pdpPickupAddtoCartInput").val() : ele.data("value"))); $("#colorbox #" + productId + " input#entryNumber").attr("value", ele.data("entrynumber")); $("#colorbox #" + productId + " input#atCartPage").attr("value", ele.data("cartpage")); locationKnown = true; var selectedStore = ACC.pickupinstore.getSelectedStore(ele); var locationCookie; try { locationCookie = document.cookie.split("locationCookie")[1].split("; ")[0].substr(1); } catch (error) { locationCookie = "_"; }
                    if (selectedStore == "undefined" || selectedStore == "" || (locationCookie != null && locationCookie != "_")) { var loc = locationCookie.split("_"); var lat = loc[0]; var lan = loc[1]; ACC.pickupinstore.locationSearchSubmit(selectedStore, $("#atCartPage").val(), ele.data("entrynumber"), ele.data("actionurl"), lat, lan, false, false, false); locationKnown = false; } else {
                        var alphabeticalOrder = false; if ($(".isDefaultStoreSelected").html() == "true") { alphabeticalOrder = true; }
                        ACC.pickupinstore.locationSearchSubmit(selectedStore, $("#atCartPage").val(), ele.data("entrynumber"), ele.data("actionurl"), null, null, alphabeticalOrder, false, ele.data("xaaLandingStores"));
                    }
                    ACC.pickupinstore.bindSelectStore(); ACC.product.bindToAddToCartStorePickUpForm();
                }
            });
        });
    }, popUpTabIndexSet: function (tabindex) { "use strict"; if ($('.js-tabindex-tracker').length > 0 && $('.js-tabindex-tracker').hasClass('in')) { $('.js-tabindex-tracker').attr("tabindex", tabindex); } }, searchWithoutLocation: function (ele) { "use strict"; if (locationKnown) { locationKnown = false; var selectedStore = ACC.pickupinstore.getSelectedStore(ele); ACC.pickupinstore.locationSearchSubmit(selectedStore, $("#atCartPage").val(), ele.data("entrynumber"), ele.data("actionurl"), null, null, false, false, false); } }, pickupStorePager: function () {
        "use strict"; $(document).on("change", "#colorbox .js-pickup-store-input", function (e) {
            e.preventDefault(); $("#colorbox .js-pickup-tabs li.first a").click(); var storeData = $("#colorbox .js-pickup-component").data("data"); storeData = storeData["data"]; var storeId = $(this).data("id"); var $ele = $("#colorbox .display-details"); if (storeData.length > 0) {
                var storeSelectable = true; var storeOutOfStock = false; var storePreOrder = false; ACC.pickupinstore.storeOnlyPreOrder = false; var specialLocation = false; var radioLabel = $("#ccradiobutton").data("label"); var isClickAndCollect = clickAndCollect == radioLabel; $.each(storeData[storeId], function (key, value) { if (key == "url") { if (value != "") { $ele.find(".js-store-image").html("<img src=\"" + value + "\" alt=\"\" />"); } else { $ele.find(".js-store-image").html(""); } } else if (key == "productcode") { $ele.find(".js-store-productcode").val(value); } else if (key == "openings") { if (value != "") { var $oele = $ele.find(".js-store-" + key); var openings = ""; $.each(value, function (key2, value2) { openings += "<dt>" + key2 + "</dt>"; openings += "<dd>" + value2 + "</dd>"; }); $oele.html(openings); } else { $ele.find(".js-store-" + key).html(""); } } else if (key == "specialOpenings") { if (value != "") { $ele.find(".js-special-timings").removeClass("hidden"); $ele.find(".js-special-timings").addClass("visible"); var $oele = $ele.find(".js-store-" + key); var specialOpenings = ""; $.each(value, function (key2, value2) { specialOpenings += "<dt>" + key2 + "</dt>"; specialOpenings += "<dd>" + value2 + "</dd>"; }); $oele.html(specialOpenings); } else { $ele.find(".js-store-" + key).html(""); $ele.find(".js-special-timings").addClass("hidden"); $ele.find(".js-special-timings").removeClass("visible"); } } else if (key == "specialLocation") { specialLocation = value == "NI"; $ele.find(".js-store-" + key).html(value); } else if (value != "") { $ele.find(".js-store-" + key).html(value); if ((key == "stockLevelStatusCode" && value == "outOfStock") || (isClickAndCollect && ((key == "isCCAvailable" && value == "false")))) { storeSelectable = false; if (isClickAndCollect && key == "isCCAvailable" && value == "false") { $("#colorbox .js-add-to-cart-for-pickup-popup").text($("#colorbox .cc_not_available_label").text()); } else { storeOutOfStock = true; } } else if (isClickAndCollect && key == "ccUnavailableOnlyPreorder" && value == "true") { storeSelectable = false; if (isClickAndCollect && key == "isCCAvailable" && value == "false") { $("#colorbox .js-add-to-cart-for-pickup-popup").text($("#colorbox .cc_not_available_label").text()); } else { ACC.pickupinstore.storeOnlyPreorder = true; } } else if (key == "stockLevelStatusCode" && value == "preOrder") { storePreOrder = true; } } else { $ele.find(".js-store-" + key).html(""); } }); if (!storeSelectable) {
                    $("#colorbox .js-add-to-cart-for-pickup-popup").attr("disabled", "disabled"); if (storeOutOfStock) {
                        if (specialLocation) { $("#colorbox .js-outofstock-message").text($("span[data-stock='OUTOFSTOCK'][data-location='NI'][data-channel='CLICK_AND_COLLECT']").text()); } else { $("#colorbox .js-outofstock-message").text($("span[data-stock='OUTOFSTOCK'][data-location=''][data-channel='CLICK_AND_COLLECT']").text()); }
                        $("#colorbox .js-outofstock-message").show();
                    } else if (ACC.pickupinstore.storeOnlyPreorder) { $("#colorbox .js-outofstock-message").text($("span[data-stock='CCUNAVAILABLEONLYPREORDER'][data-location=''][data-channel='CLICK_AND_COLLECT']").text()); $("#colorbox .js-outofstock-message").show(); } else { $("#colorbox .js-outofstock-message").hide(); }
                } else { $("#colorbox .js-add-to-cart-for-pickup-popup").removeAttr("disabled"); $("#colorbox .js-add-to-cart-for-pickup-popup").text($("#colorbox .select_store_label").text()); $("#colorbox .js-outofstock-message").hide(); }
                if (storePreOrder) {
                    if (specialLocation) { var lastNIMessage = $("span[data-stock='PREORDER'][data-location='NI'][data-channel='CLICK_AND_COLLECT']").size() - 1; $("#colorbox .js-preorder-message").text($("span[data-stock='PREORDER'][data-location='NI'][data-channel='CLICK_AND_COLLECT']").get(lastNIMessage).innerText); } else { var lastMessage = $("span[data-stock='PREORDER'][data-location=''][data-channel='CLICK_AND_COLLECT']").size() - 1; $("#colorbox .js-preorder-message").text($("span[data-stock='PREORDER'][data-location=''][data-channel='CLICK_AND_COLLECT']").get(lastMessage).innerText); }
                    $("#colorbox .js-preorder-message").show();
                } else { $("#colorbox .js-preorder-message").hide(); }
            } else { $ele.attr("display", "none"); }
            $(document).one("click", "#colorbox .js-pickup-map-tab", function () { ACC.pickupinstore.storeId = storeData[storeId]; ACC.global.addGoogleMapsApi("ACC.pickupinstore.drawMap"); }); e = $("#colorbox .pickup-store-list-entry input:checked"); $("#add_to_cart_storepickup_form .js-store-id").attr("id", e.attr("id")); $("#add_to_cart_storepickup_form .js-store-id").attr("name", e.attr("name")); $("#add_to_cart_storepickup_form .js-store-id").val(e.val()); if (storeData[storeId]["stockLevel"] > 0 || storeData[storeId]["stockLevel"] == "") { var input = $("#add_to_cart_storepickup_form .js-qty-selector-input"); input.data("max", storeData[storeId]["stockLevel"]); ACC.productDetail.checkQtySelector(input, "reset"); }
        }); $("#cboxLoadedContent .mobile-function").addClass("hidden-xs"); $(document).on("click", ".js-select-store-label", function (e) { $("#cboxLoadedContent .mobile-function").removeClass("hidden-xs"); $("#colorbox .js-find-store-display .store-navigation").addClass("hidden-xs hidden-sm"); $("#cboxLoadedContent").addClass("store-finder-popup-heading-second"); $("#colorbox #cboxTitle .headline-inner").addClass("hidden-xs hidden-sm"); $("#colorbox #cboxTitle .back-to-storelist").removeClass("hidden-xs hidden-sm"); }); $(document).on("click", ".js-back-to-storelist", function (e) { $("#cboxLoadedContent .mobile-function").addClass("hidden-xs"); $("#colorbox .js-find-store-display .store-navigation").removeClass("hidden-xs hidden-sm"); $("#cboxLoadedContent").removeClass("store-finder-popup-heading-second"); $("#colorbox #cboxTitle .headline-inner").removeClass("hidden-xs hidden-sm"); $("#colorbox #cboxTitle .back-to-storelist").addClass("hidden-xs hidden-sm"); });
    }, bindPickupButton: function () { "use strict"; $(document).on("click", ".js-pickup-button", function (e) { e.preventDefault(); var $e = $(this).parent().nextAll(".js-inline-layer"); $e.addClass("open"); var h = $e.height(); $e.removeClass("open"); $e.animate({ height: h }); }); }, bindPickupClose: function () { "use strict"; $(document).on("click", ".js-close-inline-layer", function (e) { e.preventDefault(); var $e = $(this).parents(".js-inline-layer"); $e.animate({ height: 0 }); }); }, checkIfPointOfServiceIsEmpty: function (cartEntryDeliveryModeForm) { "use strict"; return (!cartEntryDeliveryModeForm.find(".pointOfServiceName").text().trim().length); }, validatePickupinStoreCartEntires: function () {
        "use strict"; var validationErrors = false; $("form.cartEntryShippingModeForm").each(function () { var formid = "#" + $(this).attr("id"); if ($(formid + " input[value=pickUp][checked]").length && ACC.pickupinstore.checkIfPointOfServiceIsEmpty($(this))) { $(this).addClass("shipError"); validationErrors = true; } }); if (validationErrors) { $("div#noStoreSelected").show().focus(); $(window).scrollTop(0); }
        return validationErrors;
    }, drawMap: function () { "use strict"; var storeInformation = this.storeId; if ($("#colorbox .js-map-canvas").length > 0) { $("#colorbox .js-map-canvas").attr("id", "pickup-map"); var centerPoint = new google.maps.LatLng(storeInformation["storeLatitude"], storeInformation["storeLongitude"]); var mapOptions = { zoom: 13, zoomControl: true, panControl: true, streetViewControl: false, mapTypeId: google.maps.MapTypeId.ROADMAP, center: centerPoint }; var map = new google.maps.Map(document.getElementById("pickup-map"), mapOptions); var marker = new google.maps.Marker({ position: new google.maps.LatLng(storeInformation["storeLatitude"], storeInformation["storeLongitude"]), map: map, title: storeInformation["name"], icon: "https://maps.google.com/mapfiles/marker" + "A" + ".png" }); var infowindow = new google.maps.InfoWindow({ content: storeInformation["name"], disableAutoPan: true }); google.maps.event.addListener(marker, "click", function () { infowindow.open(map, marker); }); } }, bindSelectStore: function () {
        "use strict"; var frm = $("#add_to_cart_storepickup_form"); $("#add_to_cart_storepickup_form .js-add-to-cart-for-pickup-popup").click(function (event) {
            frm = $(this).closest("#add_to_cart_storepickup_form"); var storeName = frm.closest(".display-details").find(".js-store-name").text(); var storeDisplayName = frm.closest(".display-details").find(".js-store-displayName").text(); var storeId = frm.closest(".display-details").find(".js-store-id").text(); var stockLevel = frm.closest(".display-details").find(".js-store-stockLevel").text(); var stockLevelStatusCode = frm.closest(".display-details").find(".js-store-stockLevelStatusCode").text(); var specialLocation = frm.closest(".display-details").find(".js-store-specialLocation").text(); var isMainPreOrder = frm.closest(".display-details").find(".js-store-mainPreOrder").text(); var isMandatoryPreOrder = frm.closest(".display-details").find(".js-store-mandatoryPreOrder").text(); var encodedStoreName = storeName.replace(" ", "_"); var today = new Date(); var yearTimeSecs = 365 * 24 * 60 * 60; var nextYear = new Date(); nextYear.setTime(today.getTime() + yearTimeSecs * 1000); if (ACC.pickupinstore.siteId == "uk") { document.cookie = "ukStoreIdCookieVariable=" + storeId + ";max-age=" + yearTimeSecs + ";path=/"; document.cookie = "ukStoreNameCookieVariable=" + encodedStoreName + ";max-age=" + yearTimeSecs + ";path=/"; } else { document.cookie = "ieStoreIdCookieVariable=" + storeId + ";max-age=" + yearTimeSecs + ";path=/"; document.cookie = "ieStoreNameCookieVariable=" + encodedStoreName + ";max-age=" + yearTimeSecs + ";path=/"; }
            var isCart = false; var atCartPageValue = $(".searchPOSForm ").find("#atCartPage").val(); if (atCartPageValue == "true") { isCart = true; }
            if ($("#xaaLandingStores").val() == "true") { atCartPageValue = false; storeName = storeName; $(".errorSelectAnother").hide(); mainAndBundleHide(); emptyXboxDiv(); $(".defaultStore").show(); loadXboxConsoleForHDCC(storeName); $.colorbox.close(); $("#landingStoreName").val(storeName); $("#selectedClickAndCollectStoreName").val(storeDisplayName); $(".storeName").text(storeDisplayName); }
            if (storeName != undefined && storeName != "" && ($("#xaaLandingStores").val() != "true")) {
                $.ajax({
                    type: frm.attr("method"), url: frm.attr("action"), data: "storeIdPost=" + storeId + "&storeNamePost=" + storeName + "&stockLevel=" + stockLevel + "&stockLevelStatusCode=" + stockLevelStatusCode + "&isCart=" + isCart, cache: false, success: function (data) {
                        event.preventDefault(); var isPreOrder = PRE_ORDER === stockLevelStatusCode; var isOutOfStock = OUT_OF_STOCK === stockLevelStatusCode; var isLowStock = LOW_STOCK === stockLevelStatusCode; var isPayInstallment = $('#xaa-popin-info-add-to-cart').hasClass('payin-installments-active'); var currentActionDiv = ""; if (isPayInstallment) { currentActionDiv = $('#xaa-popin-info-add-to-cart'); $("#js-payin-addtocart").attr("disabled", isOutOfStock); $(".js-payInChangeDeliveryChannel").find("span[name=js-isNiLocation]").text(specialLocation); }
                        else { currentActionDiv = $('.js-addtocart-channal'); $(currentActionDiv).find("span[name=js-isNiLocation]").text(specialLocation); }
                        if (!$(currentActionDiv).find("#ccradiobutton").is(":checked")) {
                            if ($(currentActionDiv).find("#ccradiobutton").attr("data-label") == "inStore") { $(currentActionDiv).find("#addToCartButton").attr("disabled", "disabled"); }
                            $(currentActionDiv).find("#ccradiobutton").prop("checked", true); $(currentActionDiv).find("#js-homeDeliveryRadio").parents(".col-xs-6").removeClass("option-selected"); $(currentActionDiv).find("#js-homeDeliveryRadio").parents(".col-xs-6").addClass("option-not-selected"); $(currentActionDiv).find("#ccradiobutton").parents(".col-xs-6").removeClass("option-not-selected"); $(currentActionDiv).find("#ccradiobutton").parents(".col-xs-6").addClass("option-selected");
                        }
                        var clickNCollectSelected = ($(currentActionDiv).find("#ccradiobutton").attr("data-label") !== "inStore") && ($(currentActionDiv).find("#ccradiobutton").is(":checked")); $(currentActionDiv).find(".selectedClickAndCollectStore").text(storeDisplayName); $(currentActionDiv).find("#posStoreName").val(storeName); $(currentActionDiv).find(".isDefaultStoreSelected").text(""); if (!isPayInstallment) { deliveryMessages(isOutOfStock, isPreOrder, "clickAndCollect", specialLocation == "NI"); }
                        if ((typeof allBundleSubProductsSelected == "undefined" || allBundleSubProductsSelected) && clickNCollectSelected) { $(currentActionDiv).find("#addToCartButton").removeAttr("disabled", "disabled"); $(currentActionDiv).find("div.js-div-subproducts-success-msg").show(); setPreOrderOrNot(isPreOrder); }
                        if (isPreOrder) { $(currentActionDiv).find(".stockStatusMessage").find(".resultStock").text(""); } else if (isOutOfStock) { $(currentActionDiv).find(".stockStatusMessage").find(".resultStock").text(""); $(currentActionDiv).find(".stockStatusMessage").find(".resultStock").html(icon_out_of_stock + "" + data.stockStatusMessage); $(currentActionDiv).find("#addToCartButton").attr("disabled", "disabled"); } else if (isLowStock) { $(currentActionDiv).find(".stockStatusMessage").find(".resultStock").html(icon_lowstock + "" + data.stockStatusMessage); } else { $(currentActionDiv).find(".stockStatusMessage").find(".resultStock").html(icon_instock + "" + data.stockStatusMessage); }
                        if (!isOutOfStock && clickNCollectSelected) { $(currentActionDiv).find("#scrollButton").removeAttr("disabled"); }
                        $(currentActionDiv).find("#ccradiobutton").closest(".col-xs-6").find("span[name=js-stockStatusCode]").html(stockLevelStatusCode); $(currentActionDiv).find(".js-pickup-in-store-button").text("Change store"); var cartPageCheck = window.location.href; var cartPageSplit = cartPageCheck.split("/"); if (cartPageSplit[cartPageSplit.length - 1] != "cart") { $("#storeNameFrom").val(""); }
                        $(".selectedClickAndCollectStore").css("display", "block"); $(".hide-break").css("display", "block"); if (atCartPageValue == "true") { location.reload(); }
                        ACC.pickupinstore.setClickAndCollectData(currentActionDiv, storeId, storeName, isMainPreOrder, isMandatoryPreOrder); ACC.pickupinstore.setClickAndCollectData('.essential-box', storeId, storeName, isMainPreOrder, isMandatoryPreOrder); ACC.pickupinstore.setChannelToggle(); $.colorbox.close();
                    }, error: function () { }
                });
            } else { }
        });
    }, setClickAndCollectData: function (currentActionDiv, storeId, storeName, isMainPreOrder, isMandatoryPreOrder) { "use strict"; $(currentActionDiv).find("input[type=hidden][name=deliveryType]").val("clickAndCollect"); $(currentActionDiv).find("input[type=hidden][name=storeId]").val(storeId); $(currentActionDiv).find("input[type=hidden][name=storeName]").val(storeName); $(currentActionDiv).find("input[type=hidden][name=mainPreOrder]").val(isMainPreOrder); $(currentActionDiv).find("input[type=hidden][name=mandatoryPreOrder]").val(isMandatoryPreOrder); }, setHomeDeliveryData: function (storeId, storeName) { "use strict"; parent.$(".add_to_cart_form").find("input[type=hidden][name=deliveryType]").val("homeDelivery"); parent.$(".add_to_cart_form").find("input[type=hidden][name=storeId]").val(""); parent.$(".add_to_cart_form").find("input[type=hidden][name=storeName]").val(""); }, setHomeDeliveryType: function (ele) {
        "use strict"; if (ele.parents(".AddToCart-PickUpInStoreAction").length > 0 && ele.parents(".AddToCart-PickUpInStoreAction").next().find(".add_to_cart_form").length > 0) { ele.parents(".AddToCart-PickUpInStoreAction").next().find(".add_to_cart_form").find("input[type=hidden][name=deliveryType]").val("homeDelivery"); } else { $(".add_to_cart_form").find("input[type=hidden][name=deliveryType]").val("homeDelivery"); }
        if ($('.essential-box')) { $('.essential-box').find(".add_to_cart_form").each(function () { $(this).find("input[type=hidden][name=deliveryType]").val("homeDelivery"); }); }
    }, setClickAndCollecDeliveryType: function (ele) {
        "use strict"; if (ele.parents(".AddToCart-PickUpInStoreAction").length > 0 && ele.parents(".AddToCart-PickUpInStoreAction").next().find(".add_to_cart_form").length > 0) { ele.parents(".AddToCart-PickUpInStoreAction").next().find(".add_to_cart_form").find("input[type=hidden][name=deliveryType]").val("clickAndCollect"); } else { $(".add_to_cart_form").find("input[type=hidden][name=deliveryType]").val("clickAndCollect"); }
        if ($('.essential-box')) { $('.essential-box').find(".add_to_cart_form").each(function () { $(this).find("input[type=hidden][name=deliveryType]").val("clickAndCollect"); }); }
    }, isInStoreOnly: function () { "use strict"; if (($("#hdNotAvailable").val() == "true") && ($("#ccNotAvailableInStoreAvailable").val() == "true")) { ACC.product.hideAddToCartSelectThisStoreButton(); } }, isInStoreHDAvailable: function () { "use strict"; if (($("#hdNotAvailable").val() == "false") && ($("#ccNotAvailableInStoreAvailable").val() == "true")) { ACC.product.hideSelectThisStoreButton(); } }, setChannelToggle: function () { "use strict"; if (($("#cc-unavailable-only-preorder").val() == "true") && ($("#product-channel-name").html() !== "In Store")) { $("#product-channel-name").text($("#cc-unavailable-click-collect").val()); $("#ccInfoModal").css("display", ""); } }, getSelectedStore: function (ele) {
        "use strict"; var selectedDisplayStore = ele.parents(".js-changeDeliveryChannel").find(".selectedClickAndCollectStore").text(); var selectedStore = $("#posStoreName").val(); var noStoreSelectedText = $('.selectedClickAndCollectStoreName').data('noStoreSelectedText'); var noStoreSelectedForXaa = false; if (noStoreSelectedText && noStoreSelectedText === $('.selectedClickAndCollectStoreName').text()) { noStoreSelectedForXaa = true; }
        if (!noStoreSelectedForXaa && (selectedDisplayStore == "undefined" || selectedDisplayStore == "")) { selectedDisplayStore = ($(".selectedClickAndCollectStoreName").text()).trim(); selectedStore = $("#posStoreNameOnCart").val(); }
        if (selectedStore == undefined) { selectedStore = ""; }
        if ($(".isDefaultStoreSelected").html() != "true") { $("#colorbox input#locationForSearch").attr("value", selectedDisplayStore); }
        return selectedStore;
    }, findStore: function (value) {
        if (value.length > 3) {
            $.ajax({
                type: "POST", dataType: "json", data: { storeText: value }, url: ACC.config.encodedContextPath + "/store-pickup/getPlacesforString", success: function (responseData) {
                    if (responseData.results.length) {
                        var oResponse = { options: [] }; for (var i = 0; i < responseData.results.length; i++) { oResponse.options.push({ "description": responseData.results[i]["description"], "name": responseData.results[i]["name"], "type": responseData.results[i]["type"], "admino": responseData.results[i]["admino"], "admini": responseData.results[i]["admini"], "latitude": responseData.results[i]["latitude"], "longitude": responseData.results[i]["longitude"], "type": responseData.results[i]["type"] }); }
                        $('.ui-autocomplete li').each(function (i) { $(this).remove(); }); ACC.pickupinstore.onSuccessFindAddress(oResponse);
                    } else { ACC.pickupinstore.onFailureFindAddress(); }
                }, error: function () { ACC.pickupinstore.onFailureFindAddress(); }
            });
        }
        else {
            $('.ui-autocomplete li').each(function (i) { $(this).remove(); });
        }
    }, onSuccessFindAddress: function (oData) {
        var options = []; $.each(oData.options, function (index, option) { var latLong = option.latitude + "," + option.longitude; options.push({ label: option.description, value: latLong, location: latLong, type: option.type }); }); $("#locationForSearch").autocomplete({
            source: options, autoFocus: true, minLength: 0, classes: { "ui-autocomplete": "auto-suggestions" }, select: function (event, ui) { var latLongResult = ui.item.location.split(","); ui.item.value = ui.item.label; ACC.pickupinstore.locationSearchSubmit(ui.item.label, $("#atCartPage").val(), $("#entryNumber").val(), $("#pickupstore_location_search_button").parents("form").attr("action"), latLongResult[0], latLongResult[1], false, true, false); }, focus: function (event, ui) {
                var latLongResult = ui.item.value.split(","); ui.item.value = ui.item.label; $(".auto-suggestions").width($("#locationForSearch").width() + 24); var img = ""; setTimeout(function () {
                    $('.ui-autocomplete li').each(function (i) { $(this).find('img').remove(); if (options[i].type == 'stores') { img = $('<img />').attr({ 'id': 'smythstoys' + i, 'src': 'https://images.woosmap.com/icons/smythstoys.png', 'alt': 'smythstoys', 'title': 'smythstoys' }).prependTo($(this).find('.ui-menu-item-wrapper')); } });
                }, 20);
            }
        }); $("#locationForSearch").autocomplete("search", "");
    }, onFailureFindAddress: function () { console.log("Failed to get store results."); }
}; ACC.productDetail = {
    _autoload: ["initPageEvents", "bindVariantOptions"], checkQtySelector: function (self, mode) {
        var input = $(self).parents(".js-qty-selector").find(".js-qty-selector-input"); var inputVal = parseInt(input.val()); var max = input.data("max"); var minusBtn = $(self).parents(".js-qty-selector").find(".js-qty-selector-minus"); var plusBtn = $(self).parents(".js-qty-selector").find(".js-qty-selector-plus"); $(self).parents(".js-qty-selector").find(".btn").removeAttr("disabled"); if (mode == "minus") {
            if (inputVal != 1) {
                ACC.productDetail.updateQtyValue(self, inputVal - 1)
                if (inputVal - 1 == 1) { minusBtn.attr("disabled", "disabled") }
            } else { minusBtn.attr("disabled", "disabled") }
        } else if (mode == "reset") { ACC.productDetail.updateQtyValue(self, 1) } else if (mode == "plus") {
            if (max == "FORCE_IN_STOCK") { ACC.productDetail.updateQtyValue(self, inputVal + 1) } else if (inputVal <= max) {
                ACC.productDetail.updateQtyValue(self, inputVal + 1)
                if (inputVal + 1 == max) { plusBtn.attr("disabled", "disabled") }
            } else { plusBtn.attr("disabled", "disabled") }
        } else if (mode == "input") {
            if (inputVal == 1) { minusBtn.attr("disabled", "disabled") } else if (max == "FORCE_IN_STOCK" && inputVal > 0) { ACC.productDetail.updateQtyValue(self, inputVal) } else if (inputVal == max) { plusBtn.attr("disabled", "disabled") } else if (inputVal < 1) {
                ACC.productDetail.updateQtyValue(self, 1)
                minusBtn.attr("disabled", "disabled")
            } else if (inputVal > max) {
                ACC.productDetail.updateQtyValue(self, max)
                plusBtn.attr("disabled", "disabled")
            }
        } else if (mode == "focusout") { if (isNaN(inputVal)) { ACC.productDetail.updateQtyValue(self, 1); minusBtn.attr("disabled", "disabled"); } else if (inputVal >= max) { plusBtn.attr("disabled", "disabled"); } }
    }, updateQtyValue: function (self, value) { var input = $(self).parents(".js-qty-selector").find(".js-qty-selector-input"); var addtocartQty = $(self).parents(".addtocart-component").find("#addToCartForm").find(".js-qty-selector-input"); input.val(value); addtocartQty.val(value); }, initPageEvents: function () {
        $(document).on("click", '.js-qty-selector .js-qty-selector-minus', function () { ACC.productDetail.checkQtySelector(this, "minus"); })
        $(document).on("click", '.js-qty-selector .js-qty-selector-plus', function () { ACC.productDetail.checkQtySelector(this, "plus"); })
        $(document).on("keydown", '.js-qty-selector .js-qty-selector-input', function (e) {
            if (($(this).val() != " " && ((e.which >= 48 && e.which <= 57) || (e.which >= 96 && e.which <= 105))) || e.which == 8 || e.which == 46 || e.which == 37 || e.which == 39 || e.which == 9) { }
            else if (e.which == 38) { ACC.productDetail.checkQtySelector(this, "plus"); }
            else if (e.which == 40) { ACC.productDetail.checkQtySelector(this, "minus"); }
            else { e.preventDefault(); }
        })
        $(document).on("keyup", '.js-qty-selector .js-qty-selector-input', function (e) { ACC.productDetail.checkQtySelector(this, "input"); ACC.productDetail.updateQtyValue(this, $(this).val()); })
        $(document).on("focusout", '.js-qty-selector .js-qty-selector-input', function (e) { ACC.productDetail.checkQtySelector(this, "focusout"); ACC.productDetail.updateQtyValue(this, $(this).val()); })
        $("#Size").change(function () { changeOnVariantOptionSelection($("#Size option:selected")); }); $("#variant").change(function () { changeOnVariantOptionSelection($("#variant option:selected")); }); $(".selectPriority").change(function () { window.location.href = $(this[this.selectedIndex]).val(); }); function changeOnVariantOptionSelection(optionSelected) { window.location.href = optionSelected.attr('value'); }
    }, bindVariantOptions: function () { ACC.productDetail.bindCurrentStyle(); ACC.productDetail.bindCurrentSize(); ACC.productDetail.bindCurrentType(); }, bindCurrentStyle: function () { var currentStyle = $("#currentStyleValue").data("styleValue"); var styleSpan = $(".styleName"); if (currentStyle != null) { styleSpan.text(": " + currentStyle); } }, bindCurrentSize: function () { var currentSize = $("#currentSizeValue").data("sizeValue"); var sizeSpan = $(".sizeName"); if (currentSize != null) { sizeSpan.text(": " + currentSize); } }, bindCurrentType: function () { var currentSize = $("#currentTypeValue").data("typeValue"); var sizeSpan = $(".typeName"); if (currentSize != null) { sizeSpan.text(": " + currentSize); } }
}; ACC.refinements = {
    _autoload: [["bindMoreLessToggles", $(".js-facet-form").length != 0], ["bindMoreStoresToggles", $(".js-facet-form").length != 0], ["bindSearch", $(".js-facet-form").length != 0],], storeSearchData: {}, bindSearch: function () {
        $(document).on("submit", '#user_location_form', function (e) {
            e.preventDefault()
            var q = $(".js-shop-stores-facet .js-shop-store-search-input").val(); if (q.length > 0) { ACC.refinements.getInitStoreData(q); }
        })
    }, getInitStoreData: function (q) {
        $(".alert").remove(); data = { "q": "", "page": "0" }
        if (q != null) { data.q = q; }
        ACC.refinements.storeSearchData = data; ACC.refinements.getStoreData();
    }, getStoreData: function () { url = $(".js-facet-form").data("url"); $.ajax({ url: url, data: ACC.refinements.storeSearchData, type: "get", success: function (response) { window.location.reload(); } }); }, bindMoreLessToggles: function () {
        $(document).on("click", ".js-shop-stores-facet .js-facet-change-link", function (e) { e.preventDefault(); $(".js-shop-stores-facet .js-facet-container").hide(); $(".js-shop-stores-facet .js-facet-form").show(); })
        $(document).on("change", ".js-product-facet .js-facet-checkbox", function () { $(this).parents("form").submit(); })
        $(document).on("click", ".js-product-facet .js-more-facet-values-link", function (e) { e.preventDefault(); $(this).parents(".js-facet").find(".js-facet-top-values").hide(); $(this).parents(".js-facet").find(".js-facet-list-hidden").show(); $(this).parents(".js-facet").find(".js-more-facet-values").hide(); $(this).parents(".js-facet").find(".js-less-facet-values").show(); })
        $(document).on("click", ".js-product-facet .js-less-facet-values-link", function (e) { e.preventDefault(); $(this).parents(".js-facet").find(".js-facet-top-values").show(); $(this).parents(".js-facet").find(".js-facet-list-hidden").hide(); $(this).parents(".js-facet").find(".js-more-facet-values").show(); $(this).parents(".js-facet").find(".js-less-facet-values").hide(); })
    }, bindMoreStoresToggles: function () { $(document).on("click", ".js-shop-stores-facet .js-more-stores-facet-values", function (e) { e.preventDefault(); $(".js-shop-stores-facet ul.js-facet-list li.hidden").slice(0, 5).removeClass('hidden').first().find('.js-facet-checkbox').focus(); if ($(".js-shop-stores-facet ul.js-facet-list li.hidden").length == 0) { $(".js-shop-stores-facet .js-more-stores-facet-values").hide() } }) }
}; ACC.silentorderpost = {
    spinner: $("<img src='" + ACC.config.commonResourcePath + "/images/spinner.gif' />"), bindUseDeliveryAddress: function () {
        $('#useDeliveryAddress').on('change', function () {
            if ($('#useDeliveryAddress').is(":checked")) { var options = { 'countryIsoCode': $('#useDeliveryAddressData').data('countryisocode'), 'useDeliveryAddress': true }; ACC.silentorderpost.enableAddressForm(); ACC.silentorderpost.displayCreditCardAddressForm(options, ACC.silentorderpost.useDeliveryAddressSelected); ACC.silentorderpost.disableAddressForm(); }
            else { ACC.silentorderpost.clearAddressForm(); ACC.silentorderpost.enableAddressForm(); }
        }); if ($('#useDeliveryAddress').is(":checked")) { var options = { 'countryIsoCode': $('#useDeliveryAddressData').data('countryisocode'), 'useDeliveryAddress': true }; ACC.silentorderpost.enableAddressForm(); ACC.silentorderpost.displayCreditCardAddressForm(options, ACC.silentorderpost.useDeliveryAddressSelected); ACC.silentorderpost.disableAddressForm(); }
    }, bindSubmitSilentOrderPostForm: function () {
        $('.submit_silentOrderPostForm').click(function () { ACC.common.blockFormAndShowProcessingMessage($(this)); $('.billingAddressForm').filter(":hidden").remove(); ACC.silentorderpost.enableAddressForm(); $('#silentOrderPostForm').submit(); });
    }, bindCycleFocusEvent: function () {
        $('#lastInTheForm').blur(function () { $('#silentOrderPostForm [tabindex$="10"]').focus(); })
    }, isEmpty: function (obj) { if (typeof obj == 'undefined' || obj === null || obj === '') return true; return false; }, disableAddressForm: function () { $('input[id^="address\\."]').prop('disabled', true); $('select[id^="address\\."]').prop('disabled', true); }, enableAddressForm: function () { $('input[id^="address\\."]').prop('disabled', false); $('select[id^="address\\."]').prop('disabled', false); }, clearAddressForm: function () { $('input[id^="address\\."]').val(""); $('select[id^="address\\."]').val(""); }, useDeliveryAddressSelected: function () {
        if ($('#useDeliveryAddress').is(":checked")) { $('#address\\.country').val($('#useDeliveryAddressData').data('countryisocode')); ACC.silentorderpost.disableAddressForm(); }
        else { ACC.silentorderpost.clearAddressForm(); ACC.silentorderpost.enableAddressForm(); }
    }, bindCreditCardAddressForm: function () {
        $('#billingCountrySelector :input').on("change", function () { var countrySelection = $(this).val(); var options = { 'countryIsoCode': countrySelection, 'useDeliveryAddress': false }; ACC.silentorderpost.displayCreditCardAddressForm(options); })
    }, displayCreditCardAddressForm: function (options, callback) {
        $.ajax({
            url: ACC.config.encodedContextPath + '/checkout/multi/sop/billingaddressform', async: true, data: options, dataType: "html", beforeSend: function () { $('#billingAddressForm').html(ACC.silentorderpost.spinner); }
        }).done(function (data) {
            $("#billingAddressForm").html(data); if (typeof callback == 'function') { callback.call(); }
        });
    }
}
$(document).ready(function () {
    with (ACC.silentorderpost) {
        bindUseDeliveryAddress()
        bindSubmitSilentOrderPostForm(); bindCreditCardAddressForm();
    }
    $("#useDeliveryAddress").click();
}); ACC.storefinder = {
    _autoload: [["init", $(".js-store-finder").length != 0], ["bindStoreChange", $(".js-store-finder").length != 0], ["bindSearch", $(".js-store-finder").length != 0], "bindPagination", "bindStoreEvents", "bindAllStores", ["bindAllRegionStore", $("#regionListHead").length != 0], ["enableWoosMapAPI", $("#storeFinder").length != 0]], storeData: "", allStoreData: "", storeId: "", coords: {}, locationShareConsent: false, storeSearchData: {}, pageSize: 5, renderIndex: 1, hideAllStoreData: false, createListItemHtml: function (data, id, regionIndex) {
        var item = ""; item += '<li class="list__entry" id="store-filder-entry-list' + regionIndex + "_" + id + '">'; item += '<input type="radio" name="storeNamePost" value="' + data.displayName + '" id="store-filder-entry-' + regionIndex + "_" + id + '" class="js-store-finder-input" data-id="' + id + '">'; var hideSection = ""; if (hideAllStoreData != undefined && hideAllStoreData) { hideSection = 'style="display:none !important;"'; item += '<label for="store-filder-entry-' + regionIndex + "_" + id + '" class="js-select-store-label-region">'; } else { item += '<label for="store-filder-entry-' + regionIndex + "_" + id + '" class="js-select-store-label">'; }
        item += '<div class="entry__info address_width">'; item += '<p class="entry__name">' + data.displayName + '</p>'; item += '<p class="entry__address" ' + hideSection + '>' + data.line1 + '</p>'; item += '<p class="entry__address" ' + hideSection + '>' + data.line2 + '</p>'; if (data.line3 != undefined && data.line3 != "") { item += '<p class="entry__address" ' + hideSection + '>' + data.line3 + '</p>'; }
        item += '<p class="entry__city" ' + hideSection + '>' + data.town + '</p>'; item += '<p class="entry__line1 display-none">' + data.line1 + '</p>'; item += '<p class="entry__line2 display-none">' + data.line2 + '</p>'; if (data.line3 != undefined && data.line3 != "") { item += '<p class="entry__line3 display-none">' + data.line3 + '</p>'; }
        if (data.county != undefined && data.county != "") { item += '<span class="entry__city" ' + hideSection + '>' + data.county + '</span>'; }
        item += '<p class="entry__country display-none">' + data.country + '</p>'; item += '<p class="entry__postalCode" ' + hideSection + '>' + data.postalCode + '</p>'; item += '<p class="entry__storeContent display-none">' + data.storeContent + '</p>'; item += '<p class="entry__mapImageUrl display-none">' + data.mapImage + '</p>'; item += '</div>'; item += '<p class="entry__distance distance_width ' + hideSection + '">' + data.formattedDistance + '</p>'; item += '</label>'; item += '</li>'; return item;
    }, createAccordianListItemHtml: function (data, id, totalDataLength) {
        var regionName = data.regionName; var posData = data.regionPos; var item = ""; var posIndex = 0; var openClass = 'collapse'; var signClass = 'plus'; var borderClass = ''; if (totalDataLength == 1) { openClass = 'in'; signClass = 'minus'; borderClass = 'first-panel-border'; }
        item += "<div class='panel panel-default' data-panelindex='" + id + "'>"; item += " <div class='panel-heading " + borderClass + "'>"; item += " <h4 class='panel-title'> <a class='accordion-toggle' data-toggle='collapse' data-parent='#accordion_d' href='#panel_cate_d_" + id + "'><i class='glyphicon glyphicon-" + signClass + " font-30 pull-right'></i>" + regionName + "</a> </h4>"; item += "</div>"; item += " <div id='panel_cate_d_" + id + "' class='panel-collapse " + openClass + "'>"; item += "<div class='white_bg store_list'>"; item += "<ul>"; for (i = 0; i < posData.length; i++) { item += ACC.storefinder.createListItemHtml(posData[i], posIndex, id); posIndex += 1; }
        item += "</ul>"; item += "</div>"; item += "</div>"; item += "</div>"; return item;
    }, refreshNavigation: function () {
        var listitems = ""; data = ACC.storefinder.storeData
        if (data) {
            for (i = 0; i < data["data"].length; i++) { listitems += ACC.storefinder.createListItemHtml(data["data"][i], i, -1) }
            $(".js-store-finder-navigation-list").html(listitems); $(".js-store-finder-navigation-list").removeClass("js-allstore-finder-navigation-list"); $(".store__finder--navigation").removeClass("scroll-hide"); var firstInput = $(".js-store-finder-input")[0]; $(firstInput).click();
        }
        $(".store__finder--pagination").show(); var page = ACC.storefinder.storeSearchData.page; $(".js-store-finder-pager-item-from").html(page * ACC.storefinder.pageSize + 1); var to = ((page * ACC.storefinder.pageSize + ACC.storefinder.pageSize) > ACC.storefinder.storeData.total) ? ACC.storefinder.storeData.total : page * ACC.storefinder.pageSize + ACC.storefinder.pageSize; $(".js-store-finder-pager-item-to").html(to); $(".js-store-finder-pager-item-all").html(ACC.storefinder.storeData.total); $(".js-store-finder").removeClass("show-store"); $("#store-detail-div").addClass("store-list");
    }, refreshAllStoreNavigation: function () {
        var listitems = ""; data = ACC.storefinder.allStoreData
        if (data) {
            listitems += "<div class='filter_cat_desk'>"; listitems += "<div class='panel-group blue-facets-custom facets-rounded' id='accordion_d'>"; for (var regionIndex = 0; regionIndex < data["data"].length; regionIndex++) { listitems += ACC.storefinder.createAccordianListItemHtml(data["data"][regionIndex], regionIndex, data["data"].length) }
            listitems += "</div></div>"; $(".js-store-finder-navigation-list").addClass("js-allstore-finder-navigation-list"); $(".store__finder--navigation").addClass("scroll-hide"); $(".js-store-finder-navigation-list").html(listitems); var selectIds = $('#accordion_d .panel-collapse'); selectIds.on('show.bs.collapse hidden.bs.collapse', function () { $(this).prev().find('.glyphicon').toggleClass('glyphicon-plus glyphicon-minus'); if (win.width() >= 768) { repositionScrollingSidebar(); } }); if (win.width() >= 768) { repositionScrollingSidebar(); }
        }
        $(".store__finder--pagination").hide();
    }, enableWoosMapAPI: function () {
        "use strict"; var storeLocatorConfig = { "theme": { "primary_color": ACC.config.themePrimaryColor }, "datasource": { "api_key": ACC.config.woosMapPublicKey, "max_responses": parseInt(ACC.config.woosMapMaxResponses, 10), "max_distance": parseInt(ACC.config.woosMapMaxDistance, 10), "use_distance_matrix": ACC.config.woosMapUseDistanceMatrix.toLowerCase() == "true" ? true : false }, "recommendation": { "useRecommendation": ACC.config.woosMapUseRecommendation.toLowerCase() == "true" ? true : false, "contribute": ACC.config.woosMapContribute.toLowerCase() == "true" ? true : false }, "internationalization": { "lang": ACC.config.woosmapLanguage, "period": ACC.config.woosmapPeriod, "unitSystem": parseInt(ACC.config.woosMapUnitSystem, 10) }, "maps": { "api_key": ACC.config.googleKey, "localities": { "language": ACC.config.woosmapLanguage, "componentRestrictions": { "country": [ACC.config.woosmapListOfCountries] } }, "places": { "types": ["geocode"], "componentRestrictions": { "country": [ACC.config.woosmapListOfCountries] } } }, "woosmapview": { "baseMapStyle": [{}], "initialCenter": { "lat": parseFloat(ACC.config.initialCenterLat, 51.5074), "lng": parseFloat(ACC.config.initialCenterLong, 0.1278) }, "initialZoom": parseInt(ACC.config.initialZoom, 6), "tileStyle": { "color": ACC.config.topLevelDotMarkerColor, "size": parseInt(ACC.config.tileStyleSize, 15), "minSize": parseInt(ACC.config.tileStyleMinSize, 11) }, "breakPoint": parseInt(ACC.config.breakPoint, 10), "style": { "default": { "icon": { "url": ACC.config.woosMapDefaultIconUrl, "scaledSize": { width: 32, height: 32 } }, "selectedIcon": { "url": ACC.config.woosMapSelectedIconUrl, "scaledSize": { width: 38, height: 38 } } } } } }; if (ACC.config.woosMapActive !== null && ACC.config.woosMapActive) {
            var myStoreLocator = new WebApp("store-locator", storeLocatorConfig.datasource.api_key); var isMobile = document.querySelector("body").clientWidth < 900; myStoreLocator.setConf(storeLocatorConfig); var getFullStoreRenderer = function (store) {
                var fullStoreHTML = ""; fullStoreHTML += "<div style='width:100%;'><div><noscript></noscript><noscript></noscript><div style='padding:6px;cursor:initial;background-color:#ffffff;'><div style='display:table;width:100%;table-layout:fixed;overflow-x:hidden;'><div style='display:table-cell;vertical-align:top;width:28px;'><svg style='display:inline-block;height:24px;width:24px;user-select:none;transition:all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;float:left;padding:0px;fill:#1f96f4;' viewBox='0 0 24 24'><path d='M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z'></path></svg></div><div style='min-height:24px;line-height:20px;margin-left:13px;'><div><div style='color:black;'><div>"; var address = store.properties.address.lines; for (var addressLines = 0; addressLines < address.length; addressLines++) { if (address[addressLines] != null && address[addressLines] != undefined) { fullStoreHTML += "<div>" + address[addressLines] + "</div>"; } }
                fullStoreHTML += "<div>"; fullStoreHTML += "<span>" + store.properties.address.zipcode + "</span>"; fullStoreHTML += "<span> </span>"; fullStoreHTML += "<span>" + store.properties.address.city + "</span>"; fullStoreHTML += "</div></div></div>"; fullStoreHTML += "<div style='color:rgba(0, 0, 0, 0.54);'><div>"; var roundOffDistance = parseFloat(store.properties.distance / 1000).toFixed(1); fullStoreHTML += "<b>" + roundOffDistance + " km" + "</b>"; fullStoreHTML += "</div></div>"; fullStoreHTML += "</div></div></div></div>"; if (store.properties.user_properties.content != null && store.properties.user_properties.content != undefined) { fullStoreHTML += "<div style='padding:6px;padding-left:8px;cursor:initial;background-color:#ffffff;'><div style='display:table;width:100%;table-layout:fixed;overflow-x:hidden;'><div style='display:table-cell;vertical-align:top;width:28px;' ><svg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 220 220'><defs><style>.cls-1{fill:#1d96f4;}</style></defs><title>Artboard 6</title><path id='info-circle-regular' class='cls-1' d='M80.76,0a80.77,80.77,0,1,0,80.77,80.76A80.76,80.76,0,0,0,80.76,0Zm0,145.9a65.1,65.1,0,1,1,.07,0Zm0-110.07A13.68,13.68,0,1,1,67.09,49.5,13.67,13.67,0,0,1,80.76,35.83ZM99,118.55a3.91,3.91,0,0,1-3.91,3.9H66.43a3.91,3.91,0,0,1-3.9-3.9v-7.82a3.91,3.91,0,0,1,3.9-3.91h3.91V86H66.43a3.9,3.9,0,0,1-3.9-3.9V74.25a3.9,3.9,0,0,1,3.9-3.9H87.24a3.9,3.9,0,0,1,3.91,3.9v32.6h3.9A3.91,3.91,0,0,1,99,110.76Z'/></svg></div><div style='min-height:24px;line-height:20px;margin-left:13px;'><div><div style='color:black;'><div>"; fullStoreHTML += "<div style='color: black;font-family: 'UniformRnd-Bold', Arial, sans-serif;font-size: 15px;'><b>" + store.properties.user_properties.content + "</b></div>"; fullStoreHTML += "</div></div></div></div></div></div>"; }
                var openingHours = store.properties.weekly_opening; if (openingHours != null && openingHours != undefined) {
                    var openingDetails = store.properties.open; fullStoreHTML += "<div style='padding:6px;cursor:initial;background-color:#ffffff;'><div style='display:table;width:100%;table-layout:fixed;overflow-x:hidden;'><div style='display:table-cell;vertical-align:top;width:28px;'><svg style='display:inline-block;height:24px;width:24px;user-select:none;transition:all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;float:left;padding:0px;fill:#1f96f4;' viewBox='0 0 24 24' data-reactid='.0.1.0.0.0.1.0.0.0.3.0.0.0'><path d='M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z' data-reactid='.0.1.0.0.0.1.0.0.0.3.0.0.0.0'></path></svg></div><div style='min-height:24px;line-height:20px;margin-left:13px;'><div><div style='color:black;'><table><tbody>"; var weekdayNames = ACC.config.weekdaysList.split(", "); for (var i = 1; i < 8; i++) {
                        console.log(openingDetails.open_now + " " + openingDetails.week_day); if (openingDetails.week_day == i) { console.log("inside" + openingDetails.open_now + " " + openingDetails.week_day); if (openingDetails.open_now) { fullStoreHTML += "<tr style='color:#388e3c;'>"; } else { fullStoreHTML += "<tr style='color:#d32f2f;'>"; } } else { fullStoreHTML += "<tr>"; }
                        fullStoreHTML += "<td style='vertical-align:inherit;width:90px;'>" + weekdayNames[i - 1] + "</td><td style='width:150px;'>"; if ((openingHours[i].hours.length == 0)) { fullStoreHTML += "<div>" + "Closed" + "</div></td></tr>"; } else { fullStoreHTML += "<div>" + openingHours[i].hours[0].start + " - " + openingHours[i].hours[0].end + "</div></td></tr>"; }
                    }
                    fullStoreHTML += "</tbody></table></div><div style='color:rgba(0, 0, 0, 0.54);'></div></div></div></div></div>";
                }
                fullStoreHTML += "</div></div>"; return fullStoreHTML;
            }
            myStoreLocator.setFullStoreRenderer(function (store) {
                var myCustomContent = document.createElement('div'); myCustomContent.id = "myCustomContentID"
                var html = []; html.push(getFullStoreRenderer(store)); myCustomContent.innerHTML = html.join(""); return myCustomContent;
            }); myStoreLocator.render(isMobile); if (isMobile) { setTimeout(function () { var i = $(".woosmap-webapp-container").find("div").next()[0]; var child1 = i.firstElementChild; var childDiv = child1.firstElementChild; $(childDiv).addClass("woos-map-search-sec"); ACC.storefinder.createClickEventForWoosmap(); }, parseInt(ACC.config.delayForTransition, 10)); }
        }
    }, createClickEventForWoosmap: function () { $(".woosmap-webapp-container").on("click", function (e) { e.preventDefault(); $('html, body').animate({ scrollTop: $("#focusMapView").offset().top }, "fast"); }); $('body').on('click touchstart', 'img[src="/_ui/responsive/common/images/store-icon.svg"]', function (e) { $('html, body').animate({ scrollTop: $("#focusMapView").offset().top }, "fast"); }); }, createToggleForWoosmap: function () { $(".woos-map-navigate-sec").on("click", function (e) { e.preventDefault(); $(".woos-map-search-sec").toggle(); }) }, bindPagination: function () { $(document).on("click", ".js-store-finder-details-back", function (e) { e.preventDefault(); $(".js-store-finder").removeClass("show-store"); $("#storeFinder .storetopSection").removeClass("store-list"); $("#storeFinder .storeleftSection").removeClass("store-list"); $("#store-detail-div").addClass("store-list"); $("#storeFinder .rightSection").addClass("hidden-sm hidden-xs"); }) }, bindStoreChange: function () {
        $(document).on("click", ".js-store-finder-input", function (e) {
            e.preventDefault(); ACC.storefinder.makeCurrentStoreElementActive($(this)); if ($(this).closest(".js-store-finder-navigation-list").hasClass("js-allstore-finder-navigation-list")) { regionIndex = $(this).closest(".panel").data("panelindex"); storeData = ACC.storefinder.allStoreData["data"][regionIndex].regionPos; } else { storeData = ACC.storefinder.storeData["data"]; }
            var storeId = $(this).data("id"); var $ele = $(".js-store-finder-details"); $.each(storeData[storeId], function (key, value) {
                if (key == "image") { if (value != "") { $ele.find(".js-store-image").html('<img src="' + value + '" alt="" />'); } else { $ele.find(".js-store-image").html(''); } } else if (key == "productcode") { $ele.find(".js-store-productcode").val(value); }
                else if (key == "openings") { if (value != "") { var $oele = $ele.find(".js-store-" + key); var openings = ""; $.each(value, function (key2, value2) { openings += "<div class='clearfix'>"; openings += "<span class='pull-left'><strong>" + key2 + "</strong></span>"; openings += "<span class='pull-right font-regular'>" + value2 + "</span>"; openings += "</div>"; }); $oele.html(openings); } else { $ele.find(".js-store-" + key).html(''); } }
                else if (key == "specialOpenings") {
                    if (value != "") { $ele.find(".js-special-timings").removeClass("hidden"); $ele.find(".js-special-timings").addClass("visible"); var $oele = $ele.find(".js-store-" + key); var specialOpenings = ""; $.each(value, function (key2, value2) { specialOpenings += "<div class='clearfix'>"; specialOpenings += "<span class='pull-left'><strong>" + key2 + "</strong></span>"; specialOpenings += "<span class='pull-right font-regular'>" + value2 + "</span>"; specialOpenings += "</div>"; }); $oele.html(specialOpenings); }
                    else { $ele.find(".js-store-" + key).html(''); $ele.find(".js-special-timings").addClass("hidden"); $ele.find(".js-special-timings").removeClass("visible"); }
                }
                else if (key == "features") {
                    var features = ""; $.each(value, function (key2, value2) { if (value2 != "") { features += "<li>" + value2 + "</li>"; } }); if (features != "") { $ele.find(".store-features-section").addClass("visible"); $ele.find(".store-features-section").removeClass("hidden"); $ele.find(".js-store-" + key).html(features); }
                    else { $ele.find(".store-features-section").addClass("hidden"); $ele.find(".store-features-section").removeClass("visible"); }
                }
                else if (key == "mapImage") { if (value != "") { var mapHTML = "<div class='store__finder--map-content'>"; mapHTML += "<img src='" + value + "' alt='' />"; mapHTML += "</div>"; $ele.find(".js-store-finder-map").html(mapHTML); } else { $ele.find(".js-store-finder-map").html(''); } }
                else if (key == "events") {
                    var events = ""; if (value.length > 0) { $ele.find(".store-events-link").show(); }
                    else { $ele.find(".store-events-link").hide(); }
                }
                else if (key == "storeMapUrl") { if (value != "") { $ele.find(".js-store-" + key).attr("href", value); $ele.find(".js-store-" + key).closest(".row").removeClass("hide"); } else { $ele.find(".js-store-" + key).closest(".row").addClass("hide"); } }
                else { if (value != "") { $ele.find(".js-store-" + key).html(value); } else { $ele.find(".js-store-" + key).html(''); } }
            })
            $(".js-store-finder.rightSection").show(); ACC.storefinder.storeId = storeData[storeId]; $(".country-image").hide(); $(".region-image").hide();
        })
        $(document).on("click", ".js-select-store-label", function (e) { $(".js-store-finder").addClass("show-store"); $('body').addClass("storeEvent-heading"); $("#storeFinder .storetopSection").addClass("store-list"); $("#store-detail-div").removeClass("store-list"); $("#storeFinder .rightSection").removeClass("hidden-sm hidden-xs"); current_elemennt_id = $(this).parent('.list__entry').attr('id'); $('html, body').animate({ scrollTop: $("#storeFinder").offset().top }, "fast"); })
        $(document).on("click", ".js-select-store-label-region", function (e) { $(".js-store-finder").addClass("show-store"); $('body').addClass("storeEvent-heading"); $("#storeFinder .storetopSection").addClass("store-list"); $("#store-detail-div").removeClass("store-list"); $("#storeFinder .rightSection").removeClass("hidden-sm hidden-xs"); $("#regionListHead .rightSection").removeClass("hidden-sm hidden-xs"); current_elemennt_id = $(this).parent('.list__entry').attr('id'); $('html, body').animate({ scrollTop: $("#regionListHead").offset().top }, "fast"); })
        $(document).on("click", ".js-back-to-storelist", function (e) { $(".js-store-finder").removeClass("show-store"); $('body').removeClass("storeEvent-heading"); $("#storeFinder .storetopSection").removeClass("store-list"); $("#storeFinder .storeleftSection").removeClass("store-list"); $("#store-detail-div").addClass("store-list"); $("#storeFinder .rightSection").addClass("hidden-sm hidden-xs"); $("#regionListHead .rightSection").addClass("hidden-sm hidden-xs"); $('html, body').animate({ scrollTop: $('#' + current_elemennt_id).offset().top }, "fast"); })
    }, bindAllStores: function () { $(document).on("click", "#storeFinder .filter_cat_desk .panel-heading", function (e) { if ($(this).closest(".js-store-finder-navigation-list").hasClass("js-allstore-finder-navigation-list")) { regionIndex = $(this).closest(".panel").data("panelindex"); var regionImage = ACC.storefinder.allStoreData["data"][regionIndex].regionImage; $(".region-image").html("<img src='" + regionImage + "'/>"); $(".js-store-finder.rightSection").hide(); $(".country-image").hide(); $(".region-image").show(); } }); }, bindAllRegionStore: function () { $.ajax({ url: ACC.config.encodedContextPath + "/store-finder/getAllStores", type: "get", success: function (response) { try { hideAllStoreData = true; ACC.storefinder.allStoreData = $.parseJSON(response); ACC.storefinder.refreshAllStoreNavigation(); $(".js-store-finder").show(); $(".country-image").html("<img src='" + ACC.storefinder.allStoreData.countryImage + "'/>"); $(".country-image").show(); $(".region-image").hide(); $(".js-store-finder.rightSection").hide(); } catch (e) { console.log("in catch of ajax"); } }, error: function (request, status, error) { console.log("in error of ajax"); } }); }, initGoogleMap: function () { if ($(".js-store-finder-map").length > 0) { } }, loadGoogleMap: function () {
        storeInformation = ACC.storefinder.storeId; if ($(".js-store-finder-map").length > 0) {
            $(".js-store-finder-map").attr("id", "store-finder-map")
            var centerPoint = new google.maps.LatLng(storeInformation["latitude"], storeInformation["longitude"]); var mapOptions = { zoom: 13, zoomControl: true, panControl: true, streetViewControl: false, mapTypeId: google.maps.MapTypeId.ROADMAP, center: centerPoint }
            var map = new google.maps.Map(document.getElementById("store-finder-map"), mapOptions); var marker = new google.maps.Marker({ position: new google.maps.LatLng(storeInformation["latitude"], storeInformation["longitude"]), map: map, title: storeInformation["name"], icon: "https://maps.google.com/mapfiles/marker" + 'A' + ".png" }); var infowindow = new google.maps.InfoWindow({ content: storeInformation["name"], disableAutoPan: true }); google.maps.event.addListener(marker, 'click', function () { infowindow.open(map, marker); });
        }
    }, bindSearch: function () {
        $(document).on("submit", '#storeFinderForm', function (e) {
            locationKnown = false; e.preventDefault()
            var q = $(".js-store-finder-search-input").val(); if (q.length > 0) { ACC.storefinder.getInitStoreData(q); } else { ACC.storefinder.hideStoreFinderDetails(); }
        })
        $(".js-store-finder").hide();
    }, bindStoreEvents: function () {
        $(document).on("click", '#storeFinder .store-events-link', function (e) {
            e.preventDefault(); var selectedStore = $(".js-store-finder-input.active"); var $boxContent = $("#storefinderEventModal"); if ($(".js-store-finder-navigation-list").hasClass("js-allstore-finder-navigation-list")) { regionIndex = selectedStore.closest(".panel").data("panelindex"); storeData = ACC.storefinder.allStoreData["data"][regionIndex].regionPos; } else { storeData = ACC.storefinder.storeData["data"]; }
            var storeId = selectedStore.data("id"); var storeName = ""; $.each(storeData[storeId], function (key, value) {
                if (key == "displayName") { storeName = value; }
                else if (key == "events") { var eventsRows = ""; $.each(value, function (eventKey, event) { var eventsRow = ""; eventsRow += "<tr class='text-left store-event-row'>"; eventsRow += "<td><p class='event-time'>" + event.eventTime + "<br>" + event.eventDate + "</p></td>"; eventsRow += "<td><p class='event-name'><a href='" + event.eventUrl + "' class='txt_undr'>" + event.eventName + "</a></p></td>"; eventsRow += "</tr>"; eventsRows += eventsRow; }); $boxContent.find(".js-store-event-rows").html(eventsRows); }
            }); $boxContent.find(".store-name").html("<h4>" + storeName + "</h4>");
        });
    }, getStoreData: function (page) {
        ACC.storefinder.storeSearchData.page = page; url = $(".js-store-finder").data("url"); $.ajax({
            url: url, data: ACC.storefinder.storeSearchData, type: "get", success: function (response) {
                try {
                    hideAllStoreData = false; ACC.storefinder.storeData = $.parseJSON(response); ACC.storefinder.refreshNavigation(); if (ACC.storefinder.storeData.total < ACC.storefinder.pageSize) { ACC.storefinder.disableButton("js-store-finder-pager-next"); }
                    $("#storeFinder .js-store-finder").show(); $("#storeFinder .rightSection").addClass("hidden-sm hidden-xs");
                } catch (e) { ACC.storefinder.hideStoreFinderDetails(); console.log(e); }
            }
        });
    }, getInitStoreData: function (q, latitude, longitude) {
        $(".alert").remove(); data = { "q": "", "page": 0 }
        if (q != null) { data.q = q; }
        if (latitude != null) { data.latitude = latitude; }
        if (longitude != null) { data.longitude = longitude; }
        ACC.storefinder.storeSearchData = data; ACC.storefinder.getStoreData(data.page); $(".js-store-finder").show();
    }, searchWithoutLocation: function () { if (locationKnown) { locationKnown = false; $("#findStoresNearMe").removeClass("hide"); $("#storeFinder .all_stores_btn").addClass("hide"); $("#storeFinder .all_stores_btn").click(); } }, init: function () {
        $(document).on("click", "#storeFinder .all_stores_btn", function (e) { e.preventDefault(); ACC.storefinder.storeSearchData.page = page; url = $(".all_stores_btn").data("url"); $.ajax({ url: url, type: "get", success: function (response) { try { hideAllStoreData = false; ACC.storefinder.allStoreData = $.parseJSON(response); ACC.storefinder.refreshAllStoreNavigation(); $(".js-store-finder").show(); $(".country-image").html("<img src='" + ACC.storefinder.allStoreData.countryImage + "'/>"); $(".country-image").show(); $(".region-image").hide(); $(".js-store-finder.rightSection").hide(); $("#storeFinder .all_stores_btn").addClass("hide"); $('#storeFinder #findStoresNearMe').removeClass("hide"); } catch (e) { console.log("in catch of ajax"); } }, error: function (request, status, error) { console.log("in error of ajax"); } }); }); $(document).on("click", '#storeFinder #findStoresNearMe', function (e) {
            e.preventDefault()
            if (!ACC.storefinder.locationShareConsent) {
                if ($(".js-storefinder-alert").length < 1) {
                    var errorMessage = $("#storeFinder #findStoresNearMe").data("nolocationconsent")
                    $("#storeFinder").before('<div class="js-storefinder-alert alert alert-danger alert-dismissable" ><button class="close" type="button" data-dismiss="alert" aria-hidden="true">×</button>' + errorMessage + '</div>');
                }
                return;
            }
            ACC.storefinder.getInitStoreData(null, ACC.storefinder.coords.latitude, ACC.storefinder.coords.longitude); $('#findStoresNearMe').addClass("hide"); $("#storeFinder .all_stores_btn").removeClass("hide");
        })
        locationKnown = true; var locationCookie; try { locationCookie = document.cookie.split("locationCookie")[1].split("; ")[0].substr(1); } catch (error) { locationCookie = "_" }
        if (locationCookie != null && locationCookie != "_") { var loc = locationCookie.split('_'); var lat = loc[0]; var lan = loc[1]; ACC.storefinder.coords = { latitude: lat, longitude: lan }; ACC.storefinder.locationShareConsent = true; $('#findStoresNearMe').addClass("hide"); $("#storeFinder .all_stores_btn").removeClass("hide"); $("#storeFinder #findStoresNearMe").click(); locationKnown = false; } else { ACC.storefinder.searchWithoutLocation() }
    }, disableButton: function (buttonClass) {
        $("." + buttonClass).attr("disabled", "disabled")
        $("." + buttonClass).attr("opacity", "0.5");
    }, enableButton: function (buttonClass) {
        $("." + buttonClass).removeAttr("disabled")
        $("." + buttonClass).attr("opacity", "1");
    }, hideStoreFinderDetails: function () {
        if ($(".js-storefinder-alert").length < 1) {
            var emptySearchMessage = $(".store_loc_icon").data("searchEmpty")
            $(".js-store-finder").hide(); $("#storeFinder").before('<div class="js-storefinder-alert alert alert-danger alert-dismissable" ><button class="close" type="button" data-dismiss="alert" aria-hidden="true">×</button>' + emptySearchMessage + '</div>');
        }
    }, makeCurrentStoreElementActive: function (element) { if (ACC.storefinder.renderIndex != 1 || ($(window).width() > 768)) { $('.js-store-finder-input').each(function (index, ele) { if ($(this).attr("id") == element.attr("id")) { $(this).addClass("active"); $(this).parent().addClass("active"); } else { $(this).removeClass("active"); $(this).parent().removeClass("active"); } }); } else { ACC.storefinder.renderIndex = ACC.storefinder.renderIndex + 1; } }
}; ACC.storeeventfinder = {
    _autoload: [["init", $(".js-store-event-finder").length != 0], ["bindStoreChange", $(".js-store-event-finder").length != 0], ["bindSearch", $(".js-store-event-finder").length != 0], "bindAllStores"], storeData: "", allStoreData: "", storeId: "", coords: {}, locationShareConsent: false, storeSearchData: {}, pageSize: 5, renderIndex: 1, createListItemHtml: function (data, id, regionIndex) { var item = ""; item += '<li class="list__entry" id="store-filder-entry-list' + regionIndex + "_" + id + '">'; item += '<input type="radio" name="storeNamePost" value="' + data.displayName + '" id="store-filder-entry-' + regionIndex + "_" + id + '" class="js-store-event-finder-input" data-id="' + id + '">'; item += '<label for="store-filder-entry-' + regionIndex + "_" + id + '" class="js-select-store-label">'; item += '<div class="entry__info">'; item += '<p class="entry__name">' + data.displayName + '</p>'; item += '<p class="entry__address">' + data.line1 + ' ' + data.line2 + '</p>'; item += '<p class="entry__city">' + data.town + '</p>'; item += '<p class="entry__line1 display-none">' + data.line1 + '</p>'; item += '<p class="entry__line2 display-none">' + data.line2 + '</p>'; item += '<p class="entry__country display-none">' + data.country + '</p>'; item += '<p class="entry__postalCode display-none">' + data.postalCode + '</p>'; item += '<p class="entry__storeContent display-none">' + data.storeContent + '</p>'; item += '<p class="entry__mapImageUrl display-none">' + data.mapImage + '</p>'; item += '</div>'; item += '<p class="entry__distance">' + data.formattedDistance + '</p>'; item += '</label>'; item += '</li>'; return item; }, createAccordianListItemHtml: function (data, id, totalDataLength) {
        var regionName = data.regionName; var posData = data.regionPos; var item = ""; var posIndex = 0; var openClass = 'collapse'; var signClass = 'plus'; var borderClass = ''; if (totalDataLength == 1) { openClass = 'in'; signClass = 'minus'; borderClass = 'first-panel-border'; }
        item += "<div class='panel panel-default' data-panelindex='" + id + "'>"; item += " <div class='panel-heading " + borderClass + "'>"; item += " <h4 class='panel-title'> <a class='accordion-toggle' data-toggle='collapse' data-parent='#accordion_d' href='#panel_cate_d_" + id + "'><i class='glyphicon font-30 glyphicon-" + signClass + " pull-right'></i>" + regionName + "</a> </h4>"; item += "</div>"; item += " <div id='panel_cate_d_" + id + "' class='panel-collapse " + openClass + "'>"; item += "<div class='white_bg store_list'>"; item += "<ul>"; for (i = 0; i < posData.length; i++) { item += ACC.storeeventfinder.createListItemHtml(posData[i], posIndex, id); posIndex += 1; }
        item += "</ul>"; item += "</div>"; item += "</div>"; item += "</div>"; return item;
    }, refreshNavigation: function () {
        var listitems = ""; data = ACC.storeeventfinder.storeData
        if (data) {
            for (i = 0; i < data["data"].length; i++) { listitems += ACC.storeeventfinder.createListItemHtml(data["data"][i], i, -1) }
            $(".js-store-event-finder-navigation-list").html(listitems); $(".js-store-event-finder-navigation-list").removeClass("js-allstore-finder-navigation-list"); $(".store__finder--navigation").removeClass("scroll-hide"); var firstInput = $(".js-store-event-finder-input")[0]; $(firstInput).click(); $("#store-event-detail-div").addClass("store-list");
        }
        $(".store__finder--pagination").show(); var page = ACC.storeeventfinder.storeSearchData.page; $(".js-store-event-finder-pager-item-from").html(page * ACC.storeeventfinder.pageSize + 1); var to = ((page * ACC.storeeventfinder.pageSize + ACC.storeeventfinder.pageSize) > ACC.storeeventfinder.storeData.total) ? ACC.storeeventfinder.storeData.total : page * ACC.storeeventfinder.pageSize + ACC.storeeventfinder.pageSize; $(".js-store-event-finder-pager-item-to").html(to); $(".js-store-event-finder-pager-item-all").html(ACC.storeeventfinder.storeData.total); $(".js-store-event-finder").removeClass("show-store");
    }, refreshAllStoreNavigation: function () {
        var listitems = ""; data = ACC.storeeventfinder.allStoreData
        if (data) {
            listitems += "<div class='filter_cat_desk'>"; listitems += "<div class='panel-group blue-facets-custom facets-rounded' id='accordion_d'>"; for (var regionIndex = 0; regionIndex < data["data"].length; regionIndex++) { listitems += ACC.storeeventfinder.createAccordianListItemHtml(data["data"][regionIndex], regionIndex, data["data"].length) }
            listitems += "</div></div>"; $(".js-store-event-finder-navigation-list").addClass("js-allstore-finder-navigation-list"); $(".store__finder--navigation").addClass("scroll-hide"); $(".js-store-event-finder-navigation-list").html(listitems); var selectIds = $('#accordion_d .panel-collapse'); selectIds.on('show.bs.collapse hidden.bs.collapse', function () { $(this).prev().find('.glyphicon').toggleClass('glyphicon-plus glyphicon-minus'); if (win.width() >= 768) { repositionScrollingSidebar(); } }); if (win.width() >= 768) { repositionScrollingSidebar(); }
        }
        $(".store__finder--pagination").hide();
    }, bindStoreChange: function () {
        $(document).on("click", ".js-store-event-finder-input", function (e) {
            e.preventDefault(); ACC.storeeventfinder.makeCurrentStoreElementActive($(this)); if ($(this).closest(".js-store-event-finder-navigation-list").hasClass("js-allstore-finder-navigation-list")) { regionIndex = $(this).closest(".panel").data("panelindex"); storeData = ACC.storeeventfinder.allStoreData["data"][regionIndex].regionPos; } else { storeData = ACC.storeeventfinder.storeData["data"]; }
            var storeId = $(this).data("id"); var $ele = $(".js-store-event-finder-details"); $.each(storeData[storeId], function (key, value) {
                if (key == "image") { if (value != "") { $ele.find(".js-store-image").html('<img src="' + value + '" alt="" />'); } else { $ele.find(".js-store-image").html(''); } } else if (key == "productcode") { $ele.find(".js-store-productcode").val(value); }
                else if (key == "mapImage") { if (value != "") { var mapHTML = "<div class='store__finder--map-content'>"; mapHTML += "<img src='" + value + "' alt='' />"; mapHTML += "</div>"; $ele.find(".js-store-event-finder-map").html(mapHTML); } else { $ele.find(".js-store-event-finder-map").html(''); } }
                else if (key == "events") {
                    if (value.length > 0) { $ele.find(".js-store-event-details").html(ACC.storeeventfinder.getStoreEventsHTML(storeData, storeId)); }
                    else { $ele.find(".js-store-event-details").html("<div class='col-xs-12'><p> Currently No Events for this store!!</p></div>"); }
                }
                else { if (value != "") { $ele.find(".js-store-" + key).html(value); } else { $ele.find(".js-store-" + key).html(''); } }
            })
            $(".js-store-event-finder.rightSection").show(); ACC.storeeventfinder.storeId = storeData[storeId]; $(".country-image").hide(); $(".region-image").hide();
        })
        $(document).on("click", ".js-select-store-label", function (e) {
            $(".js-store-event-finder").addClass("show-store")
            $('body').addClass("storeEvent-heading"); $("#storeEventFinder .storetopSection").addClass("store-list"); $("#store-event-detail-div").removeClass("store-list"); $("#storeEventFinder .rightSection").removeClass("hidden-sm hidden-xs"); current_elemennt_id = $(this).parent('.list__entry').attr('id'); $('html, body').animate({ scrollTop: $("#storeEventFinder").offset().top }, 'fast');
        })
        $(document).on("click", ".js-back-to-storelist", function (e) { $(".js-store-event-finder").removeClass("show-store"); $('body').removeClass("storeEvent-heading"); $("#storeEventFinder .storetopSection").removeClass("store-list"); $("#store-event-detail-div").addClass("store-list"); $("#storeEventFinder .rightSection").addClass("hidden-sm hidden-xs"); $('html, body').animate({ scrollTop: $('#' + current_elemennt_id).offset().top }, 'fast'); })
    }, bindAllStores: function () { $(document).on("click", "#storeEventFinder .filter_cat_desk .panel-heading", function (e) { if ($(this).closest(".js-store-event-finder-navigation-list").hasClass("js-allstore-finder-navigation-list")) { regionIndex = $(this).closest(".panel").data("panelindex"); var regionImage = ACC.storeeventfinder.allStoreData["data"][regionIndex].regionImage; $(".region-image").html("<img src='" + regionImage + "'/>"); $(".js-store-event-finder.rightSection").hide(); $(".country-image").hide(); $(".region-image").show(); } }); }, bindSearch: function () {
        $(document).on("submit", '#storeFinderForm', function (e) {
            e.preventDefault()
            var q = $(".js-store-event-finder-search-input").val(); if (q.length > 0) { ACC.storeeventfinder.getInitStoreData(q); } else { ACC.storeeventfinder.hideStoreFinderDetails(); }
        })
        $(".js-store-event-finder").hide();
    }, getStoreEventsHTML: function (storeData, storeId) { var $boxContent = $("#js-store-event-details-structure"); $.each(storeData[storeId], function (key, value) { if (key == "events") { var eventsRows = ""; $.each(value, function (eventKey, event) { var eventsRow = ""; eventsRow += "<tr class='text-left store-event-row'>"; eventsRow += "<td><p class='event-time'>" + event.eventTime + "<br>" + event.eventDate + "</p></td>"; eventsRow += "<td><p class='event-name'><a href='" + event.eventUrl + "' class='txt_undr'>" + event.eventName + "</a></p></td>"; eventsRow += "</tr>"; eventsRows += eventsRow; }); $boxContent.find(".js-store-event-rows").html(eventsRows); } }); return $boxContent.html(); }, getStoreData: function (page) {
        ACC.storeeventfinder.storeSearchData.page = page; url = $(".js-store-event-finder").data("url"); $.ajax({
            url: url, data: ACC.storeeventfinder.storeSearchData, type: "get", success: function (response) {
                try {
                    ACC.storeeventfinder.storeData = $.parseJSON(response); ACC.storeeventfinder.refreshNavigation(); if (ACC.storeeventfinder.storeData.total < ACC.storeeventfinder.pageSize) { ACC.storeeventfinder.disableButton("js-store-event-finder-pager-next"); }
                    $("#storeEventFinder .js-store-event-finder").show(); $("#storeEventFinder .rightSection").addClass("hidden-sm hidden-xs");
                } catch (e) { ACC.storeeventfinder.hideStoreFinderDetails(); console.log(e); }
            }
        });
    }, getInitStoreData: function (q, latitude, longitude) {
        $(".alert").remove(); data = { "q": "", "page": 0 }
        if (q != null) { data.q = q; }
        if (latitude != null) { data.latitude = latitude; }
        if (longitude != null) { data.longitude = longitude; }
        ACC.storeeventfinder.storeSearchData = data; ACC.storeeventfinder.getStoreData(data.page); $(".js-store-event-finder").show();
    }, searchWithoutLocation: function () { if (locationKnown) { locationKnown = false; $("#findStoresNearMe").removeClass("hide"); $("#storeEventFinder .all_stores_btn").addClass("hide"); $("#storeEventFinder .all_stores_btn").click(); } }, init: function () {
        $(document).on("click", "#storeEventFinder .all_stores_btn", function (e) { e.preventDefault(); ACC.storeeventfinder.storeSearchData.page = page; url = $(".all_stores_btn").data("url"); $.ajax({ url: url, type: "get", success: function (response) { try { ACC.storeeventfinder.allStoreData = $.parseJSON(response); ACC.storeeventfinder.refreshAllStoreNavigation(); $(".js-store-event-finder").show(); $(".country-image").html("<img src='" + ACC.storeeventfinder.allStoreData.countryImage + "'/>"); $(".country-image").show(); $(".region-image").hide(); $(".js-store-event-finder.rightSection").hide(); $("#storeEventFinder .all_stores_btn").addClass("hide"); $('#storeEventFinder #findStoresNearMe').removeClass("hide"); } catch (e) { console.log("in catch of ajax"); } }, error: function (request, status, error) { console.log("in error of ajax"); } }); }); $(document).on("click", '#findStoresNearMe', function (e) {
            e.preventDefault()
            if (!ACC.storeeventfinder.locationShareConsent) {
                if ($(".js-storeeventfinder-alert").length < 1) {
                    var errorMessage = $("#storeEventFinder #findStoresNearMe").data("nolocationconsent")
                    $("#storeEventFinder").before('<div class="js-storeeventfinder-alert alert alert-danger alert-dismissable" ><button class="close" type="button" data-dismiss="alert" aria-hidden="true">×</button>' + errorMessage + '</div>');
                }
                return;
            }
            ACC.storeeventfinder.getInitStoreData(null, ACC.storeeventfinder.coords.latitude, ACC.storeeventfinder.coords.longitude); $('#findStoresNearMe').addClass("hide"); $("#storeEventFinder .all_stores_btn").removeClass("hide");
        })
        locationKnown = true; var locationCookie; try { locationCookie = document.cookie.split("locationCookie")[1].split("; ")[0].substr(1); } catch (error) { locationCookie = "_"; }
        if (locationCookie != null && locationCookie != "_") { var loc = locationCookie.split('_'); var lat = loc[0]; var lan = loc[1]; ACC.storeeventfinder.coords = { latitude: lat, longitude: lan }; ACC.storeeventfinder.locationShareConsent = true; $('#findStoresNearMe').addClass("hide"); $("#storeEventFinder .all_stores_btn").removeClass("hide"); $("#storeEventFinder #findStoresNearMe").click(); locationKnown = false; } else { ACC.storeeventfinder.searchWithoutLocation() }
    }, disableButton: function (buttonClass) {
        $("." + buttonClass).attr("disabled", "disabled")
        $("." + buttonClass).attr("opacity", "0.5"); $("." + buttonClass).css("color", "#AAA");
    }, enableButton: function (buttonClass) {
        $("." + buttonClass).removeAttr("disabled")
        $("." + buttonClass).attr("opacity", "1");
    }, hideStoreFinderDetails: function () {
        if ($(".js-storeeventfinder-alert").length < 1) {
            var emptySearchMessage = $(".store_loc_icon").data("searchEmpty")
            $(".js-store-event-finder").hide(); $("#storeEventFinder").before('<div class="js-storeeventfinder-alert alert alert-danger alert-dismissable" ><button class="close" type="button" data-dismiss="alert" aria-hidden="true">×</button>' + emptySearchMessage + '</div>');
        }
    }, makeCurrentStoreElementActive: function (element) { if (ACC.storeeventfinder.renderIndex != 1 || ($(window).width() > 768)) { $('.js-store-event-finder-input').each(function (index, ele) { if ($(this).attr("id") == element.attr("id")) { $(this).addClass("active"); $(this).parent().addClass("active"); } else { $(this).removeClass("active"); $(this).parent().removeClass("active"); } }); } else { ACC.storeeventfinder.renderIndex = ACC.storeeventfinder.renderIndex + 1; } }
}; ACC.multidgrid = {
    populateAndShowGridOverlay: function (element, event) { "use strict"; event.preventDefault(); var itemIndex = $(element).data("index"); var gridEntries = $("#grid" + itemIndex); var strSubEntries = gridEntries.data("sub-entries"); var productName = gridEntries.data("product-name"); var arrSubEntries = strSubEntries.split(","); var firstVariantCode = arrSubEntries[0].split(":")[0]; var targetUrl = gridEntries.data("target-url") + "?productCode=" + firstVariantCode; ACC.colorbox.open(productName, { href: targetUrl, className: "read-only-grid", close: "<span class=\"glyphicon glyphicon-remove\"></span>", width: window.innerWidth > parseInt(cboxOptions.maxWidth, 10) ? cboxOptions.maxWidth : cboxOptions.width, height: window.innerHeight > parseInt(cboxOptions.maxHeight, 10) ? cboxOptions.maxHeight : cboxOptions.height, onComplete: function () { $("body").addClass("offcanvas"); var oH = $("#cboxLoadedContent").height(); $("#cboxLoadedContent").height((oH - $("#cboxTitle").height()) + "px"); }, onClosed: function () { $("body").removeClass("offcanvas"); } }); }, populateAndShowGrid: function (element, event, readOnly) {
        "use strict"; var itemIndex = $(element).data("index"); var grid = $("#ajaxGrid" + itemIndex); var gridEntries = $("#grid" + itemIndex); $(element).toggleClass("open"); if (!grid.is(":hidden")) { grid.slideUp(); return; }
        if (grid.html() != "") { grid.slideToggle("slow"); return; }
        var strSubEntries = gridEntries.data("sub-entries"); var arrSubEntries = strSubEntries.split(","); var firstVariantCode = arrSubEntries[0].split(":")[0]; var targetUrl = gridEntries.data("target-url"); var method = "GET"; $.ajax({ url: targetUrl, data: { productCode: firstVariantCode }, type: method, success: function (data) { grid.html(data); grid.slideDown("slow"); } });
    }
}; ACC.notifyme = { _autoload: ["init"], init: function () { "use strict"; $(".notify_me").on("click", function () { $("#notify-me").modal("show"); }); var modelContent = $("#notify-me-message .modal-content"); $("#notifyme-button").on("click", function (e) { var outOfStockNotifyMeForm = $("#outOfStockNotifyMeForm").serialize(); $.when(this.checkEmailNotifyme(outOfStockNotifyMeForm)).then(function (data) { if (data["emailValidationError"]) { $("#showError").removeClass("hidden"); $(".form-group").addClass("has-error"); } else { $("#notify-me").modal("hide"); $(modelContent).replaceWith(data.htmlContent); $("#notify-me-message").modal("toggle"); $("#notify-me-message").on("shown.bs.modal", function () { $("body").addClass("modal-open"); }); } }); }); }, checkEmailNotifyme: function (outOfStockNotifyMeForm) { "use strict"; var dataUrl = $("#outOfStockNotifyMeForm").attr("data-url"); return $.ajax({ url: dataUrl, method: "GET", contentType: "application/json; charset=utf-8", data: outOfStockNotifyMeForm }); } }; ACC.ContactUs = {
    _autoload: ["init"], parentSelected: "", init: function () {
        "use strict"; $(window).load(function () {
            $("select[class*='customselect_']").on("change", function () {
                if (ACC.ContactUs.isRootDropDown($(this))) { var selectedOption = $(this).children("option").filter(":selected"); ACC.ContactUs.parentSelected = $(selectedOption).attr("id"); }
                ACC.ContactUs.openNextDropDownChild($(this));
            }); $.each($("select[class*='customselect_']"), function (key, value) { if (!ACC.ContactUs.isRootDropDown($(this))) { $(this).closest(".form-group").addClass("hide"); } });
        });
    }, isRootDropDown: function (dropDownEle) { "use strict"; return $(dropDownEle).hasClass("customselectItemLevel_0"); }, openNextDropDownChild: function (parentDropDownEle) { "use strict"; var parentDropDownId = parentDropDownEle.attr("id"); var selectedDropDown = $(parentDropDownEle).children("option").filter(":selected"); ACC.ContactUs.hideAllOtherCustomDropDownExcept(selectedDropDown, parentDropDownId); if ($(selectedDropDown).data("isdropdown")) { ACC.ContactUs.showChildDropDowns(selectedDropDown, parentDropDownId); } }, showChildDropDowns: function (selectedDropDown, parentDropDownId) { "use strict"; $.each(ACC.ContactUs.getAllCustomDropDown(), function (key, value) { if ($(this).data("parent") == $(selectedDropDown).attr("id")) { $(this).closest(".form-group").removeClass("hide"); } }); }, hideAllOtherCustomDropDownExcept: function (selectedDropDownItem, parentDropDownId) { "use strict"; $.each(ACC.ContactUs.getAllCustomDropDown(), function (key, value) { if (!ACC.ContactUs.isRootDropDown($(this))) { if ($(selectedDropDownItem).data("isdropdown")) { if ($(this).attr("id") != $(selectedDropDownItem).attr("id") && $(this).data("parent") != parentDropDownId) { $(this).closest(".form-group").addClass("hide"); } } else if (!ACC.ContactUs.isParentDropDown(selectedDropDownItem, $(this)) && ($(this).attr("id") != $(selectedDropDownItem).data("parent") && $(this).data("parent") != parentDropDownId) && $(selectedDropDownItem).parent().data("parent") != ACC.ContactUs.parentSelected) { $(this).closest(".form-group").addClass("hide"); } } }); }, isParentDropDown: function (selectedItem, parentItem) {
        "use strict"; if ($(selectedItem).data("parent") == $(parentItem).attr("id")) { return true; }
        return false;
    }, getAllCustomDropDown: function () { "use strict"; return $("select[class*='customselect_']"); }
}; $.validator.addMethod("validateConfirmEmail", function (value, element) { "use strict"; if (value.trim().toUpperCase() == $("[name='email']").val().trim().toUpperCase()) { return true; } else { return false; } }, " Emails donot match"); $.validator.addMethod("validatePhoneDigits", function (value, element) { "use strict"; var phone = $("[name='phone']").val(); var regexPhone = "^[0-9]+$"; var regPhone = new RegExp(regexPhone); if (regPhone.test(phone) || phone == "") { return true; } else { return false; } }, $("#contactUsPhoneError").val()); $.validator.addMethod("validatePhoneMinLength", function (value, element) { "use strict"; var phone = $("[name='phone']").val(); var phoneLength = phone.length; var phoneMinLength = $("[name='phoneMinLength']").val(); if (phoneLength < phoneMinLength && !(phone == "")) { return false; } else { return true; } }, $("#phoneMinLengthError").val()); $.validator.addMethod("validatePhoneMaxLength", function (value, element) { "use strict"; var phone = $("[name='phone']").val(); var phoneLength = phone.length; var phoneMaxLength = $("[name='phoneMaxLength']").val(); if (phoneLength > phoneMaxLength && !(phone == "")) { return false; } else { return true; } }, $("#phoneMaxLengthError").val()); $("#contactUsForm").validate({ onkeyup: false, onfocusout: false, focusInvalid: false, ignore: ".hide .selectpicker", validClass: "valid", errorClass: "error", rules: { titleCode: { required: true }, firstName: { required: true }, lastName: { required: true }, email: { required: true }, confirmEmail: { required: true, validateConfirmEmail: true }, phone: { required: false, validatePhoneDigits: true, validatePhoneMinLength: true, validatePhoneMaxLength: true }, "selectedDropDownData[0].name": { required: true }, "selectedDropDownData[1].name": { required: true }, "selectedDropDownData[2].name": { required: true }, "selectedDropDownData[3].name": { required: true }, "selectedDropDownData[4].name": { required: true }, "selectedDropDownData[5].name": { required: true }, query: { required: true } }, messages: { titleCode: { required: $("#titleError").val() }, firstName: { required: $("#firstNameError").val() }, lastName: { required: $("#lastNameError").val() }, email: { required: $("#emailError").val() }, confirmEmail: { required: $("#confirmEmailError").val() }, "selectedDropDownData[0].name": { required: $("#dropdownError").val() }, "selectedDropDownData[1].name": { required: $("#dropdownError").val() }, "selectedDropDownData[2].name": { required: $("#dropdownError").val() }, "selectedDropDownData[3].name": { required: $("#dropdownError").val() }, "selectedDropDownData[4].name": { required: $("#dropdownError").val() }, "selectedDropDownData[5].name": { required: $("#dropdownError").val() }, query: { required: $("#queryError").val() } }, errorPlacement: function (error, element) { "use strict"; if (element.hasClass("selectpicker")) { error.insertAfter(element.parent(".form-group")); } else { error.insertAfter(element); } }, highlight: function (element, errorClass, validClass) { "use strict"; $(element).addClass(errorClass).removeClass(validClass); $(element).parent(".form-group").addClass(errorClass).removeClass(validClass); }, unhighlight: function (element, errorClass, validClass) { "use strict"; $(element).addClass(validClass).removeClass(errorClass); $(element).parent(".form-group").addClass(validClass).removeClass(errorClass); }, submitHandler: function (form) { "use strict"; var captchaSiteKey = $("#contactUsForm").data("sitekey"); if (captchaSiteKey != "") { grecaptcha.enterprise.ready(function () { grecaptcha.enterprise.execute(captchaSiteKey, { action: "contact_form" }).then(function (token) { $("#recaptchaChallange").val(token); form.submit(); }); }); } else { form.submit(); } } }); ACC.LoadMore = {
    _autoload: ["init"], init: function () {
        "use strict"; $(".productsLoadMore").on("click", function () {
            var pageNumber = $(this).data("pagenumber"); var searchUrl = $(this).data("searchurl"); var productListing = $(".loadMoreProductsOnPage"); $.when(ACC.LoadMore.getProductListing(searchUrl, pageNumber + 1)).then(function (data) {
                if (data.htmlContent.length > 1) {
                    ++pageNumber; $(productListing).append(data.htmlContent); if (!data.hasMoreResults) { $(".productsLoadMore").hide(); }
                    yall();
                }
            }); $(this).data("pagenumber", pageNumber); return false;
        });
    }, getProductListing: function (searchUrl, pagenumber) { "use strict"; var searchUrlSplit = searchUrl.split("?"); var mainUrl = searchUrlSplit[0]; var queryString = searchUrlSplit[1]; return $.ajax({ url: ACC.config.encodedContextPath + mainUrl + "/load-more?" + queryString + "&page=" + pagenumber, type: "GET", contentType: "application/json; charset=utf-8", async: false }); }
}; ACC.login = { _autoload: ["init"], init: function () { "use strict"; $(".login_bt").click(function (e) { e.preventDefault(); if ($("#loginForm").valid()) { $("#loginForm").submit(); } else { $("#display-error-message-login").show(); $(".global-alerts").hide(); } }); $("#loginForm").validate({ onkeyup: false, onfocusout: false, focusInvalid: true, rules: { j_username: { required: true, email: true }, j_password: { required: true, pwcheck: true } }, messages: { j_password: { required: $("#passwordError").val() }, j_username: { required: $("#userNameError").val(), email: $("#invalidEmailError").val() } } }); $.validator.addMethod("pwcheck", function (value) { return /^(.{6,30})$/.test(value); }, $("#invalidPasswordError").val()); } }; $(".gift_add_to_cart").click(function (e) {
    e.preventDefault(); var regexExp = /(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff])|,/g; var tempGiftMsg = $("#giftCardMessage").val(); var giftPersonalise = tempGiftMsg.replace(/\€|\£|,/g, ""); $(".giftCardMessageError").css("display", "none"); $("#giftCardMessage").removeClass("error"); var checkValidGiftMessage = regexExp.test(giftPersonalise); if (!checkValidGiftMessage) {
        $("#giftCardMessage").removeClass("error"); if ($("#giftCardCartForm").valid()) {
            var addToCartForm = $('.gift_add_to_cart_form'); addToCartForm.ajaxSubmit({
                success: function (data) {
                    if (data.error) { var errorField = data.error.errorField; var errorMessage = data.error.errorMessage; $("#" + errorField).addClass("error"); $("<label for='" + errorField + "' generated='true' class='error'>" + errorMessage + "</label>").insertAfter("#" + errorField); }
                    else { ACC.product.displayAddToCartPopup(data); }
                }
            });
        }
        else { $("#display-error-message-giftcardpage").show(); $(".global-alerts").hide(); }
    }
    else { $("#giftCardMessage").addClass("error"); $(".giftCardMessageError").css("display", "block"); }
}); $("#giftCardCartForm").validate({ onkeyup: false, onfocusout: false, focusInvalid: true, rules: { productCodePost: { required: true, }, giftCardEmail: { required: true, emailformat: true }, confirmGiftCardEmail: { required: true, emailformat: true, equalTo: "#giftCardEmail" }, senderName: { required: true }, }, errorPlacement: function (error, element) { if (element.attr("name") == "productCodePost") { $(".productcodeposterror").html(error); } else { error.insertAfter(element); } }, messages: { productCodePost: { required: $("#giftproducterror").val(), }, giftCardEmail: { required: $("#giftcardemailerror").val(), }, senderName: { required: $("#giftcardSenderNameError").val(), }, confirmGiftCardEmail: { required: $("#confirmEmailError").val(), equalTo: $("#emailMismatchError").val(), } } }); $.validator.addMethod("emailformat", function (value) { return /^[\w\-\.\+]+\@[a-zA-Z0-9\.\-]+\.[a-zA-z]{2,4}$/.test(value) }, $("#invalidgiftcardemail").val()); var allBundleSubProductsSelected = false; $(function () {
    var selectedSubProducts = new Array(); var maxProducts = $("input[type=hidden][name=productRestrictionCount]").val(); if (!maxProducts || maxProducts == "0") { allBundleSubProductsSelected = true; }
    $("button.js-select-subproduct-button").click(function () {
        var selectedProductCode = $(this).attr("data-productcode"); if (selectedSubProducts.length == maxProducts) { var removedProductCode = selectedSubProducts.shift(); removeProductFromSelection(selectedSubProducts, removedProductCode); }
        addProductToSelection(selectedSubProducts, selectedProductCode, this); if (selectedSubProducts.length == maxProducts) { $("button.js-select-subproduct-button").prop("disabled", true); allBundleSubProductsSelected = true; $("input[type=hidden][name=subProductCodes]").val(selectedSubProducts); var isBundleProductOutOfStock = checkBundleProductOutOfStock(); var clickNCollectSelected = $("#ccradiobutton").attr("data-label") !== 'inStore' && $('#ccradiobutton').is(':checked'); var storeSelected = $("input[type=hidden][name=storeName]").val(); var homeDeliverySelected = $("#js-homeDeliveryRadio").is(":checked"); if (((clickNCollectSelected && storeSelected) || homeDeliverySelected) && !isBundleProductOutOfStock) { $("button#addToCartButton").prop("disabled", false); $("button#addToCartButton").removeClass("disble-tab"); $("div.js-div-subproducts-success-msg").show(); } }
    }); $("button.js-remove-subproduct-button").click(function () { allBundleSubProductsSelected = false; $("button.js-select-subproduct-button").prop("disabled", false); var removedProductCode = $(this).attr("data-productcode"); var removedProductCodeIndex = selectedSubProducts.indexOf(removedProductCode); selectedSubProducts.splice(removedProductCodeIndex, 1); removeProductFromSelection(selectedSubProducts, removedProductCode); $("div.js-div-subproducts-success-msg").hide(); $("button#addToCartButton").prop("disabled", true); $("button#addToCartButton").addClass("disble-tab"); });
}); function removeProductFromSelection(selectedSubProducts, removedProductCode) { var removedProductSelectButton = $("button.js-select-subproduct-button[data-productcode=" + removedProductCode + "]"); removedProductSelectButton.siblings("button.js-remove-subproduct-button").hide(); removedProductSelectButton.siblings("span.js-span-right-tick").hide(); removedProductSelectButton.show(); }
function addProductToSelection(selectedSubProducts, selectedProductCode, selectedButton) { selectedSubProducts.push(selectedProductCode); $(selectedButton).siblings("button.js-remove-subproduct-button").show(); $(selectedButton).siblings("span.js-span-right-tick").show(); $(selectedButton).hide(); }
function checkBundleProductOutOfStock() { var stockStatus = $("input[type=radio][name=radio]:checked").parents(".col-xs-6").find("span[name=js-stockStatusCode]").html(); return stockStatus === OUT_OF_STOCK; }; ACC.giftfinder = {
    validateGiftFinder: function (element) {
        "use strict"; var lastQueryString = element.lastQueryString.value; element.lastQuery.value = lastQueryString; var isValid = false; if ($("#gift_finder_form input:checkbox:checked").length > 0) { isValid = true; } else { $("#display-error-message").show(); isValid = false; $("html, body").animate({ scrollTop: 150 }, 800); }
        return isValid;
    }
}; window.onpageshow = function (event) {
    if (typeof (productCodeToFocus) !== 'undefined' && productCodeToFocus) { $('html, body').animate({ scrollTop: $("#span_" + productCodeToFocus).offset().top }, 1); }
}; ACC.minicart = { updateMiniCartDisplay: function () { "use strict"; var cartItems = $(".mini-cart-link").data("miniCartItemsText"); var miniCartRefreshUrl = $(".mini-cart-link").data("miniCartRefreshUrl"); $.ajax({ url: miniCartRefreshUrl, cache: false, type: "GET", success: function (jsonData) { if (jsonData.miniCartCount > 0) { $(".js-basket-label").addClass("margin-left-header"); $(".js-basketcount").removeClass("display-none"); $(".js-basketcount").html(jsonData.miniCartCount); $(".mini-cart-link .js-mini-cart-count").html("<span class=\"nav-items-total\">" + jsonData.miniCartCount + "<span class=\"items-desktop hidden-xs hidden-sm\">" + " " + cartItems + "</span>" + "</span>"); $(".mini-cart-link .js-mini-cart-price").html(jsonData.miniCartPrice); } } }); } }; ACC.cart = {
    _autoload: ["bindHelp", "cartRestoration", "bindCartPage", "bindMultiDEntryRemoval", "bindMultidCartProduct", ["bindApplyVoucher", $("#js-voucher-apply-btn").length != 0], ["bindToReleaseVoucher", $("#js-applied-vouchers").length != 0], "whenNoEssentialAccessories"], bindHelp: function () { "use strict"; $(document).on("click", ".js-cart-help", function (e) { e.preventDefault(); var title = $(this).data("help"); ACC.colorbox.open(title, { html: $(".js-help-popup-content").html(), width: "300px" }); }); }, cartRestoration: function () { "use strict"; $(".cartRestoration").click(function () { var sCartUrl = $(this).data("cartUrl"); window.location = sCartUrl; }); }, bindCartPage: function () { "use strict"; $(document).on("click", ".js-show-editable-grid", function (event) { ACC.cart.populateAndShowEditableGrid(this, event); }); }, bindMultiDEntryRemoval: function () { "use strict"; $(document).on("click", ".js-submit-remove-product-multi-d", function () { var itemIndex = $(this).data("index"); var $form = $("#updateCartForm" + itemIndex); var initialCartQuantity = $form.find("input[name=initialQuantity]"); var cartQuantity = $form.find("input[name=quantity]"); var productCode = $form.find("input[name=productCode]").val(); cartQuantity.val(0); initialCartQuantity.val(0); ACC.track.trackRemoveFromCart(productCode, initialCartQuantity, cartQuantity.val()); var method = $form.attr("method") ? $form.attr("method").toUpperCase() : "GET"; $.ajax({ url: $form.attr("action"), data: $form.serialize(), type: method, success: function (data) { location.reload(); } }); }); }, populateAndShowEditableGrid: function (element, event) {
        "use strict"; var readOnly = $(element).data("readOnlyMultidGrid"); var itemIndex = $(element).data("index"); var grid = $("#ajaxGrid" + itemIndex); var gridEntries = $("#grid" + itemIndex); var strSubEntries = gridEntries.data("sub-entries"); var arrSubEntries = strSubEntries.split(","); var firstVariantCode = arrSubEntries[0].split(":")[0]; $(element).toggleClass("open"); var targetUrl = gridEntries.data("target-url"); var mapCodeQuantity = {}; for (var i = 0; i < arrSubEntries.length; i++) { var arrValue = arrSubEntries[i].split(":"); mapCodeQuantity[arrValue[0]] = arrValue[1]; }
        if (grid.children("#cartOrderGridForm").length > 0) { grid.slideToggle("slow"); } else {
            var method = "GET"; $.ajax({
                url: targetUrl, data: { productCode: firstVariantCode, readOnly: readOnly }, type: method, success: function (data) {
                    grid.html(data); $("#ajaxGrid").removeAttr("id"); var $gridContainer = grid.find(".product-grid-container"); var numGrids = $gridContainer.length; for (var i = 0; i < numGrids; i++) { ACC.cart.getProductQuantity($gridContainer.eq(i), mapCodeQuantity, i); }
                    grid.slideDown("slow"); ACC.cart.coreCartGridTableActions(element, mapCodeQuantity); ACC.productorderform.coreTableScrollActions(grid.children("#cartOrderGridForm"));
                }
            });
        }
    }, coreCartGridTableActions: function (element, mapCodeQuantity) {
        "use strict"; ACC.productorderform.bindUpdateFutureStockButton(".update_future_stock_button"); ACC.productorderform.bindVariantSelect($(".variant-select-btn"), "cartOrderGridForm"); var itemIndex = $(element).data("index"); var skuQuantityClass = ".sku-quantity"; var quantityBefore = 0; var grid = $("#ajaxGrid" + itemIndex + " .product-grid-container"); grid.on("focusin", skuQuantityClass, function (event) {
            quantityBefore = jQuery.trim(this.value); $(this).parents("tr").next(".variant-summary").remove(); if ($(this).parents("table").data(ACC.productorderform.selectedVariantData)) { ACC.productorderform.selectedVariants = $(this).parents("table").data(ACC.productorderform.selectedVariantData); } else { ACC.productorderform.selectedVariants = []; }
            if (quantityBefore == "") { quantityBefore = 0; this.value = 0; }
        }); grid.on("focusout", skuQuantityClass, function (event) {
            var quantityAfter = 0; var gridLevelTotalPrice = ""; var indexPattern = "[0-9]+"; var currentIndex = parseInt($(this).attr("id").match(indexPattern), 10); this.value = ACC.productorderform.filterSkuEntry(this.value); quantityAfter = jQuery.trim(this.value); var variantCode = $("input[id='cartEntries[" + currentIndex + "].sku']").val(); if (isNaN(jQuery.trim(this.value))) { this.value = 0; }
            if (quantityAfter == "") { quantityAfter = 0; this.value = 0; }
            var $gridTotalValue = grid.find("[data-grid-total-id=" + "total_value_" + currentIndex + "]"); var currentPrice = $("input[id='productPrice[" + currentIndex + "]']").val(); if (quantityAfter > 0) { gridLevelTotalPrice = ACC.productorderform.formatTotalsCurrency(parseFloat(currentPrice) * parseInt(quantityAfter, 10)); }
            $gridTotalValue.html(gridLevelTotalPrice); var that = this; var priceSibling = $(this).siblings(".price"); var propSibling = $(this).siblings(".variant-prop"); var currentSkuId = $(this).next(".td_stock").data("sku-id"); var currentBaseTotal = $(this).siblings(".data-grid-total"); if (this.value != quantityBefore) { var newVariant = true; ACC.productorderform.selectedVariants.forEach(function (item, index) { if (item.id === currentSkuId) { newVariant = false; if (that.value === "0" || that.value === 0) { ACC.productorderform.selectedVariants.splice(index, 1); } else { ACC.productorderform.selectedVariants[index].quantity = that.value; ACC.productorderform.selectedVariants[index].total = ACC.productorderform.updateVariantTotal(priceSibling, that.value, currentBaseTotal); } } }); if (newVariant && this.value > 0) { ACC.productorderform.selectedVariants.push({ id: currentSkuId, size: propSibling.data("variant-prop"), quantity: that.value, total: ACC.productorderform.updateVariantTotal(priceSibling, that.value, currentBaseTotal) }); } }
            ACC.productorderform.showSelectedVariant($(this).parents("table")); if (this.value > 0 && this.value != quantityBefore) { $(this).parents("table").addClass("selected"); } else if (ACC.productorderform.selectedVariants.length === 0) { $(this).parents("table").removeClass("selected").find(".variant-summary").remove(); }
            if (quantityBefore != quantityAfter) { var method = "POST"; $.ajax({ url: ACC.config.encodedContextPath + "/cart/updateMultiD", data: { productCode: variantCode, quantity: quantityAfter, entryNumber: -1 }, type: method, success: function (data, textStatus, xhr) { ACC.cart.refreshCartData(data, -1, quantityAfter, itemIndex); mapCodeQuantity[variantCode] = quantityAfter; }, error: function (xhr, textStatus, error) { var redirectUrl = xhr.getResponseHeader("redirectUrl"); var connection = xhr.getResponseHeader("Connection"); if (redirectUrl !== null) { window.location = redirectUrl; } else if (connection === "close") { window.location.reload(); } } }); }
        });
    }, refreshCartData: function (cartData, entryNum, quantity, itemIndex) {
        "use strict"; if (cartData.entries.length == 0) { location.reload(); } else {
            var form; if (entryNum == -1) {
                form = $(".js-qty-form" + itemIndex); var productCode = form.find("input[name=productCode]").val(); quantity = 0; var entryPrice = 0; for (var i = 0; i < cartData.entries.length; i++) { var entry = cartData.entries[i]; if (entry.product.code == productCode) { quantity = entry.quantity; entryPrice = entry.totalPrice; break; } }
                if (quantity == 0) { location.reload(); } else { form.find(".qtyValue").html(quantity); form.parent().parent().find(".js-item-total").html(entryPrice.formattedValue); }
            }
            ACC.cart.refreshCartPageWithJSONResponse(cartData);
        }
    }, refreshCartPageWithJSONResponse: function (cartData) { "use strict"; ACC.minicart.updateMiniCartDisplay(); $(".js-cart-top-totals").html($("#cartTopTotalSectionTemplate").tmpl(cartData)); $("div .cartpotproline").remove(); $("div .cartproline").remove(); $(".js-cart-totals").remove(); $("#ajaxCartPotentialPromotionSection").html($("#cartPotentialPromotionSectionTemplate").tmpl(cartData)); $("#ajaxCartPromotionSection").html($("#cartPromotionSectionTemplate").tmpl(cartData)); $("#ajaxCart").html($("#cartTotalsTemplate").tmpl(cartData)); }, getProductQuantity: function (gridContainer, mapData, i) {
        "use strict"; var tables = gridContainer.find("table"); $.each(tables, function (index, currentTable) {
            var skus = jQuery.map($(currentTable).find("input[type='hidden'].sku"), function (o) { return o.value; }); var quantities = jQuery.map($(currentTable).find("input[type='textbox'].sku-quantity"), function (o) { return o; }); var selectedVariants = []; $.each(skus, function (index, skuId) {
                var quantity = mapData[skuId]; if (quantity != undefined) {
                    quantities[index].value = quantity; var indexPattern = "[0-9]+"; var currentIndex = parseInt(quantities[index].id.match(indexPattern), 10); var gridTotalValue = gridContainer.find("[data-grid-total-id=" + "total_value_" + currentIndex + "]"); var gridLevelTotalPrice = ""; var currentPrice = $("input[id='productPrice[" + currentIndex + "]']").val(); if (quantity > 0) { gridLevelTotalPrice = ACC.productorderform.formatTotalsCurrency(parseFloat(currentPrice) * parseInt(quantity, 10)); }
                    gridTotalValue.html(gridLevelTotalPrice); selectedVariants.push({ id: skuId, size: $(quantities[index]).siblings(".variant-prop").data("variant-prop"), quantity: quantity, total: gridLevelTotalPrice });
                }
            }); if (selectedVariants.length != 0) { $.tmpl(ACC.productorderform.$variantSummaryTemplate, { variants: selectedVariants }).appendTo($(currentTable).addClass("selected")); $(currentTable).find(".variant-summary .variant-property").html($(currentTable).find(".variant-detail").data("variant-property")); $(currentTable).data(ACC.productorderform.selectedVariantData, selectedVariants); }
        });
    }, bindMultidCartProduct: function () { "use strict"; $(document).on("click", ".showQuantityProduct", function (event) { ACC.multidgrid.populateAndShowGrid(this, event, true); }); $(document).on("click", ".showQuantityProductOverlay", function (event) { ACC.multidgrid.populateAndShowGridOverlay(this, event); }); }, whenNoEssentialAccessories: function () { "use strict"; if ($.trim($("#essentialAccessoriesDiv").html()).length) { $("#paragraphDiv").attr("class", "col-md-6"); } }
}; ACC.cartitem = {
    _autoload: ["bindCartItem"], submitTriggered: false, bindCartItem: function () { "use strict"; $(".js-remove-entry-button").on("click", function () { var entryNumber = $(this).attr("id").split("_"); var form = $("#updateCartForm" + entryNumber[1]); var productCode = form.find("input[name=productCode]").val(); var initialCartQuantity = form.find("input[name=initialQuantity]"); var cartQuantity = form.find("input[name=quantity]"); var productName = form.data("cart").productName; var productPrice = form.data("cart").productPostPrice; var productBrand = form.data("cart").brand; var productCategory = form.data("cart").category; var productCurrency = form.data("cart").currency; var cartData = { "productCode": productCode, "initialCartQuantity": initialCartQuantity.val(), "newCartQuantity": cartQuantity.val(), "productName": productName, "productPrice": productPrice, "productBrand": productBrand, "productCategory": productCategory, "productCurrency": productCurrency }; ACC.track.trackRemoveFromCart(cartData); cartQuantity.val(0); initialCartQuantity.val(0); form.submit(); }); $(".js-update-entry-quantity-input").on("blur", function (e) { ACC.cartitem.handleUpdateQuantity(this, e); }).on("keyup", function (e) { return ACC.cartitem.handleKeyEvent(this, e); }).on("keydown", function (e) { return ACC.cartitem.handleKeyEvent(this, e); }); }, handleKeyEvent: function (elementRef, event) { "use strict"; if (event.which == 13 && !ACC.cartitem.submitTriggered) { ACC.cartitem.submitTriggered = ACC.cartitem.handleUpdateQuantity(elementRef, event); return ACC.cartitem.submitTriggered; } else if (ACC.cartitem.submitTriggered) { return false; } else { return true; } }, handleUpdateQuantity: function (elementRef, event) {
        "use strict"; var form = $(elementRef).closest("form"); var productCode = form.find("input[name=productCode]").val(); var initialCartQuantity = form.find("input[name=initialQuantity]").val(); var newCartQuantity = form.find("input[name=quantity]").val(); var productName = form.data("cart").productName; var productPrice = form.data("cart").productPostPrice; var productBrand = form.data("cart").brand; var productCategory = form.data("cart").category; var productCurrency = form.data("cart").currency; if (initialCartQuantity != newCartQuantity) { var cartData = { "productCode": productCode, "initialCartQuantity": initialCartQuantity, "newCartQuantity": newCartQuantity, "productName": productName, "productPrice": productPrice, "productBrand": productBrand, "productCategory": productCategory, "productCurrency": productCurrency }; ACC.track.trackUpdateCart(cartData); form.submit(); return true; }
        return false;
    }
}; ACC.common = { currentCurrency: $("main").data("currencyIsoCode") || "USD", processingMessage: $("<img src='" + ACC.config.commonResourcePath + "/images/spinner.gif'/>"), blockFormAndShowProcessingMessage: function (submitButton) { "use strict"; var form = submitButton.parents("form:first"); form.block({ message: ACC.common.processingMessage }); }, refreshScreenReaderBuffer: function () { "use strict"; $("#accesibility_refreshScreenReaderBufferField").attr("value", new Date().getTime()); }, checkAuthenticationStatusBeforeAction: function (actionCallback) { "use strict"; $.ajax({ url: ACC.config.authenticationStatusUrl, statusCode: { 401: function () { location.href = ACC.config.loginUrl; } }, success: function (data) { if (data == "authenticated") { actionCallback(); } } }); } }; jQuery.extend({ postJSON: function (url, data, callback) { "use strict"; return jQuery.post(url, data, callback, "json"); } }); $.ajaxPrefilter(function (options, originalOptions, jqXHR) { "use strict"; if (options.type === "post" || options.type === "POST") { var noData = (typeof options.data === "undefined"); if (noData) { options.data = "CSRFToken=" + ACC.config.CSRFToken; } else { var patt1 = /application\/json/i; if (options.data instanceof window.FormData) { options.data.append("CSRFToken", ACC.config.CSRFToken); } else if (patt1.test(options.contentType)) { jqXHR.setRequestHeader("CSRFToken", ACC.config.CSRFToken); } else if (options.data.indexOf("CSRFToken") === -1) { options.data = options.data + "&" + "CSRFToken=" + ACC.config.CSRFToken; } } } }); ACC.global = {
    _autoload: [["passwordStrength", $('.password-strength').length > 0], "bindToggleOffcanvas", "bindToggleXsSearch", "bindHoverIntentMainNavigation", "initImager", "backToHome", "bindUpdatePassword", "bindUpdateEmail"], passwordStrength: function () { "use strict"; $(".password-strength").pstrength({ verdicts: [ACC.pwdStrengthTooShortPwd, ACC.pwdStrengthVeryWeak, ACC.pwdStrengthWeak, ACC.pwdStrengthMedium, ACC.pwdStrengthStrong, ACC.pwdStrengthVeryStrong], minCharText: ACC.pwdStrengthMinCharText }); }, bindToggleOffcanvas: function () { "use strict"; $(document).on("click", ".js-toggle-sm-navigation", function () { ACC.global.toggleClassState($("main"), "offcanvas"); ACC.global.toggleClassState($("html"), "offcanvas"); ACC.global.toggleClassState($("body"), "offcanvas"); ACC.global.resetXsSearch(); }); }, bindUpdatePassword: function () {
        $(document).on("click", "#updatePasswordSubmitBtn", function (e) {
            var captchaSiteKey = $("#updatePasswordForm").data("sitekey"); e.preventDefault(); var captcha = ""; if (captchaSiteKey != "") {
                grecaptcha.enterprise.ready(function () {
                    grecaptcha.enterprise.execute(captchaSiteKey, { action: 'update_password' }).then(function (token) {
                        if (token == "" || token == null) { $("#captchaNotChosen").css("display", "block"); return; }
                        $("#recaptchaChallange").val(token); $("#updatePasswordForm").submit();
                    });
                });
            }
            else { $("#updatePasswordForm").submit(); }
        });
    }, bindUpdateEmail: function () {
        $(document).on("click", "#updateEmailSubmitBtn", function (e) {
            var captchaSiteKey = $("#updateEmailForm").data("sitekey"); e.preventDefault(); var captcha = ""; if (captchaSiteKey != "") {
                grecaptcha.enterprise.ready(function () {
                    grecaptcha.enterprise.execute(captchaSiteKey, { action: 'update_email' }).then(function (token) {
                        if (token == "" || token == null) { $("#captchaNotChosen").css("display", "block"); return; }
                        $("#recaptchaChallange").val(token); $("#updateEmailForm").submit();
                    });
                });
            }
            else { $("#updateEmailForm").submit(); }
        });
    }, bindContactSubmit: function () { $("#contactUsSubmitBtn").click(function (e) { var captchaSiteKey = $("#contactUsForm").data("sitekey"); e.preventDefault(); if (captchaSiteKey != "") { grecaptcha.enterprise.ready(function () { grecaptcha.enterprise.execute(captchaSiteKey, { action: "contact_form" }).then(function (token) { $("#recaptchaChallange").val(token); $("#contactUsForm").submit(); }); }); } else { $("#contactUsForm").submit(); } }); }, bindToggleXsSearch: function () { "use strict"; $(document).on("click", ".js-toggle-xs-search", function () { ACC.global.toggleClassState($(".site-search"), "active"); ACC.global.toggleClassState($(".js-mainHeader .navigation--middle"), "search-open"); }); }, resetXsSearch: function () { "use strict"; $(".site-search").removeClass("active"); $(".js-mainHeader .navigation--middle").removeClass("search-open"); }, toggleClassState: function ($e, c) { "use strict"; $e.toggleClass(c); return $e.hasClass(c); }, bindHoverIntentMainNavigation: function () {
        "use strict"; enquire.register("screen and (min-width:" + screenMdMin + ")", {
            match: function () {
                $(".js-enquire-has-sub").hoverIntent(function () {
                    var $this = $(this), itemWidth = $this.width(); var $subNav = $this.find(".js_sub__navigation"), subNavWidth = $subNav.outerWidth(); var $mainNav = $(".js_navigation--bottom"), mainNavWidth = $mainNav.width(); var leftPos = $this.position().left + itemWidth / 2 - subNavWidth / 2; var topPos = $this.position().top + $this.height(); if (leftPos > 0 && leftPos + subNavWidth < mainNavWidth) { $subNav.css({ "left": leftPos, "top": topPos, "right": "auto" }); } else if (leftPos < 0) { $subNav.css({ "left": 0, "top": topPos, "right": "auto" }); } else if (leftPos + subNavWidth > mainNavWidth) { $subNav.css({ "right": 0, "top": topPos, "left": "auto" }); }
                    $this.addClass("show-sub");
                }, function () { $(this).removeClass("show-sub"); });
            }, unmatch: function () { $(".js_sub__navigation").removeAttr("style"); $(".js-enquire-has-sub").hoverIntent(function () { }); }
        });
    }, initImager: function (elems) { }, reprocessImages: function (elems) { }, addGoogleMapsApi: function (callback) { "use strict"; if (callback != undefined && $(".js-googleMapsApi").length == 0) { $("head").append("<script class=\"js-googleMapsApi\" type=\"text/javascript\" src=\"//maps.googleapis.com/maps/api/js?key=" + ACC.config.googleApiKey + "&sensor=false&callback=" + callback + "\"></script>"); } else if (callback != undefined) { callback(); } }, backToHome: function () { "use strict"; $(".backToHome").on("click", function () { var sUrl = ACC.config.contextPath; window.location = sUrl; }); }
}; ACC.paginationsort = {
    _autoload: ["bindPaginationSort"], downUpKeysPressed: false, bindPaginationSort: function () { "use strict"; this.bindSortForm($("#sortForm1")); this.bindSortForm($("#sortForm2")); }, bindSortForm: function (sortForm) {
        "use strict"; sortForm.change(function () {
            if (!ACC.paginationsort.downUpPressed) { this.submit(); }
            ACC.paginationsort.downUpPressed = false;
        });
    }, sortFormIEFix: function (sortOptions, selectedOption) { "use strict"; sortOptions.keydown(function (e) { if (e.keyCode === 38 || e.keyCode === 40) { ACC.paginationsort.downUpPressed = true; } else if (e.keyCode === 13 && selectedOption !== $(this).val()) { $(this).parent().submit(); } else { ACC.paginationsort.downUpPressed = false; } }); }
};